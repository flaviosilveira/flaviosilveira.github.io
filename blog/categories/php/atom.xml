<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | Flávio Silveira]]></title>
  <link href="http://flaviosilveira.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://flaviosilveira.com/"/>
  <updated>2019-02-27T19:19:05+00:00</updated>
  <id>http://flaviosilveira.com/</id>
  <author>
    <name><![CDATA[Flávio Silveira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Criando Seu Container Com Dockerfile]]></title>
    <link href="http://flaviosilveira.com/2017/criando-seu-container-com-dockerfile/"/>
    <updated>2017-02-12T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2017/criando-seu-container-com-dockerfile</id>
    <content type="html"><![CDATA[<p>Foi uma longa jornada até criarmos nosso container da maneira que queríamos <a href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-1/">flaviosilveira.com/2017/criando-seu-container-nginx-php-1/</a> e <a href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-2/">flaviosilveira.com/2017/criando-seu-container-nginx-php-2/</a>. Ainda assim temos alguns pontos chatos como o de ter de iniciar o Nginx e o PHP-FPM Manualmente.</p>

<p>Felizmente há uma maneira mais simples de montarmos nosso container e ainda fugindo do trabalho manual. Vamos usar Dockerfile!</p>

<p>Dockerfile é um arquivo onde colocamos tudo o que precisamos para nosso container. De qual container ele se origina, o que você quer instalar, que serviços quer rodar.</p>

<p>Se você está acompanhando a série de artigos sobre docker, basicamente vamos traduzir o que fizemos nos dois artigos anteriores para um Dockerfile.</p>

<p>No decorrer deste artigo vou me referir aos 2 anteriores praticamente o tempo todo. Caso você não os tenha lido, pode ficar um pouco fora de contexto para você, mas nada que vá comprometer o entendimento final.</p>

<!--more-->


<h3>Preparação</h3>

<p>Crie uma pasta chamada <em>docker-test</em>, e dentro dela crie um arquivo chamado <em>Dockerfile</em>. Com a inicial maiúscula e sem extensão.</p>

<p>Isso é tudo que vamos precisar.</p>

<h3>Container de origem</h3>

<p>No começo da parte 1 do artigo falamos sobre de qual container partiríamos. Entre Ubuntu e Debian, ficamos com o Debian.</p>

<p>Para dizer isso para o Dockerfile, usamos <strong>FROM</strong></p>

<pre><code>FROM debian
</code></pre>

<p>Com essa diretiva, estamos partindo da última imagem do debian presente no DockerHub.</p>

<h3>Assine sua imagem</h3>

<p>Use <em>MAINTENER</em> para assinar sua imagem, dizer aos outros quem é o mantenedor dela.
No meu caso:</p>

<pre><code>MAINTAINER Flavio Silveira
</code></pre>

<h3>Atualização e instalações</h3>

<p>Passamos algum tempo atualizando o sistema e em seguida instalando o NGinx e o PHP-FPM. Fizemos isso de fora do container usando o comando <em>docker exec</em>.</p>

<p>No Dockerfile usamos RUN para criar o ambiente da nossa imagem</p>

<pre><code>RUN apt-get update
RUN apt-get install -y nginx
RUN apt-get install -y php5-fpm
</code></pre>

<p>Essas 3 linhas resumem muito do trabalho que foi feito na parte 1 do artigo. Elas indicam respectivamente que queremos atualizar o sistema operacional e em seguida instalar o NGinx e o php5-fpm. Simples assim!</p>

<h3>Configurações</h3>

<p>Para configurar nosso container, entramos nele com o comando <em>docker attach</em> e criamos e alteramos o arquivo <em>/etc/nginx/sites-available/default</em>. Fizemos um arquivo bem enxuto funcionando na porta <em>80</em> e apontando para <em>/var/www/app</em>.</p>

<p>Copie o trabalho que fizemos com o arquivo default dentro do container para um arquivo local, dentro de nossa pasta <em>docker-test</em>, chame ele de <em>default</em>.</p>

<p>Agora vamos dizer para o Dockerfile que queremos copiar esse arquivo para a configuração do Nginx.</p>

<pre><code>COPY default /etc/nginx/sites-available/default
</code></pre>

<p>O primeiro parâmetro é o arquivo em nossa máquina, e o segundo é o lugar que ele vai parar em nossa imagem.</p>

<p>Os passos de criar a pasta app, não serão necessários. Você vai ver como o container vai se virar com isso sem trazer a dor de cabeça para você.</p>

<h3>Fechando sua imagem</h3>

<p>Na parte 2 do artigo anterior criamos a imagem a partir do container que estavamos rodando. Infelizmente tinhamos de iniciar o NGinx e o PHP-FPM manualmente após fazer download da imagem para fazer as coisas acontecerem.</p>

<p>Aqui no Dockerfile vamos resolver esse problema.</p>

<p>Uma vez que nosso ambiente foi preparado com os comandos anteriores, agora vamos usar <em>CMD</em> para dizer como nosso container vai rodar.</p>

<pre><code>CMD service nginx start &amp;&amp; service php5-fpm start &amp;&amp; /bin/bash
</code></pre>

<p>Repare que diferente da diretiva <em>RUN</em>, com <em>CMD</em> concatenamos os comandos usando <em>&amp;&amp;</em>. Precisamos disso pois só podemos ter um <em>CMD</em> no Dockerfile.</p>

<p>Aqui respectivamente iniciarmos o Nginx, em seguida o PHP-FPM e executamos <em>/bin/bash</em> para que o container fique de pé quando iniciado.</p>

<p>Caso a gente não use esse <em>/bin/bash</em> aqui, teremos que passar ele quando rodarmos a imagem com <em>docker run</em>.</p>

<h3>Nosso Dockerfile</h3>

<p>É isso! Já temos tudo o que precisamos no nosso <em>Dockerfile</em>.
Vejam como ficou:</p>

<pre><code>FROM debian

MAINTAINER Flavio Silveira

RUN apt-get update
RUN apt-get install -y nginx
RUN apt-get install -y php5-fpm

COPY default /etc/nginx/sites-available/default

CMD service nginx start &amp;&amp; service php5-fpm start &amp;&amp; /bin/bash
</code></pre>

<h3>Construindo a imagem</h3>

<p>Para construir a imagem a partir do Dockerfile vamos executar o comando docker build.</p>

<pre><code>docker build -t flaviosilveira/php-nginx-2 .
</code></pre>

<p>Usamos o parâmetro -t para dar a nossa imagem um apelido, uma tag para que fique mais fácil levantar ela depois. Assim como no artigo anterior, coloque seu nome de usuário do DockerHub na frente da tag da imagem. Isso será necessário na hora do envio da imagem. No meu caso ficou <em>flaviosilveira/php-nginx-2</em>.</p>

<p>O ponto no final, indica o diretório aonde está o Dockerfile que você criou.</p>

<p>Você verá o docker executar passo a passo do seu Dockerfile em detalhes, acompanhe no seu terminal.</p>

<h3>Checando sua imagem e dando run</h3>

<p>Com o comando <em>docker images</em> você vê sua imagem criada localmente. Vamos testa-lá?</p>

<pre><code>docker run --name usando-dockerfile -itd -p 8080:80 -v ~/dev/php:/var/www/app flaviosilveira/php-nginx-2
</code></pre>

<p>Coloquei um nome para meu container de <em>usando-dockerfile</em>.</p>

<p>Passamos a referência de portas, a 8080 de nossa máquina vai bater na 80 do container.</p>

<p>Compartilhei uma pasta local minha <em>~/dev/php</em> para a pasta <em>/var/www/app</em> do container. Tudo que que for feito na pasta local, vai refletir na pasta dentro do container. <em>/var/www/app</em> é o local para onde nosso config do NGinx aponta como diretório raiz.</p>

<p>Faça os testes com seus arquivos PHP e veja em funcionamento.</p>

<p>Caso queira, acesse o container e confirme que seus serviços estão rodando e que o arquivo de configuração do NGinx foi copiado.</p>

<h3>Enviando ao Dockerhub</h3>

<p>Para enviar a imagem para o DockerHub, vamos fazer o mesmo processo do artigo anterior.</p>

<pre><code>docker login
</code></pre>

<p>Caso não tenha usuário no DockerHub, não esqueça de criar antes.</p>

<p>E para enviar a imagem</p>

<pre><code>docker push flaviosilveira/php-nginx-2
</code></pre>

<p>Use com a tag que deu para sua imagem, com seu nome de usuário.</p>

<p>É isso! Acesse o DockerHub para conferir.</p>

<h3>Testando</h3>

<p>Seguindo o mesmo que fizemos no final do último artigo vamos testar.</p>

<p>Antes de testar, vamos eliminar tudo que temos localmente, parar o container e remover a imagem.</p>

<pre><code>docker stop usando-dockerfile
docker rm usando-dockerfile
docker rmi flaviosilveira/php-nginx-2
</code></pre>

<p>Agora executamos o mesmo run que fizemos acima.</p>

<pre><code>docker run --name usando-dockerfile -itd -p 8080:80 -v ~/dev/php:/var/www/app flaviosilveira/php-nginx-2
</code></pre>

<p>A imagem não será encontrada localmente e será feito download dela diretamente do DockerHub.</p>

<p>Veja seu container rodando:</p>

<pre><code>docker ps
</code></pre>

<p>Viram como foi muito mais fácil usar o Dockerfile para criar nosso container? Por hoje é isso!</p>

<p>Grande abraço e até a próxima.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando Seu Container NGinx + PHP (Parte 2)]]></title>
    <link href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-2/"/>
    <updated>2017-01-14T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2017/criando-seu-container-nginx-php-2</id>
    <content type="html"><![CDATA[<p>No final da <a href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-1">parte 1 desse artigo</a>, onde montamos um container com Debian, NGinx e PHP, nos deparamos com o seguinte: Se pararmos nosso container e precisar novamente de NGinx + PHP, teremos que partir do zero.</p>

<p>Para evitar isso, vamos criar nossa própria imagem, uma imagem que vai guardar o que fizemos até agora.</p>

<!--more-->


<h3>Saia do container</h3>

<p>Primeiro vamos sair de nosso container com <strong><em>ctrl+p</em></strong> e em seguida <strong><em>ctrl+q</em></strong>.<br/><strong><em>Dica:</em></strong> Não precisa soltar o ctrl.</p>

<h3>Conta no DockerHub</h3>

<p>Vá até o DockerHub <a href="https://hub.docker.com/">https://hub.docker.com</a> e crie sua conta.</p>

<p>Após isso volte para o terminal e faço o comando de login</p>

<pre><code>docker login
</code></pre>

<p>Irá pedir seu usuário e senha e feito!</p>

<h3>Criando Imagem</h3>

<p>Para criar sua imagem, você vai precisar do <strong><em>ID</em></strong> do seu container, use <strong><em>docker ps</em></strong> para consultar. A primeira coluna vai te mostrar seu <strong><em>CONTAINER ID</em></strong>.</p>

<p>Em seguida, execute o commit com o comando abaixo:</p>

<pre><code>docker commit id-do-seu-container flaviosilveira/php-nginx
</code></pre>

<p>Substitua no comando acima <strong><em>id-do-seu-container</em></strong> pelo id mostrado em <strong><em>docker ps</em></strong>.</p>

<p>Fora o id, colocamos o nome que desejamos para nossa imagem. Escolhi php-nginx.</p>

<p>Repare que coloquei meu nome de usuário do DockerHub na frente do nome que quero para a imagem. Isso será necessário na hora do envio para o DockerHub.</p>

<p>O comando vai te retornar um hash SHA-256.</p>

<p>Confira sua imagem criada</p>

<pre><code>docker images
</code></pre>

<p>Sua imagem deve estar no topo dessa lista.</p>

<h3>Usando sua imagem localmente</h3>

<p>Uma vez que vemos a imagem no comando <strong><em>docker images</em></strong>, você já pode usar ela localmente.
<strong><em>ATENÇÃO:</em></strong> Altere o meu nome de usuário abaixo pelo seu.</p>

<pre><code>docker run --name usando-imagem -itd -p 8080:80 flaviosilveira/php-nginx
</code></pre>

<p>Pontos de atenção:</p>

<ul>
<li>Como nossa imagem é baseada na do Debian, rodamos ela de maneira igual. Compare o comando run executado aqui com o da parte 1 desse artigo.</li>
<li>Coloquei a porta 8080 do nosso host para apontar para a 80 do container (-p 8080:80), para não conflitar com a porta 80 do outro container (-p 80:80).</li>
</ul>


<p>Outra coisa. O serviço do NGinx e do PHP5-FPM estão parados!</p>

<p>Você precisa iniciar eles para ver as coisas funcionando.</p>

<pre><code>docker exec minha-imagem service nginx start
docker exec minha-imagem service php5-fpm start
</code></pre>

<p>Agora confira o resultado em <strong><em>localhost:8080</em></strong>.</p>

<h3>Enviando sua imagem para o DockerHub</h3>

<p>Já vimos em outros artigos o comando <strong><em>docker pull</em></strong> que serve para fazermos download de imagens para nossa máquina. Por padrão ele busca imagens do DockerHub, repositório padrão do docker.</p>

<p>Agora para enviarmos imagens para ele, temos o <strong><em>push</em></strong></p>

<pre><code>docker push flaviosilveira/php-nginx
</code></pre>

<h3>Testando</h3>

<p>Antes de testar, vamos eliminar tudo que temos localmente. Parar o container e remover a imagem.</p>

<pre><code>docker stop usando-imagem
docker rm usando-imagem
docker rmi flaviosilveira/php-nginx
</code></pre>

<p>Agora basta tentar executar o mesmo run que fizemos acima.</p>

<pre><code>docker run --name usando-dockerhub -itd -p 8080:80 flaviosilveira/php-nginx
</code></pre>

<p>A imagem não será encontrada localmente e será feito download dela diretamente do docker hub.</p>

<p>Veja seu container rodando</p>

<pre><code>docker ps
</code></pre>

<p>Ou dê start no NGinx e no PHP-FPM e acesse no seu navegador na porta 8080 como colocamos acima.</p>

<h3>Compartilhando seus arquivos php com o container</h3>

<p>Para compartilhar seus arquivos locais de PHP com o container, use o parâmetro de volume, como fizemos no artigo de <a href="http://flaviosilveira.com/2016/docker-php7-e-php-built-in/">docker com PHP Built in</a>.</p>

<pre><code>docker run --name usando-dockerhub -itd -p 8080:80 -v ~/dev/php:/var/www/app flaviosilveira/php-nginx
</code></pre>

<p>No parâmetro -v, você coloca o caminho da sua pasta local e separado por : (dois pontos) temos a pasta root que definimos no nosso NGinx.</p>

<p>Acesse o navegador para constatar.</p>

<h3>Resumo e Próximos passos?</h3>

<p>Nesse artigo dividido em duas partes fizemos bastante coisa:
<br/>Usamos uma imagem debian, instalamos NGinx e PHP de fora do container com <strong><em>exec</em></strong> e depois entramos nele para configurar as coisas.</p>

<p>Criamos um login no dockerHub, criamos uma imagem nossa e agora ela está disponível para quem precisar.</p>

<p>Mas a maneira como fizemos não deixa claro de que imagem partimos ou ainda caso a gente desista de usar Debian e queira usar CentOS, você vai ter que novamente partir do zero dessa maneira que fizemos.</p>

<p>Nossos próximos passos são aprender um pouco sobre tags e criar nossa imagem usando DockerFile, que também vai nos ajudar a parar com a chatisse de ter que iniciar o php e o NGinx manualmente.</p>

<p>Vamos para um post sobre isso?</p>

<p>Até lá! Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando Seu Container NGinx + PHP (Parte 1)]]></title>
    <link href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-1/"/>
    <updated>2017-01-14T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2017/criando-seu-container-nginx-php-1</id>
    <content type="html"><![CDATA[<p>Fala pessoal!<br/>Esse já é nosso terceiro artigo sobre docker:</p>

<ul>
<li>Já vimos como podemos iniciar com o Docker no artigo <a href="http://flaviosilveira.com/2016/comece-com-docker/">http://flaviosilveira.com/2016/comece-com-docker</a>.</li>
<li>Em seguida vimos como iniciar um Container com PHP 7 e usar seu servidor embutido (built in) em <a href="http://flaviosilveira.com/2016/docker-php7-e-php-built-in/">http://flaviosilveira.com/2016/docker-php7-e-php-built-in</a>.</li>
</ul>


<p>Com isso já conseguimos trabalhar com o PHP, mas o servidor Built-in não é a maneira ideal para isso. Como podemos colocar o PHP como um todo rodando em um container Docker para a gente? Vamos responder a isso.</p>

<p>Para quem não leu os primeiros dois artigos citados acima, recomendo. Acredito que vá ficar melhor de entender o que vem abaixo. Temos bastante <em>tecnês</em>.</p>

<!--more-->


<h3>Sim, tem pronto por aí!</h3>

<p>Nos artigos anteriores falamos sobre o DockerHub, repositório oficial de imagens para criarmos nossos containers. Estamos buscando um container que tenha para a gente um PHP e um NGinx, e claro que tem várias imagens prontas disso por aí.</p>

<p>Inclusive a que criamos nesse tutorial <a href="https://hub.docker.com/r/flaviosilveira/php-nginx/">https://hub.docker.com/r/flaviosilveira/php-nginx</a>.</p>

<p>Mas, para aprendermos algo novo, vamos construir nosso próprio container e com ele criar nossa imagem. Se você entendeu o conceito de containers e o que ele pode te trazer, pare e pense as maneiras que você teria para fazer isso.</p>

<p>Conseguiu pensar em algumas?</p>

<h3>Nossa maneira</h3>

<p>Que tal partirmos de um sistema operacional? Vamos de Debian. Acredito que é o meio caminho entre o que muitos conhecem, que é o Ubuntu, e legal para sair um pouco do mesmo.</p>

<p>Todos os comandos abaixo já foram explicados nos artigos anteriores. Volta lá se perdeu algo!</p>

<p>Lembrem-se do que sempre digo: <strong><em>Não é complicado! Se ficar complicado demais tem algo errado, volte e leia novamente, com mais calma</em></strong>.</p>

<h4>SO</h4>

<p>Rodando um container Debian, vmaos chamar ele de <strong><em>server</em></strong>:</p>

<pre><code>docker run --name server -itd -p 80:80 debian
</code></pre>

<p>Confira seu container rodando</p>

<pre><code>docker ps
</code></pre>

<p>Vamos dar um update no Debian para dessa maneira ele atualizar os caminhos dos pacotes:</p>

<pre><code>docker exec server apt-get update
</code></pre>

<h4>NGinx</h4>

<p>Terminado, podemos partir para a instalação do NGinx:<br/><strong>ATENÇÃO:</strong> não esqueça do -y abaixo, ele serve para confirmar que você quer instalar o pacote. As vezes sem essa opção a saída não vem corretamente do container para sua máquina.</p>

<pre><code>docker exec server apt-get install nginx -y
</code></pre>

<p>Vamos checar se instalou tudo certo?</p>

<pre><code>docker exec server nginx -v
</code></pre>

<p>A saída deve ser algo como:</p>

<pre><code>nginx version: nginx/1.6.2
</code></pre>

<p>O NGinx está instalado, mas ainda não está rodando. Vamos iniciar ele?</p>

<pre><code>docker exec server service nginx start
</code></pre>

<p>Agora que o NGinx está rodando, você já é capaz de ir ao seu localhost e ver a página inicial do NGinx.</p>

<h4>PHP</h4>

<p>Vamos agora instalar o PHP. Antes disso, vamos checar quais versões do PHP temos disponível para o Debian nessa versão.</p>

<pre><code>docker exec server apt-cache search php | grep fpm
</code></pre>

<p>Aqui retornou a versão 5 do FPM. Vamos com ela.<br/><strong>ATENÇÃO:</strong> não esqueça do -y.</p>

<pre><code>docker exec server apt-get install php5-fpm -y
</code></pre>

<p>Vamos checar se instalou tudo certo?</p>

<pre><code>docker exec server php --version
</code></pre>

<p>A saída deve ser algo como:</p>

<pre><code>PHP 5.6.29-0+deb8u1 (cli) (built: Dec 13 2016 16:02:08) 
Copyright (c) 1997-2016 The PHP Group
Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies
    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies
</code></pre>

<p>Para fechar igual a instalação do NGinx que fizemos acima, vamos iniciar o php-fpm?</p>

<pre><code>docker exec server service php5-fpm start
</code></pre>

<p>Feito!</p>

<p>Sim! Você pode adicioanar os caminhos no debian para instalar a versão 7 do PHP. Aqui fizemos com a versão que havia disponível para facilitar esse tutorial.</p>

<h3>Hora de Configurar</h3>

<p>Sistema Operacional, NGinx e PHP ok. Hora de configurar as coisas para rodarem.
Acima executamos todos os comandos de fora do container com <strong><em>docker exec</em></strong>. Agora como vamos editar arquivos de configuração, acho que é melhor irmos para dentro do container.</p>

<pre><code>docker attach server
</code></pre>

<p>Seu terminal deve ter ficado com algo como <strong><em>root@id-do-seu-container</em></strong>. Estamos dentro do container!</p>

<p>Para editar arquivos vamos precisar de um editor. Vou de <strong><em>Vim</em></strong>, e vocês? Instalem o editor que você tiverem facilidade.</p>

<p><strong><em>ATENÇÃO:</em></strong> Lembra do -y nos comandos acima? Aqui não passamos esse parâmetro. Então você terá que responder com <strong><em>Y</em></strong> se você deseja instalar o pacote quando for questionado por isso. Ou adicione o <strong><em>-Y</em></strong> no comando abaixo ;-)</p>

<pre><code>apt-get install vim
</code></pre>

<p>Com o editor em mãos, vamos configurar o NGinx.
Vamos ao arquivo default de configuração. Nessa versão ele está no seguinte caminho:</p>

<pre><code>vim /etc/nginx/sites-available/default
</code></pre>

<p>O Arquivo vem com várias linhas comentadas para facilitar o seu entendimento.
Segue o meu arquivo abaixo. Deixei o mais enxuto para ele funcionar na porta 80.</p>

<pre><code>server {
    listen   80;

    root /var/www/app;
    index index.php index.html;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}
</code></pre>

<p>Após editar o arquivo, reinicie o <strong><em>NGinx</em></strong></p>

<pre><code>service nginx restart
</code></pre>

<p>Repare que colocamos como raiz o caminho <strong><em>/var/www/app</em></strong>.
Vamos até <strong><em>/var/www</em></strong></p>

<pre><code>cd /var/www
</code></pre>

<p>Agora criamos a pasta app</p>

<pre><code>mkdir app
</code></pre>

<p>Vamos criar um arquivo <strong><em>index.php</em></strong> com uma função <strong><em>phpinfo</em></strong> dentro dele para fazermos um teste.</p>

<pre><code>&lt;?php phpinfo(); ?&gt;
</code></pre>

<p>Acesse localhost e veja o resultado.</p>

<h3>Hmm.. mas quando eu derrubar esse container?</h3>

<p>É, você vai ter que fazer tudo novamente. Mas não entre em pânico! Que tal criarmos nossa própria imagem, e sempre que quisermos um container com NGinx+PHP, podemos usar nossa própria imagem. Como te parece?</p>

<p>Vamos para a parte 2 desse artigo para pegar essa ideia <a href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-2">http://flaviosilveira.com/2017/criando-seu-container-nginx-php-2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker, PHP7 E PHP Built In]]></title>
    <link href="http://flaviosilveira.com/2016/docker-php7-e-php-built-in/"/>
    <updated>2016-10-10T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/docker-php7-e-php-built-in</id>
    <content type="html"><![CDATA[<p>No artigo anterior (<a href="http://flaviosilveira.com/2016/comece-com-docker/">Comece com Docker!</a>) descrevemos juntos alguns passos iniciais com o Docker. Criamos containers, usamos attached, detached, entramos, saímos, executamos comandos. Se você não está familiarizado a isso, te convido a visitar o artigo.</p>

<p>Sendo repetitivo, meu desejo com esses artigos sobre docker é passar para as pessoas as facilidades que containers nos dão para experimentar tecnologias. Que tal hoje experimentarmos o PHP7? Se você não teve a oportunidade de mexer um pouco com ele o Docker está aqui para facilitar as coisas. E para facilitar ainda mais vamos usar o recurso Built In, presente desde a versão 5.4, que nos traz um servidor web embutido. Assim não vamos precisar instalar nada mais.</p>

<!--more-->


<h3>PHP no DockerHub</h3>

<p>No final do artigo anterior falamos sobre o <a href="https://hub.docker.com/">DockerHUB</a>, repositório oficial de imagens para criarmos nossos containers.</p>

<p>O <a href="https://hub.docker.com/_/php/">PHP tem um reposítorio oficial no Docker hub</a> e é de lá que vamos começar. Nessa página temos várias informações desde o que é PHP até como usar a imagem, contribuir, instalar extensões e etc.</p>

<p>Nos comandos que usamos, fizemos <strong><em>Docker Run</em></strong> que verifica se já temos a imagem em nossa máquina e caso não tenha faz o download dela. Vamos aprender um comando novo.</p>

<pre><code>docker pull php
</code></pre>

<p>Com docker pull vamos fazer apenas o download da imagem, ele não vai iniciar um container para a gente direto como <strong><em>docker run</em></strong> faz, apenas o download.</p>

<p>Nesse comando temos a opção de especificar a versão que queremos do PHP. Não passando nada, vai vir para a gente a última. Exatamente o que estamos querendo aqui certo?</p>

<h3>Subindo Container PHP</h3>

<p>Uma vez que a imagem está em nossa máquina, é hora de rodar o container. Vamos ver em que versão estamos?</p>

<pre><code>docker run php php --version
</code></pre>

<p><strong>Docker run</strong> é nosso comando. <strong>php</strong> é o nome da nossa imagem e em seguida o comando que queremos executar no nosso container, <strong>php &ndash;version</strong>.</p>

<p>Ao final desse comando o container terá subido, executado <strong>php &ndash;version</strong>, mostra uma saída e mata o container. A saída dada para mim na data de hoje foi versão <strong>PHP7.0.11</strong>.</p>

<p>O Container morre, porque o comando que passamos executou e finalizou. Comprovamos isso rodando <strong>docker ps</strong>.</p>

<h3>PHP CLI</h3>

<p>Na mesma pegada, vamos testar o PHP CLI com nosso container. PHP CLI é o php em linha de comando.</p>

<p>Mas antes vamos criar um script php para rodar no CLI. Criei uma pasta chamada <strong>php</strong> no meu diretório de desenvolvimento e dentro dele vou criar um script chamado <strong>spaceship.php</strong>.</p>

<pre><code>&lt;?php

// Testing Spaceship Operator
echo 2 &lt;=&gt; 2; // 0
echo 5 &lt;=&gt; 6; // -1
echo 6 &lt;=&gt; 5; // 1

echo "a" &lt;=&gt; "a"; // 0
echo "a" &lt;=&gt; "b"; // -1
echo "b" &lt;=&gt; "a"; // 1
</code></pre>

<p>O objetivo desse script é simplesmente testarmos o Spaceship, novo operador que veio com o PHP7. Vamos rodar ele em um container?</p>

<pre><code>docker run -v ~/dev/php:/usr/src/wd -w /usr/src/wd php php spaceship.php
</code></pre>

<p><strong>Docker run</strong> é nosso comando. Com <strong>-v</strong> vamos fazer share do nosso diretório da nossa máquina local com um diretório de nosso container. Os dois vão estar espelhados. Com <strong>-w</strong> vamos dizer para nosso container php qual é nosso Working directory, nosso diretório de trabalho. Repare que coloquei o mesmo diretório que em nosso container é equivalente ao diretório em nossa máquina.</p>

<p><strong>php</strong> é o nome da nossa imagem que vai servir de base para nosso container e <strong>php spaceship.php</strong> é nosso comando que vai rodar em nosso working directory.</p>

<p>A saída esperada é <strong>0-110-11</strong>, como nos comentários do script acima.
Já conhecia o Spaceship? Vale uma lida na documentação em <a href="http://php.net/manual/en/migration70.new-features.php">novas features PHP7</a>.</p>

<h3>PHP Built In</h3>

<p>Finalmente, vamos finalizar com o PHP Built In.</p>

<p>Vamos primeiro lembrar como é o comando do PHP Built In. Para consultar o help do PHP Cli podemos fazer</p>

<pre><code>docker run -v ~/dev/php:/usr/src/wd -w /usr/src/wd php php --help
</code></pre>

<p>Com -S maiúsculo, temos o que procuramos:</p>

<pre><code>php -S 127.0.0.1:8080
</code></pre>

<p>Simples não? -S, IP e a porta para acessar.</p>

<p>Dessa vez vou explicar o comando que vamos fazer antes:
<strong>Docker run</strong> que é nosso comando para subir o container. <strong>-p</strong> vai mapear a porta 8080 da nossa máquina para a porta 8080 do container. <strong>-v</strong> como vimos anteriormente vai fazer o share do nosso diretório. <strong>-w</strong> especifica onde vai ser o working directory do container php. <strong>php</strong> é o nome da nossa imagem que vai servir de base para nosso container. E o comando que vamos executar dentro do container será <strong>php -S 0.0.0.0:8080</strong>.</p>

<pre><code>docker run -p 8080:8080 -v ~/dev/php:/usr/src/wd -w /usr/src/wd php php -S 0.0.0.0:8080
</code></pre>

<p>Em meu exemplo eu estou usando uma docker machine que tem um IP <strong>192.168.99.100</strong>, quando passo para o comando do container um IP <strong>0.0.0.0</strong> ele é traduzido para o IP da minha docker machine.</p>

<p>Ao executar o comando, ele vai ficar esperando.</p>

<p>Acesso no navegador o seu IP passando a porta 8080, e acrescente <strong>/spaceship.php</strong>. O mesmo resultado visto anteriormente no terminal, agora está no seu navegador.</p>

<p>Para matar o container basta retornar ao terminal e dar um <strong>CTRL+C</strong>.</p>

<h3>Fechando</h3>

<p>Hoje usamos a imagem do PHP. Para quem nunca havia provado o PHP7, fica a sugestão de fazer esse experimento bem facilmente usando containers e Docker. Aprendemos o comando para simplesmente fazer download de uma imagem e exploramos a imagem do PHP usando CLI e Built In.</p>

<p>Espero que sua cabeça esteja com ideias em cima do que foi passado aqui.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant, PuPHPet E PHP Built In]]></title>
    <link href="http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in/"/>
    <updated>2013-09-15T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in</id>
    <content type="html"><![CDATA[<p>Fala pessoal.<br/>
Hoje trago uma dica simples, talvez sem uma utilidade de pronto, mas que pode ser interessante para algum estudo.</p>




<p><strong>O que é Vagrant?</strong><br/>
Para quem ainda não conhece, Vagrant é uma ferramenta que vem revolucionando os ambientes de desenvolvimento.<br/>
Se você ainda não sabe nada sobre essa ferramenta, confira o post que escrevi aqui no blog: <a href="http://flaviosilveira.com/2012/vagrant-facil-e-util/">http://flaviosilveira.com/2012/vagrant-facil-e-util/</a>.</p>




<!--more-->




<p>Alguns pontos do Vagrant:<br/>
&#8211; Com o Vagrant você não precisa instalar apache e outras ferramentas e poluir sua máquina.<br/>
&#8211; Você pode criar uma máquina virtual para cada projeto e com isso ter uma versão igual ao seu servidor de produção, com a mesma versão de PHP, de MySQL e etc.<br/>
Com isso acaba aquela desculpa de &#8220;Na minha máquina funciona!&#8221;.<br/>
&#8211; Com o Vagrant você pode distribuir o mesmo ambiente para todo seu time de desenvolvimento, evitando funcionamentos diferentes entre pessoas do mesmo time.<br/>
&#8211; Muito mais.</p>




<p><strong>PuPHPet: Arquivos puppet</strong><br/>
Com arquivos puppet (.pp) você pode definir pacotes, programas e extensões a serem instaladas na sua máquina virtual.<br/>
Geralmente são coisas complicadas e sempre acaba surgindo um problema quando são feitos esses arquivos na mão.</p>




<p>Felizmente surge o PuPHPet <a href="https://puphpet.com/">https://puphpet.com/</a>, uma ferramenta online que cria o puppet para você. Você seleciona tudo o que você quer, incluindo pacotes PEAR, pacotes PECL, etc.<br/>
Permite também setar o XDebug, timezone, escolher versão do PHP, do MySQL, incluir o composer, muito mais.</p>




<p>Dê uma atenção especial na opção BOX IP Address. Nesse campo você define o ip da sua máquina virtual.<br/>
É esse IP que você vai digitar no browser da sua máquina e acessar o seu projeto.<br/>
Por padrão o PuPHPet traz o IP 192.168.56.101.</p>




<p><strong>O que é PHP Built In?</strong><br/>
Com a versão 5.4, o PHP trouxe uma novidade para os ambientes de desenvolvimento. O PHP Buitl In.<br/>
É um web server rodando direto em cima do PHP, mas apenas com propósitos de desenvolvimento.<br/>
Com um simples comando você define a porta da onde quer rodar o servidor, e pronto. Sem precisar de Apache, NGinx ou o que for.<br/>
Uma coisa rápida para testar seu projeto. Veja detalhes na documentação: <a href="http://www.php.net/manual/pt_BR/features.commandline.webserver.php">http://www.php.net/manual/pt_BR/features.commandline.webserver.php</a></p>




<p><strong>Mãos a Obra</strong><br/>
Instale a versão mais recente do Vagrant acessando a página de downloads em <a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a>.<br/>
Uma dica é ter instalado o Virtual Box para que tudo corra bem. A instalação não tem segredos.</p>




<p>Um segundo passo é configurar a sua máquina com a ajuda do PuPHPet <a href="https://puphpet.com/">https://puphpet.com/</a>.<br/>
Escolha no mínimo uma versão 5.4 do PHP. Faça o download do arquivo e posicione onde melhor julgar na sua máquina.</p>




<p>Via console, acesse essa pasta e vamos subir a sua máquina virtual com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant up
</pre>




<p>Esse comando irá fazer o download de tudo que você selecionou de configuração via PuPHPet e deixar a máquina online para você.<br/>
Ao final da configuração, você já é capaz de acessar a sua máquina via porta 80 por exemplo, digite em seu navegador o ip que foi setado no campo BOX IP Address no PuPHPet.</p>




<p>Mas que tal testar essa funcionalidade que veio com o PHP 5.4? Vamos colocar o PHP Built In para rodar.<br/>
Vamos acessar sua máquina virtual via ssh, com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant ssh
</pre>




<p>Caso você precise do root para qualquer coisa, basta colocar um sudo na frente do que precisar.</p>




<p>Vamos configurar um pequeno projeto PHP apenas para ocasião de teste. Por exemplo:</p>




<pre class="brush: bash; title: ; notranslate" title="">cd /var/www
mkdir teste
cd teste
</pre>




<p>Dentro dessa pasta teste que criamos, crie um arquivo PHP simples, com um echo por exemplo.</p>




<p>Você será capaz de acessar isso digitando seu BOX IP/teste, mas, para testar o PHP Built In, entre com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">sudo php -S 192.168.56.101:8080
</pre>




<p>Não esqueça de substituir 192.168.56.101 pelo seu BOX IP.<br/>
8080 é a porta que escolhemos aqui. Você pode definir a porta que quiser, com exceção das que já estão em uso.<br/>
** Qualquer comando executado nessa mesma janela, ou um ctrl+c irá derrubar o server.</p>




<p>Pronto, o PHP Built In está escutando na porta definida.<br/>
Você pode conferir isso abrindo um outro terminal e consultando os listenings com o comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">netstat -ln
</pre>




<p>Lembrando que esse comando pode variar de acordo com a distribuição que você selecionou na sua BOX.</p>




<p>Pronto. Você pode acessar do seu browser o seu BOX IP:PORTA e acessar o seu projeto diretamente, sem barras nem nada.<br/>
Aqui eu acessei <a href="http://192.168.56.101:8080/.">http://192.168.56.101:8080/.</a></p>




<p><strong>Resumindo</strong><br/>
Escrevi esse post apenas como curiosidade. Sei que ele pode não ter nenhuma aplicação prática, mas de repente é uma para o pessoal conhecer o PHP Built In e ver até onde ele vai e porque ele está apenas disponível para desenvolvimento.</p>




<p>Grande Abraço!</p>

]]></content>
  </entry>
  
</feed>
