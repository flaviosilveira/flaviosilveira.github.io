<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mobile | Flávio Silveira]]></title>
  <link href="http://flaviosilveira.com/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://flaviosilveira.com/"/>
  <updated>2016-11-08T00:23:35+00:00</updated>
  <id>http://flaviosilveira.com/</id>
  <author>
    <name><![CDATA[Flávio Silveira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C: A Linguagem Por Trás Do iOS – Parte 2]]></title>
    <link href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-2/"/>
    <updated>2013-04-13T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-2</id>
    <content type="html"><![CDATA[<p>[Este artigo faz parte de uma série de artigos para desenvolvimento IPhone, IPad e iOS.<br/>
<span style="line-height: 1.6em;">Você pode ver os demais artigos da série através da categoria Mobile]</span></p>




<p><span style="line-height: 1.6em;">Nessa parte 2 vamos continuar dando os primeiros passos e criando os primeiros exemplos com a linguagem Objective-C. Como discutido no primeiro artigo, essa linguagem veio evoluindo mas ainda mantém a linguagem C por trás dela, e é com isso que estamos criando nossos primeiros exemplos.</span></p>




<!--more-->




<p><span style="line-height: 1.6em;">[Acompanhe a primeira parte desse artigo em </span><a style="line-height: 1.6em;" href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/"><a href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/">http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/</a></a><span style="line-height: 1.6em;">]</span></p>




<p><strong style="line-height: 1.6em;">Lição de casa da parte 1<br /> </strong><span style="line-height: 1.6em;">No primeiro artigo deixei uma Lição de Casa que na verdade era uma pegadinha. Imprimir uma variável do tipo Boleana com o printf. Rapidamente o pessoal sacou e colocou nos comentários de que isso não existe. O </span><em style="line-height: 1.6em;">Boolean</em><span style="line-height: 1.6em;"> ou </span><em style="line-height: 1.6em;">Bool</em><span style="line-height: 1.6em;">, aparece em linguagens mais modernas. Para utilizar isso com C, fazemos uma simulação usando por exemplo um inteiro (0 e 1) ou também definindo um tipo qualquer e usando </span><em style="line-height: 1.6em;">enum</em><span style="line-height: 1.6em;">.</span></p>




<p><span style="line-height: 1.6em;">Hoje vamos Criar algumas condicionais e alguns loops.<br /> </span><span style="line-height: 1.6em;">Não tem novidade para quem já programa em outras linguagens, basta checar a sintaxe.<br /> </span><span style="line-height: 1.6em;">Mas caso você não se encaixe nesse grupo, siga o artigo.</span></p>




<p><span style="line-height: 1.6em;">Caso não lembre onde testar o seu código, que arquivo estamos mexendo e etc, consulte a parte 1!</span></p>




<p><strong style="line-height: 1.6em;">IF<br /> </strong><span style="line-height: 1.6em;">O IF não é segredo. Traduzindo do inglês = SE.<br /> </span><span style="line-height: 1.6em;">Se a condição bater, executa o código entre as chaves. Veja o exemplo:<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 5;
if(valor &lt; 10)
{
    printf("Menor que dez!");
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Definimos um variável inteira com valor 5. Se o valor for menor que 10, o printf é executado, caso contrário esse trecho é ignorado. </span><span style="line-height: 1.6em;">Simples não?</span></p>




<p><span style="line-height: 1.6em;">Para fazer comparações com a variável de valor, você pode usar no lugar do menor:<br /> </span><em style="line-height: 1.6em;">> Maior<br /> </em><em style="line-height: 1.6em;">&lt;= Menor ou Igual<br /> </em><em style="line-height: 1.6em;">>= Maior ou Igual<br /> </em><em style="line-height: 1.6em;">== Igual<br /> </em><em style="line-height: 1.6em;">!= Diferente</em></p>




<p><strong style="line-height: 1.6em;">ELSE<br /> </strong><span style="line-height: 1.6em;">Para os casos onde você quer executar algo quando o IF não bater, temos o ELSE. Traduzindo SENÃO.<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 15;
if(valor &lt; 10)
{
    printf("Menor que dez!");
}
else
{
    printf("Maior que dez!");
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Alteramos o valor da variável para 15. Em seguida adicionamos um ELSE.<br /> </span><span style="line-height: 1.6em;">Como valor é Maior que 10, esse trecho é pulado e o que está dentro das chaves do ELSE é executado.</span></p>




<p><strong style="line-height: 1.6em;">Combinando IFs e ELSEs<br /> </strong><span style="line-height: 1.6em;">Você pode combinar o If com o Else quantas vezes quiser, como no seguinte exemplo:<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 7;
if(valor == 7)
{
    printf("Valor Igual 7");
}
else if(valor &lt; 10)
{
    printf("Um numero menor que dez!");
}
else
{
    printf("Um numero maior que dez!");
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Alteramos a variável para 7, o que faz ela cair no primeiro IF. Caso contrário o código iria passando até bater com uma das condicionais. </span><span style="line-height: 1.6em;">Caso não bata com nenhum das condições ela cai no último ELSE. Lembrando que esse ELSE final não é obrigatório.</span></p>




<p><strong style="line-height: 1.6em;">SWITCH<br /> </strong><span style="line-height: 1.6em;">É recomendado evitar o uso de muitas combinações de IF e ELSE, para ficar mais fácil de manter o código ou até para entendimento do mesmo. </span><span style="line-height: 1.6em;">Veja o exemplo:</span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 16;
    
switch (valor) 
{
    case 7:
        printf("Sete!");
    break;
        
    case 9:
        printf("Nove!");
    break;    
        
    case 16:
        printf("Dezesseis!");
    break;    
        
    case 10:
        printf("Dez!");
    break;    
            
    default:
        printf("Outro!");
    break;
}
</pre>




<p><span style="line-height: 1.6em;">Entramos com o valor a ser analisado dentro do Switch.<br /> </span><span style="line-height: 1.6em;">Então usando o Case, entramos com as condicionais.<br /> </span><span style="line-height: 1.6em;">Caso não bata com nenhuma, temos a opção </span><em style="line-height: 1.6em;">DEFAULT</em><span style="line-height: 1.6em;">.</span></p>




<p><strong style="line-height: 1.6em;">FOR<br /> </strong><span style="line-height: 1.6em;">Quando temos a necessidade de executar uma ação várias vezes ou iterar um valor, surgem para nós os Loops.<br /> </span><span style="line-height: 1.6em;">E o FOR é um dos primeiros que encontramos.<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">for(int i = 0; i &lt;= 10; i++)
{
    printf("Valor de i: %d", i);
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Para entender o FOR, leia da seguinte maneira. i é igual a 0, enquanto i é menor ou igual que 10, vá aumentando i.</span></p>




<p><span style="line-height: 1.6em;">Esse i++, significa que estamos somando 1 ao valor de i, chamamos isso de incremento. Teremos mais detalhes sobre isso em próximos artigos.</span></p>




<p><span style="line-height: 1.6em;">Está é a maneira mais simples do FOR. Temos outros variações, mais complexas, com mais, com menos parâmetros.<br /> </span><span style="line-height: 1.6em;">Mas se você está começando fique com essa por enquanto.</span></p>




<p><strong style="line-height: 1.6em;">WHILE<br /> </strong><span style="line-height: 1.6em;">While, que traduzindo significa enquanto, é uma outra opção de loop. Veja o exemplo:<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int i = 0;
while (i &lt;= 10) 
{
    printf("Valor de i: %d", i);
    i++;
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Seguindo a mesma ideia do FOR, definimos o valor de i, mas dessa vez for da função. Enquanto i for menor igual que 10, o que temos dentro das chaves do while será executado.</span></p>




<p><span style="line-height: 1.6em;">Cuidado! Não esqueça de somar 1 ao valor de i cada vez que passarmos dentro do while.<br /> </span><span style="line-height: 1.6em;">Caso contrário teremos um loop infinito, e isso irá exceder o limite de memória e te causar problemas.</span></p>




<p><span style="line-height: 1.6em;">No exemplo acima, se i fosse por exemplo 15, o </span><em style="line-height: 1.6em;">WHILE</em><span style="line-height: 1.6em;"> não seria executado nenhuma vez.</span></p>




<p>Há situações onde precisamos executar ao menos uma vez o loop, mesmo que o valor não bata. Para essas situações temos o <em>DO WHILE</em>.</p>




<p><strong>DO WHILE<br/>
</strong></p>




<pre class="brush: cpp; title: ; notranslate" title="">int i = 15;
    
do 
{
    printf("Valor de i: %d", i);
    i++;
}
while (i &lt;= 10); 
</pre>




<p>O código é executado uma vez, independente se o valor bate com a condicional ou não.</p>




<p>No exemplo acima, como o valor está setado para 15, ele já não bate com nosso <em>WHILE</em> que pede um número menor igual a 10. Mesmo assim o código é executado uma vez, por conta do <em>DO</em>, traduzindo <em>FAÇA</em>.<span style="line-height: 1.6em;"> </span></p>




<p><strong>Resumindo<br/>
</strong><span style="line-height: 1.6em;">Os exemplos são bem simples e ainda não refletem exemplos muito reais. São exemplos fáceis de entender para que venham no futuro encaixar em problemas que você vai encontrar. </span></p>




<p>Pratique, mude valores das variáveis, faça seus exemplos, crie outras situações.<br/>
Esse é o caminho nesse estágio.</p>




<p>Até o próximo!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Montando a Tela Do Seu Aplicativo – Parte 1]]></title>
    <link href="http://flaviosilveira.com/2013/montando-a-tela-do-seu-aplicativo-parte-1/"/>
    <updated>2013-03-06T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/montando-a-tela-do-seu-aplicativo-parte-1</id>
    <content type="html"><![CDATA[<p><span style="line-height: 1.6em;">[Este artigo faz parte de uma série de artigos para desenvolvimento IPhone, IPad e iOS. Você pode ver os demais artigos da série através da categoria Mobile]</span></p>




<p>No artigo de hoje vamos conhecer alguns objetos para nos ajudar a criar a tela de nossos aplicativos para iOS. Para conhecer eles vamos usar o projeto que criamos nos artigos anteriores. É um projeto simples do tipo <em>Single View Application</em>, que ainda não tem nada demais, já que estamos apenas conhecendo algumas coisas. Então nada impede que você crie outro projeto do tipo <em>Single View Application</em>.</p>




<!--more-->




<p><strong>Interface Builder</strong></p>




<p>Como explicado no primeiro artigo, temos na estrutura que o XCode cria para nós arquivos do tipo StoryBoard. Como criamos nosso projeto com a opção <em>Universal</em> temos um StoryBoard para IPhone e outro para IPad, como mostra a imagem abaixo.<br/>
<span style="line-height: 1.6em;"><img class="size-full wp-image-633 alignleft" title="Estrutura do projeto" src="../../assets/uploads/2013/03/Imagem-1.png" alt="" width="296" height="115" /><br style="clear: both;" /></span><span style="line-height: 1.6em;">Ao clicar em um desses arquivos você visualiza o Interface Builder.</span></p>




<p>Vejamos por exemplo o arquivo <em>MainStoryboard_IPhone.storyboard</em>:<br/>
<span style="line-height: 1.6em;"><img class="alignnone size-large wp-image-634" title="Imagem 2" src="../../assets/uploads/2013/03/Imagem-2-1024x606.png" alt="" width="655" height="387" /></span><span style="line-height: 1.6em;">Uma pequena curiosidade aqui. As atuais versões do XCode trazem o Interface Builder acoplado ao XCode, tudo na mesma ferramenta. Em versões anteriores você tinha uma aplicação separada para isso, assim como o IPhone Simulator por exemplo. </span></p>




<p><span style="line-height: 1.6em;">Descrevendo rapidamente as janelas da imagem temos:</span></p>




<p>No canto esquerdo superior a Document Outline onde está aparecendo nossa<em>View Controller Scene</em>. É onde irá conter todos os elementos e objetos da nossa cena, da nossa tela.<br/>
<img class="size-full wp-image-631 alignleft" title="Imagem3" src="../../assets/uploads/2013/03/Imagem3.png" alt="" width="268" height="159" /><br style="clear: both;" /><br style="clear: both;" /></p>




<p>No canto direito superior é onde irão aparecer os utilitários. Nesses utilitários poderemos alterar tamanhos, identificadores, conexões com funções entre outros. Você pode navegar entre os botões para encontrar essas opções.<br/>
<img class="size-full wp-image-632 alignleft" title="Imagem4" src="../../assets/uploads/2013/03/Imagem4.png" alt="" width="241" height="198" /><br style="clear: both;" /><br style="clear: both;" /></p>




<p>Logo abaixo temos nossa Library de objetos, que é onde estão os objetos que vamos usar para montar nossas telas.<br/>
<span style="line-height: 1.6em;"><img class="size-full wp-image-629 alignleft" title="Imagem 5" src="../../assets/uploads/2013/03/Imagem-5.png" alt="" width="257" height="247" /><br style="clear: both;" /></span><span style="line-height: 1.6em;">Repare que temos uma caixa de busca logo no rodapé. Ela vai nos ajudar a encontrar mais rápido o que queremos sem que precisar ficar rolando e rolando com o mouse em busca de algo. Caso você navegue pelos botões que aparecem em cima, você irá para outras libraries que aparecem no XCode, mas não vamos usar nenhuma delas tão cedo então não se preocupe agora.</span></p>




<p>Resumindo então:</p>




<ul>
<li><span style="line-height: 1.6em;">Document outline: Mostra os objetos da nossa cena</span></li>
<li><span style="line-height: 1.6em;">Utilitários: Onde vamos alterar propiedades, características, identificadores, alinhamentos, etc…</span></li>
<li><span style="line-height: 1.6em;">Library de objects: Onde os objetos estão.</span></li>
</ul>




<p><div>
  <p>
    <strong>Primeiros Objetos</strong>
  </p></p>

<p>  <p>
    <span style="line-height: 1.6em;">Vamos agora conhecer 4 objetos básicos para montar nossas telas: Um botão, label, campo texto e um slider.<br /> </span><span style="line-height: 1.6em;">Esses são os objetos que mais devem surgir em seus projetos, mas claro que isso pode variar de projeto para projeto.</span><span style="line-height: 1.6em;"> </span>
  </p></p>

<p>  <p>
    <strong>Botão</strong>
  </p></p>

<p>  <p>
    <span style="line-height: 1.6em;">No campo de busca da library de objetos digite </span><em style="line-height: 1.6em;">Round Rec Button</em><span style="line-height: 1.6em;">. Ao começar a digitar você já vai ver o objeto surgir para você. Clique em cima dele e arraste para a sua tela. Posicione como preferir.</span>
  </p></p>

<p>  <p>
    Você pode trabalhar o alinhamento, largura e altura diretamente com o objeto, mas se preferir pode fazer isso também pelas janelas de utilitários. O mesmo para alterar o label do botão, você pode dar um duplo clique em cima dele ou alterar pelos utilitários. Experimente essas e algumas outras opções na janela de utilitários chamada <em>Attributes Inspector</em>.
  </p></p>

<p>  <p>
    <strong>Label</strong>
  </p></p>

<p>  <p>
    Devolta ao campo de busca da library de objetos, dessa vez vamos buscar por label. A label é uma simples etiqueta, um texto para nos indicar alguma coisa. Da mesma maneira que o botão você pode alterar algumas de suas características diretamente sobre o elemento, ou fazer isso pelas janelas utilitárias.  Tente por exemplo alterar a cor da fonte para vermelho.
  </p></p>

<p>  <p>
    Repare que ao mover diretamente os objetos pelo nosso protótipo de tela, algumas linhas quase que como réguas aparecem para te ajudar no alinhamento dos seus objetos. Use disso para manter tudo alinhado e bem distribuído.
  </p></p>

<p>  <p>
    <strong>Campo de texto</strong>
  </p></p>

<p>  <p>
    Para adicionar um campo de texto vamos devolta ao campo de busca da library de objetos, e digite Text Field. Nesse objeto o usuário poderá entrar com um texto. É aquele famoso objeto que quando ativo exibe um teclado na tela. Logo, além de todas as opções dos objetos anteriores, como cor da fonte, alinhamento, tamanho, você pode selecionar qual o tipo de teclado que o usuário irá ter disponível.
  </p></p>

<p>  <p>
    Outra opção ainda é setar um placeholder no campo de texto e tentar com isso economizar um label para explicar do que se trata aquele campo.
  </p></p>

<p>  <p>
    <strong>Slider</strong>
  </p></p>

<p>  <p>
    Um slider pode servir como marcador de alguma coisa, um projeto onde por exemplo o usuário deve entrar sua altura ou seu peso pode ser melhor apresentado com um slide. Na caixa de busca da library procure por <em>slider</em>.
  </p></p>

<p>  <p>
    Um detalhe é que o slider não traz um indicador de em que ponto ele está, como por exemplo 50% ou 100%. Então uma boa ideia é colocar junto do Slide uma Label para indicar esse valor.
  </p></p>

<p>  <p>
    <strong>Exercício</strong>
  </p></p>

<p>  <p>
    Com o objetos que aprendemos acima, você deve ser capaz de montar uma tela como essa:<br /> <img class="alignnone size-medium wp-image-630" title="Imagem6" src="../../assets/uploads/2013/03/Imagem6-152x300.png" alt="" width="152" height="300" />
  </p></p>

<p>  <p>
    <strong>Difícil? Vou te ajudar</strong>
  </p></p>

<p>  <p>
    Esses são os 4 objetos que temos para hoje. Achou complicado de entender? Não te culpo já que é um tema totalmente visual. Por isso estou anexando a esse artigo o vídeo abaixo que segue os passos executados no texto. Com a leitura e o visual da coisa você deve entender tudo sem problemas.<br />
  </p></p>

<p>  <p>
    <br style="clear: both;" />Mas, caso ainda tenha dúvidas é só mandar. Grande Abraço!
  </p></p>

<p>  <iframe src="https://player.vimeo.com/video/61175405" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
<p><a href="https://vimeo.com/61175405">Montando a tela do seu aplicativo - Parte 1</a> from <a href="https://vimeo.com/user9814221">Fl&aacute;vio Silveira</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C: A Linguagem Por Trás Do iOS – Parte 1]]></title>
    <link href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/"/>
    <updated>2013-02-21T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1</id>
    <content type="html"><![CDATA[<p>Fala pessoal!</p>




<p>Este é segundo artigo, que faz parte da série sobre desenvolvimento para iOS que estou fazendo. Se você perdeu o primeiro post siga esse link <a href="http://flaviosilveira.com/2013/comece-a-programar-para-ios/">http://flaviosilveira.com/2013/comece-a-programar-para-ios/</a> para acompanhar nossos passos desde o início.<span style="line-height: 1.6em;"> </span></p>




<p>Em nosso primeiro post criamos um projeto simples e entendemos a sua estrutura de pastas. Partindo desse ponto, vamos hoje conhecer um pouco da linguagem que vamos usar para desenvolver para iOS. É! XCode não é só arrastar e soltar, tem que codificar. E para isso usamos a linguagem Objective-C.</p>




<!--more-->




<p><strong>Rápida História</strong></p>




<p>Você deve achar que o Objective-C não é tão antigo, já que não faz tanto tempo que temos pessoas com IPhones desfilando por aí não é mesmo? Mas não, o Objective-C está na área desde o início dos anos 80 e foi idealizado e criado pelo PHD em Matemática biológica Brad Cox e pelo (também) PHD em Ciência cognitiva Tom Love.</p>




<p>Como com esses títulos eles caíram na programação eu não sei, mas outros detalhes da história deles, de como eles estavam preocupados com a falta de reutilização de código em cima do Smaltalk dentro da ITT e de como eles começaram a criação de um processador em C para resolver esses problemas, você pode encontrar dando aquela rápida pesquisada no Google. Se você está com seu listening de inglês em dia você pode conferir o próprio Tom Love falando sobre o assunto nesse vídeo no Youtube <a href="http://youtu.be/adI6-liGXqE">http://youtu.be/adI6-liGXqE</a> (Há outros vídeos e keynotes de Tom que você pode encontrar no youtube).</p>




<p>No vídeo, Love também comenta sobre como o Objective-C sobreviveu através dos anos até ele ser popularizado pela NeXT, empresa de Steve Jobs. A NeXT extendeu o GCC para compilar Objective-C e também criou as primeiras ferramentas de desenvolvimento para ele que vão evoluindo até chegar no XCode que temos em mãos hoje.</p>




<p>E aproveitando que comentei sobre o XCode, vale dizer que visto que o Objective-C é uma linguagem que já vem de algum tempo, você encontra vários compiladores para ela de modo que consiga estudar ela em separado. Mas como aqui vamos focar em IPhones, IPads e em ambiente Apple, nada melhor que o XCode na hora de te ajudar a desenvolver para esses fins.<span style="line-height: 1.6em;"> </span></p>




<p><strong>C</strong></p>




<p>Tom Love comenta que apesar de tudo que eles desenvolveram, o C continua lá sem nenhuma alteração. E é verdade. Os tipos prímarios de dados em cima de Objective-C são exatamente os mesmos que no C puro. Para experimentar isso abra em seu projeto o arquivo <em>ViewController.m</em> e procure pelo método <em>viewDidLoad</em> (view carregada), dentro dele você pode experimentar alguns tipos de dados no melhor estilo C.</p>




<p>Os principais tipos de dados em C são <em>char</em>, <em>int</em>, <em>float</em>, <em>double</em> e <em>bool</em>. Para definir eles usamos a seguinte sintaxe:</p>




<pre class="brush: cpp; title: ; notranslate" title="">tipo nome_da_variavel;
tipo nome_da_segunda_variavel = valor_da_variavel;
</pre>




<p>Repare que no primeiro exemplo de sintaxe apenas iniciamos a variável, sem nenhum valor inicial. Já no segundo exemplo, aproveitamos e já definimos um valor para ela. Vejamos alguns exemplos abaixo:</p>




<pre class="brush: cpp; title: ; notranslate" title="">// Char
char caracter;
char letra = 'a';
char nome[7] = 'Flavio;

// Int
int idade;
int ano = 2013;

// Float
float peso = 81.30;

// Double
// que tal você pesquisar a diferença do float para o double?
double pi = 3.1415926535;

// Bool --de booleano
bool aceite = TRUE;
</pre>




<p>Certo, certo. Estamos aqui definindo variáveis. Mas que coisa sem graça. Vamos colocar um pouquinho mais de diversão nisso?</p>




<p><span style="line-height: 1.6em;">No XCode vamos abrir nosso console e exibir nossas animadas variáveis. Para exibir o console você pode ir até o menu </span><em style="line-height: 1.6em;">View >> Debug Area >> Active Console</em><span style="line-height: 1.6em;"> ou em </span><em style="line-height: 1.6em;">View >> Debug Area >> Show Debug Area. </em><span style="line-height: 1.6em;">Outra opção é clicar em um pequeno botão no rodapé do XCode que contém uma seta apontando para cima como mostra a figura abaixo:<br /> <a href="../../assets/uploads/2013/02/Imagem-1.png"><img class="alignnone size-full wp-image-617" title="Imagem 1" src="../../assets/uploads/2013/02/Imagem-1.png" alt="" width="174" height="52" /></a></p>


<p></p></p>

<p>
  </span>
</p>




<p>
  Seu console deve parecer como na imagem abaixo:<br /> <a href="../../assets/uploads/2013/02/Imagem-2.png"><img class="alignnone size-large wp-image-618" title="Imagem 2" src="../../assets/uploads/2013/02/Imagem-2-1024x102.png" alt="" width="655" height="65" /></a>
</p>




<p>
  Console ativado, é hora de exibir as variáveis. Qual a função que exibi variávies no C? A mais conhecida que você já deve ter visto por aí é o printf. Fazendo um teste com o array de char que definimos acima temos o seguinte código:
</p>




<pre class="brush: cpp; title: ; notranslate" title="">

- (void)viewDidLoad
{
[super viewDidLoad];

// Do any additional setup after loading the view, typically from a nib.

// Char
char nome[7] = "Flavio";

printf("Nome: %s", nome);
}
</pre>




<p>
  </span><span style="line-height: 1.6em;">Compile o seu projeto para ver a variavel sair no output. (Caso não lembre como compilar o projeto, dê uma olhada no final do primeiro post da série </span><a style="line-height: 1.6em;" href="http://flaviosilveira.com/2013/comece-a-programar-para-ios/">http://flaviosilveira.com/2013/comece-a-programar-para-ios/</a><span style="line-height: 1.6em;"> ).<br /> </span>
</p>




<p>
  Repare bem na sintaxe do printf. No primeiro parâmetro da função colocamos a string mais um identificador <em>%s</em>. Esse identificador será substituído pelo segundo parâmetro da função, no caso aqui nossa variável nome. Esse <em>s</em> em nosso identificador é um indicador para o tipo da nossa variável, no caso aqui String. Para imprimir um inteiro utilize o identificador <em>%d</em>, onde <em>d</em> se refere a decimal:
</p>




<pre class="brush: cpp; title: ; notranslate" title="">
- (void)viewDidLoad
{
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

// Char
int ano = 2013;

printf("Ano: %d", ano);
}
</pre>




<p>
  </span><span style="line-height: 1.6em;">Sim, sim. É verdade que </span><em style="line-height: 1.6em;">%i</em><span style="line-height: 1.6em;"> tambem funciona para inteiros, mas em materiais por aí é mais comum ver o </span><em style="line-height: 1.6em;">%d</em><span style="line-height: 1.6em;">.</span>
</p>




<p>
  Continue seus testes com floats e doubles. Use o Identificador <em>%f </em>para esses dois tipos. Se quiser formatar seu numero utilize %.3f, onde 3 é o numero de casas decimais que você quer. <em>%lf </em>ou <em>%g</em> também servem para esses tipos.
</p>




<p>
  <strong>Lição de casa</strong>
</p>




<p>
  O que? Quer só ler o artigo com os códigos prontos e sair mandando ver? Aqui não! Para aprender tem que ir começando a se virar sozinho certo?
</p>




<p>
  A primeira lição que deixo é a de imprimir uma variável do tipo boleana usando o printf. Fácil não? Só dar aquela googada aí ou pegar aquela Barsa da estante.
</p>




<p>
  Para aqueles que já tem uma noções de lógica, que tal experimentar alguns IFS, ELSES, WHILE, CASE, DO…WHILE, FOR ??
</p>




<p>
  Para os demais, é isso que veremos no próximo post.
</p>




<p>
  Grande Abraço!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comece a Programar Para iOS]]></title>
    <link href="http://flaviosilveira.com/2013/comece-a-programar-para-ios/"/>
    <updated>2013-02-14T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/comece-a-programar-para-ios</id>
    <content type="html"><![CDATA[<p><strong style="line-height: 1.6em;">Sem blá blá blá</strong></p>




<p><span style="line-height: 1.6em;">Sem muito blá blá blá, quero hoje começar uma pequena série sobre desenvolvimento para iOS. </span><span style="line-height: 1.6em;">Quero ajudar quem deseja conhecer a tecnologia sem a enrolação que vejo em outros materiais sobre o assunto. </span><span style="line-height: 1.6em;">Paralelo a isso também consigo me manter estudando o assunto e evoluindo junto com quem acompanha os artigos.</span><span style="line-height: 1.6em;"> </span></p>




<p>Vou pular toda aquela parte que você já deve ter lido por aí sobre precisar de um Mac, que há outras maneiras de você conseguir instalar o sistema da Apple em um PC Intel comum, que vamos usar o XCode porque ele facilita nossa vida, instalação do XCode, as camadas de desenvolvimento do iOS, etc, etc. Mas é claro, caso venha a necessidade podemos segurar e detalhar um pouco mais o que surgir.</p>




<!--more-->




<p><strong>Criando seu primeiro projeto no XCode</strong></p>




<p>Vamos começar com tudo, direto para a prática. Para isso abra o XCode e crie um novo projeto. <span style="line-height: 1.6em;">Vamos criar um projeto do tipo Single view Application, ele já vai nos trazer uma tela inicial e um controller para trabalharmos. </span><span style="line-height: 1.6em;">Na janela seguinte dê um nome qualquer para seu projeto e no último passo selecione uma pasta para ele.<br /> </span><span style="line-height: 1.6em;">Acompanhe pelas imagens abaixo:</span></p>




<p><a href="../../assets/uploads/2013/02/imagem1.png"><img class="alignnone size-medium wp-image-604" title="imagem1" src="../../assets/uploads/2013/02/imagem1-300x200.png" alt="" width="300" height="200" /></a>                 <a style="line-height: 1.6em;" href="../../assets/uploads/2013/02/imagem2.png"><img class="alignnone size-medium wp-image-606" title="imagem2" src="../../assets/uploads/2013/02/imagem2-300x234.png" alt="" width="300" height="234" /></a>            <a style="line-height: 1.6em;" href="../../assets/uploads/2013/02/imagem3.png"><img class="alignnone size-medium wp-image-605" title="imagem3" src="../../assets/uploads/2013/02/imagem3-286x300.png" alt="" width="286" height="300" /></a><span style="line-height: 1.6em;">Repare que não mudamos nada do que já veio selecionado. Estamos usando tudo como já vem configurado.</span><span style="line-height: 1.6em;"> </span></p>




<p>Dê uma atenção especial no segundo passo, na opção Devices, onde ficou selecionado <em>Universal</em>, o que significa que estamos desenvolvendo tanto para IPhone quanto para IPad. Teríamos a opção nesse passo de selecionar ou um ou outro se quisessémos.</p>




<p><strong><br/>
Estrutura do seu projeto</strong></p>




<p>Certo, vamos dar uma analisada no que o XCode criou para a gente aqui.<br/>
<span style="line-height: 1.6em;">No canto esquerdo superior temos o painel project navigator como na imagem abaixo.<br /> </span><span style="line-height: 1.6em;">Se por qualquer motivo você não estiver visualizando ele, basta ir em <em>View >> Navigators >> Show Project Navigator</em>.</span></p>




<p><span style="line-height: 1.6em;"><a href="../../assets/uploads/2013/02/imagem-4.png"><img class="alignnone size-full wp-image-607" title="imagem 4" src="../../assets/uploads/2013/02/imagem-4.png" alt="" width="257" height="241" /></a> </span></p>




<p>Vamos ver primeiro a pasta que leva o nome do seu projeto.<br/>
<span style="line-height: 1.6em;">Repare que vamos ter extensões de arquivo .h e .m.<br /> </span><span style="line-height: 1.6em;">Nos arquivos .h temos assinaturas e características e no .m vamos ter as implementações dos métodos. (Se você não entendeu muito bem isso agora não se preocupe, mas lembre-se disso).</span><span style="line-height: 1.6em;"> </span></p>




<p>O AppDelegate recebe notificações do sistema operacional iOS.<br/>
<span style="line-height: 1.6em;">Informações como se seu aplicativo terminou de carregar ou se o usuário fechar seu aplicativo caem nesse arquivo.</span><span style="line-height: 1.6em;"> </span></p>




<p>O StoryBoard, é a interface gráfica do seu aplicativo.<br/>
<span style="line-height: 1.6em;">Lembra da opção </span><em style="line-height: 1.6em;">Universal</em><span style="line-height: 1.6em;"> quando criamos o projeto?<br /> </span><span style="line-height: 1.6em;">Por termos optado por </span><em style="line-height: 1.6em;">universal</em><span style="line-height: 1.6em;"> o XCode preparou para a gente um storyBoard para IPhone e outro para IPad.</span></p>




<p>No ViewController é onde entraremos com código para fazer as interações com nossa interface gráfica.<br/>
<span style="line-height: 1.6em;">Na Pasta Support Files temos alguns arquivos gerais do seu aplicativo, com ícones, imagens e também arquivos com informações do app.</span><span style="line-height: 1.6em;"> </span></p>




<p>Em seguida você vê a pasta para os testes, dentro dela arquivos que devem ser usados para os testes unitários.<span style="line-height: 1.6em;"> </span></p>




<p>A pasta frameworks serve para armazenar todas as bibliotecas usadas no seu projeto. Você pode expandir ela e reparar que o XCode já adicionou algumas bibliotecas para a gente usar aqui.</p>




<p>E finalmente a pasta products, que vai conter nosso produto final.<br/>
<span style="line-height: 1.6em;">Se você pretende colocar seu aplicativo na Apple Store, é daqui que as coisas vão sair.</span><span style="line-height: 1.6em;"> </span></p>




<p><strong><br/>
Compilando seu projeto</strong></p>




<p>É hora de colocar o seu projeto em ação. Para isso vamos compilar ele.</p>




<p><span style="line-height: 1.6em;">Antes de tudo você deve escolher em qual tipo de device quer ver seu aplicativo.<br /> </span><span style="line-height: 1.6em;">No canto superior esquerdo do XCode você pode selecionar entre o simulador do IPad (que vem por padrão selecionado) ou o simulador do IPhone, como mostrado na imagem.</span></p>




<p><a href="../../assets/uploads/2013/02/imagem5.png"><img class="alignnone size-medium wp-image-608" title="imagem5" src="../../assets/uploads/2013/02/imagem5-300x57.png" alt="" width="300" height="57" /></a><span style="line-height: 1.6em;"> </span></p>




<p>Feito isso, clique no botão Run, o primeiro botão no canto esquerdo do XCode, ou pressione <em>CMD + R</em>. <span style="line-height: 1.6em;">O resultado deve ser como da imagem abaixo.<br /> <a href="../../assets/uploads/2013/02/imagem6.png"><img class="alignnone size-medium wp-image-611" title="imagem6" src="../../assets/uploads/2013/02/imagem6-151x300.png" alt="" width="151" height="300" /></a> </span></p>




<p>Como não escrevemos nenhum código e ainda não colocamos nada em nosso storyboard, temos essa tela em branco.<br/>
<span style="line-height: 1.6em;">Vamos descobrir como mudar isso no próximo post.</span><span style="line-height: 1.6em;"> </span></p>




<p>Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redirecionando Usuários Do IPhone Para a Versão Mobile Do Seu Site – JavaScript]]></title>
    <link href="http://flaviosilveira.com/2009/redirecionando-para-versao-mobile/"/>
    <updated>2009-07-19T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2009/redirecionando-para-versao-mobile</id>
    <content type="html"><![CDATA[<div id="atencao">
  Atenção! O post abaixo foi escrito em uma época onde o desenvolvimento de sites mobile estava começando e as técnicas para se fazer isso ainda eram muito poucas. Embora a solução abaixo possa funcionar para alguns casos específicos, recomendo que você pesquise outras formas de trazer seu site para o mundo mobile, como Css-Query e outros.
</div>




<p>As pessoas que me acompanham sabem que há pouco mais de um mês adquiri um IPhone.<br/>
A minha operadora me ligou oferecendo alguns pontos que valiam desconto na aquisição do aparelho. Não perdi tempo e corri lá buscar.</p>




<p>Desde então as minhas leituras diárias começaram a se voltar mais para IPhone.<br/>
Desenvolvimento de aplicativos, desenvolvimento de sites, &#8216;manhas&#8217; para usar o aparelho, dicas para economizar bateria, e por ai vai.</p>




<p>O que trago hoje aqui faz parte dos meus estudos para criação de sites para o público que usa IPhone, que é, identificar que seu visitante está usando o aparelho e redirecioná-lo para a versão mobile do seu site.</p>




<p>A ideia é bem simples, e, para colocar ela em prática usamos JavaScript.</p>




<p>Primeiro crie um arquivo HTML e o prepare para receber um javaScript dentro das tags do cabeçalho.</p>




<pre class="brush: xml; title: ; notranslate" title="">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;::: Teste IPhone :::&lt;/title&gt;
&lt;script type='text/javascript'&gt;
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;

</pre>




<!--more-->




<p>Deixei apenas o necessário para o HTML funcionar acima.<br/>
Coloquei um título para constar, e abri as tags de script onde vai entrar o nosso JavaScript.</p>




<p>Em JavaScript temos um objeto que traz propiedades e métodos do nosso navegador, que é o <strong>navigator</strong>.<br/>
Você pode vê-lo em ação adicionando o seguinte código dentro das tags script:</p>




<pre class="brush: jscript; title: ; notranslate" title="">alert(navigator);
</pre>




<p>Esse objeto tem propiedades que nos trazem dados como o nome do browser, sua versão, dizer se os cookies estão habilitados e outros.</p>




<p>A propiedade que vamos usar é a <em>userAgent</em>, que traz um conjunto de informações do browser e do dispositivo que está acessando, que é o que precisamos.</p>




<pre class="brush: jscript; title: ; notranslate" title="">alert(navigator.userAgent);
</pre>




<p>Veja o resultado do código acima ao acessarmos a página. Repare nas informações retornadas:<br/>
<strong>No Firefox do Linux:</strong><br/>
<img class="alignnone size-full wp-image-103" title="linux-firefox" src="../../assets/uploads/2009/07/screenshot.png" alt="linux-firefox" width="628" height="313" /><br  style='clear:both;' /><br/>
<strong>No Safari do Mac:</strong><br/>
<img class="alignnone size-full wp-image-104" title="safari-mac" src="../../assets/uploads/2009/07/picture-2.png" alt="safari-mac" width="514" height="222" /><br  style='clear:both;' /><br/>
<strong>No Simulador do IPhone:</strong><br/>
<img class="alignnone size-full wp-image-105" title="simulador" src="../../assets/uploads/2009/07/picture-3.png" alt="simulador" width="299" height="586" /><br  style='clear:both;' /><br/>
<strong>No própio IPhone:<br/>
<img class="alignnone size-full wp-image-106" title="iphone" src="../../assets/uploads/2009/07/img_0095.png" alt="iphone" width="298" height="447" /></strong><br  style='clear:both;' /></p>




<p>Reparou que quando estamos lidando com o Iphone, essa informação aparece para a gente na propiedade do objeto ?<br/>
Caso estivessemos no IPod Touch, apareceria <em>IPod</em> ao invés de <em>IPhone</em> nas informações.</p>




<p>Agora basta fazer uma verificação para ver se a palavra Iphone ou Ipod está presente nas informações, e, se estiver, redirecionar para sua versão mobile.<br/>
Veja o código:</p>




<pre class="brush: jscript; title: ; notranslate" title="">if ((navigator.userAgent.indexOf('iPhone') != -1) || (navigator.userAgent.indexOf('iPod') != -1))
{
alert('IPhone!!!');
//Essa linha redireciona você para o endereço que você colocar
document.location = "http://www.flaviosilveira.com";
}
</pre>




<p>Qualquer dúvida estamos aí&#8230;Abraços!!!</p>

]]></content>
  </entry>
  
</feed>
