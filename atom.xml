<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Flávio Silveira]]></title>
  <link href="http://flaviosilveira.com/atom.xml" rel="self"/>
  <link href="http://flaviosilveira.com/"/>
  <updated>2017-02-06T01:30:00+00:00</updated>
  <id>http://flaviosilveira.com/</id>
  <author>
    <name><![CDATA[Flávio Silveira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[4 Drops of Life - Four]]></title>
    <link href="http://flaviosilveira.com/2017/4-drops-of-life-4/"/>
    <updated>2017-02-06T08:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2017/4-drops-of-life-4</id>
    <content type="html"><![CDATA[<p>No 4 Drops of life de hoje trago uma sugestão para aumentar seu hábito de leitura, um aplicativo, maneiras de se desafiar e a história de uma amiga com uma pele perfeita.</p>

<p>Para quem não conhece minha série 4 Drops of Life, visite <a href="http://flaviosilveira.com/blog/categories/vida/">http://flaviosilveira.com/blog/categories/vida/</a> e os artigos com 4 pequenas dicas para você inserir na sua vida e viver melhor.</p>

<h3>Kindle</h3>

<p>Gosto de ler, mas sim, não é um hábito fácil. Seriados e filmes são muito atrativos para mim que sou bastante visual, estou desenhando e rabiscando o tempo todo. Já tentei Audio Books, mas não consegui. Para ouvir, gosto dos podcasts. A leitura sempre no mesmo ritmo dos áudio livros me deixa sonolento.</p>

<p>Em busca de algo diferente resolvi experimentar o Kindle da Amazon, e deu muito certo.</p>

<!--more-->


<p>Comprar um livro online e estar lendo ele menos de um minuto depois é maravilhoso. Dá para ler em qualquer lugar, inclusive no escuro! A versão do kindle que adquiri vem com luzes bem suaves que não vão agredir os olhos. Chato ler aqueles PDFs no seu computador? Mande eles para o seu kindle atráves de um email que você pode criar. É muito fácil!</p>

<p>Como no Kindle você pode aumentar a fonte, diminuir, ler na vertical ou na horizontal, ele não conta as páginas. Invés disso ele vai te mostrar a localização de acordo com o número de palavras ou ainda uma porcentagem de quanto falta para acabar um capítulo ou o livro todo. Esse número fica como te desafiando e você quer ver logo aquela porcentagem chegar a 100%.</p>

<p>O preço de muitos livros é mais barato, mas isso não é regra, não venha para esse mundo se pensa em economizar com os exemplares. E o kindle em si? Caro? Talvez, mas pode ser a saída para aumentar seu hábito de leitura. Recomendadíssimo!</p>

<h3>Evernote</h3>

<p>Não conhece ainda o Evernote <a href="https://evernote.com">https://evernote.com</a>?</p>

<p>Com versões para todos os sistemas Mobiles, aplicativos para seu computador e ainda a versão online, o Evernote te ajuda a ter suas notas a mão em qualquer lugar.</p>

<p>Pessoalmente uso ele para fazer minhas anotações de estudo, de leitura, de filmes, de frases e também para algumas senhas e coisas desse sentido que volta e meia preciso. É uma solução muito versátil, o que me fez dar outros usos no passado e que pode te dar ideias para  o que você precisa também.</p>

<p>Te permite compartilhar suas notas com quem quiser, categorizar, e etc. A versão grátis me supri muito bem e deve servir para você também. Faça o teste.</p>

<h3>30 Days Challenge</h3>

<p>Navegando pela internet encontrei o que chamam de <em>30 days challenge</em>. São 30 dias onde você se propõe a fazer um ponto da sua vida diferente, a ter um compromisso com você.</p>

<p>Em busca de literatura a respeito vi que essa nova moda pode ter surgido de Morgan Spurlock, sim! Aquele cara do Super Size Me. Ele não passou só 30 dias comendo MacDonalds, ele fez outros vários experimentos nessa linha.</p>

<p>Nas primeiras pesquisas você vê muita coisa relacionada a exercício e malhação, mas depois vi que há de tudo. Nas lojas de aplicativos você encontra aplicativos que te ajudam a completar os 30 dias de desafio nas mais diferentes categorias. Alimentação, Leitura, Idiomas, Economia, Não assistir TV, não falar palavrão, etc..</p>

<p>Aqui uma lista do Thought Brick (em inglês) com 100 ideias <a href="http://thoughtbrick.com/lifestyle/hundred-30-day-challenge-ideas/">http://thoughtbrick.com/lifestyle/hundred-30-day-challenge-ideas/</a> para te ajudar a escolher alguam coisa. Assista ao TED que está no artigo, tem legenda em português para quem quiser.</p>

<p>Escolha um desafio e tente, seus 30 dias serão mais proveitosos e passarão mais devagar. Faça e veja os resultados!</p>

<h3>Protetor solar todos os dias</h3>

<p>Tenho uma amiga do Rio de Janeiro, cidade quente, sol forte, e que tem a pele linda, branca, sem nenhuma marca do sol, sem ressecamento, nada!</p>

<p>Uma vez perguntei para ela o segredo disso, visto que minha pele é um caco, com marcas no rosto e tudo mais. A resposta dela: Filtro solar todo dia!</p>

<p>Ela me disse: -Flávio, mesmo que esteja nublado, eu não deixo de passar o filtro solar. Ou o sol vai sair e me pegar ou ainda alguns raios dele vão passar por essa neblina e causar algum dano. Filtro solar todo dia!</p>

<p>Para mim isso faz ainda mais sentido uma vez que não tenho mais os cabelos. Passo filtro solar sempre antes de sair de casa pela manhã. Compre um fator 60 e faça o teste, aquelas marcas na sua pele vão começar a sumir.</p>

<p>Essas foram as dicas de hoje. Que elas alcançem você em um bom dia. Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando Seu Container NGinx + PHP (Parte 2)]]></title>
    <link href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-2/"/>
    <updated>2017-01-14T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2017/criando-seu-container-nginx-php-2</id>
    <content type="html"><![CDATA[<p>No final da <a href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-1">parte 1 desse artigo</a>, onde montamos um container com Debian, NGinx e PHP, nos deparamos com o seguinte: Se pararmos nosso container e precisar novamente de NGinx + PHP, teremos que partir do zero.</p>

<p>Para evitar isso, vamos criar nossa própria imagem, uma imagem que vai guardar o que fizemos até agora.</p>

<!--more-->


<h3>Saia do container</h3>

<p>Primeiro vamos sair de nosso container com <strong><em>ctrl+p</em></strong> e em seguida <strong><em>ctrl+q</em></strong>.<br/><strong><em>Dica:</em></strong> Não precisa soltar o ctrl.</p>

<h3>Conta no DockerHub</h3>

<p>Vá até o DockerHub <a href="https://hub.docker.com/">https://hub.docker.com</a> e crie sua conta.</p>

<p>Após isso volte para o terminal e faço o comando de login</p>

<pre><code>docker login
</code></pre>

<p>Irá pedir seu usuário e senha e feito!</p>

<h3>Criando Imagem</h3>

<p>Para criar sua imagem, você vai precisar do <strong><em>ID</em></strong> do seu container, use <strong><em>docker ps</em></strong> para consultar. A primeira coluna vai te mostrar seu <strong><em>CONTAINER ID</em></strong>.</p>

<p>Em seguida, execute o commit com o comando abaixo:</p>

<pre><code>docker commit id-do-seu-container flaviosilveira/php-nginx
</code></pre>

<p>Substitua no comando acima <strong><em>id-do-seu-container</em></strong> pelo id mostrado em <strong><em>docker ps</em></strong>.</p>

<p>Fora o id, colocamos o nome que desejamos para nossa imagem. Escolhi php-nginx.</p>

<p>Repare que coloquei meu nome de usuário do DockerHub na frente do nome que quero para a imagem. Isso será necessário na hora do envio para o DockerHub.</p>

<p>O comando vai te retornar um hash SHA-256.</p>

<p>Confira sua imagem criada</p>

<pre><code>docker images
</code></pre>

<p>Sua imagem deve estar no topo dessa lista.</p>

<h3>Usando sua imagem localmente</h3>

<p>Uma vez que vemos a imagem no comando <strong><em>docker images</em></strong>, você já pode usar ela localmente.
<strong><em>ATENÇÃO:</em></strong> Altere o meu nome de usuário abaixo pelo seu.</p>

<pre><code>docker run --name usando-imagem -itd -p 8080:80 flaviosilveira/php-nginx
</code></pre>

<p>Pontos de atenção:</p>

<ul>
<li>Como nossa imagem é baseada na do Debian, rodamos ela de maneira igual. Compare o comando run executado aqui com o da parte 1 desse artigo.</li>
<li>Coloquei a porta 8080 do nosso host para apontar para a 80 do container (-p 8080:80), para não conflitar com a porta 80 do outro container (-p 80:80).</li>
</ul>


<p>Outra coisa. O serviço do NGinx e do PHP5-FPM estão parados!</p>

<p>Você precisa iniciar eles para ver as coisas funcionando.</p>

<pre><code>docker exec minha-imagem service nginx start
docker exec minha-imagem service php5-fpm start
</code></pre>

<p>Agora confira o resultado em <strong><em>localhost:8080</em></strong>.</p>

<h3>Enviando sua imagem para o DockerHub</h3>

<p>Já vimos em outros artigos o comando <strong><em>docker pull</em></strong> que serve para fazermos download de imagens para nossa máquina. Por padrão ele busca imagens do DockerHub, repositório padrão do docker.</p>

<p>Agora para enviarmos imagens para ele, temos o <strong><em>push</em></strong></p>

<pre><code>docker push flaviosilveira/php-nginx
</code></pre>

<h3>Testando</h3>

<p>Antes de testar, vamos eliminar tudo que temos localmente. Parar o container e remover a imagem.</p>

<pre><code>docker stop usando-imagem
docker rm usando-imagem
docker rmi flaviosilveira/php-nginx
</code></pre>

<p>Agora basta tentar executar o mesmo run que fizemos acima.</p>

<pre><code>docker run --name usando-dockerhub -itd -p 8080:80 flaviosilveira/php-nginx
</code></pre>

<p>A imagem não será encontrada localmente e será feito download dela diretamente do docker hub.</p>

<p>Veja seu container rodando</p>

<pre><code>docker ps
</code></pre>

<p>Ou dê start no NGinx e no PHP-FOM e acesse no seu navegador na porta 8080 como colocamos acima.</p>

<h3>Compartilhando seus arquivos php com o container</h3>

<p>Para compartilhar seus arquivos locais de PHP com o container, use o parâmetro de volume, como fizemos no artigo de <a href="http://flaviosilveira.com/2016/docker-php7-e-php-built-in/">docker com PHP Built in</a>.</p>

<pre><code>docker run --name usando-dockerhub -itd -p 8080:80 -v ~/dev/php:/var/www/app flaviosilveira/php-nginx
</code></pre>

<p>No parâmetro -v, você coloca o caminho da sua pasta local e separado por : (dois pontos) temos a pasta root que definimos no nosso NGinx.</p>

<p>Acesse o navegador para constatar.</p>

<h3>Resumo e Próximos passos?</h3>

<p>Nesse artigo dividido em duas partes fizemos bastante coisa:
<br/>Usamos uma imagem debian, instalamos NGinx e PHP de fora do container com <strong><em>exec</em></strong> e depois entramos nele para configurar as coisas.</p>

<p>Criamos um login no dockerHub, criamos uma imagem nossa e agora ela está disponível para quem precisar.</p>

<p>Mas a maneira como fizemos não deixa claro de que imagem partimos ou ainda caso a gente desista de usar Debian e queira usar CentOS, você vai ter que novamente partir do zero dessa maneira que fizemos.</p>

<p>Nossos próximos passos são aprender um pouco sobre tags e criar nossa imagem usando DockerFile, que também vai nos ajudar a parar com a chatisse de ter que iniciar o php e o NGinx manualmente.</p>

<p>Vamos para um post sobre isso?</p>

<p>Até lá! Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criando Seu Container NGinx + PHP (Parte 1)]]></title>
    <link href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-1/"/>
    <updated>2017-01-14T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2017/criando-seu-container-nginx-php-1</id>
    <content type="html"><![CDATA[<p>Fala pessoal!<br/>Esse já é nosso terceiro artigo sobre docker:</p>

<ul>
<li>Já vimos como podemos iniciar com o Docker no artigo <a href="http://flaviosilveira.com/2016/comece-com-docker/">http://flaviosilveira.com/2016/comece-com-docker</a>.</li>
<li>Em seguida vimos como iniciar um Container com PHP 7 e usar seu servidor embutido (built in) em <a href="http://flaviosilveira.com/2016/docker-php7-e-php-built-in/">http://flaviosilveira.com/2016/docker-php7-e-php-built-in</a>.</li>
</ul>


<p>Com isso já conseguimos trabalhar com o PHP, mas o servidor Built-in não é a maneira ideal para isso. Como podemos colocar o PHP como um todo rodando em um container Docker para a gente? Vamos responder a isso.</p>

<p>Para quem não leu os primeiros dois artigos citados acima, recomendo. Acredito que vá ficar melhor de entender o que vem abaixo. Temos bastante <em>tecnês</em>.</p>

<!--more-->


<h3>Sim, tem pronto por aí!</h3>

<p>Nos artigos anteriores falamos sobre o DockerHub, repositório oficial de imagens para criarmos nossos containers. Estamos buscando um container que tenha para a gente um PHP e um NGinx, e claro que tem várias imagens prontas disso por aí.</p>

<p>Inclusive a que criamos nesse tutorial <a href="https://hub.docker.com/r/flaviosilveira/php-nginx/">https://hub.docker.com/r/flaviosilveira/php-nginx</a>.</p>

<p>Mas, para aprendermos algo novo, vamos construir nosso próprio container e com ele criar nossa imagem. Se você entendeu o conceito de containers e o que ele pode te trazer, pare e pense as maneiras que você teria para fazer isso.</p>

<p>Conseguiu pensar em algumas?</p>

<h3>Nossa maneira</h3>

<p>Que tal partirmos de um sistema operacional? Vamos de Debian. Acredito que é o meio caminho entre o que muitos conhecem, que é o Ubuntu, e legal para sair um pouco do mesmo.</p>

<p>Todos os comandos abaixo já foram explicados nos artigos anteriores. Volta lá se perdeu algo!</p>

<p>Lembrem-se do que sempre digo: <strong><em>Não é complicado! Se ficar complicado demais tem algo errado, volte e leia novamente, com mais calma</em></strong>.</p>

<h4>SO</h4>

<p>Rodando um container Debian, vmaos chamar ele de <strong><em>server</em></strong>:</p>

<pre><code>docker run --name server -itd -p 80:80 debian
</code></pre>

<p>Confira seu container rodando</p>

<pre><code>docker ps
</code></pre>

<p>Vamos dar um update no Debian para dessa maneira ele atualizar os caminhos dos pacotes:</p>

<pre><code>docker exec server apt-get update
</code></pre>

<h4>NGinx</h4>

<p>Terminado, podemos partir para a instalação do NGinx:<br/><strong>ATENÇÃO:</strong> não esqueça do -y abaixo, ele serve para confirmar que você quer instalar o pacote. As vezes sem essa opção a saída não vem corretamente do container para sua máquina.</p>

<pre><code>docker exec server apt-get install nginx -y
</code></pre>

<p>Vamos checar se instalou tudo certo?</p>

<pre><code>docker exec server nginx -v
</code></pre>

<p>A saída deve ser algo como:</p>

<pre><code>nginx version: nginx/1.6.2
</code></pre>

<p>O NGinx está instalado, mas ainda não está rodando. Vamos iniciar ele?</p>

<pre><code>docker exec server service nginx start
</code></pre>

<p>Agora que o NGinx está rodando, você já é capaz de ir ao seu localhost e ver a página inicial do NGinx.</p>

<h4>PHP</h4>

<p>Vamos agora instalar o PHP. Antes disso, vamos checar quais versões do PHP temos disponível para o Debian nessa versão.</p>

<pre><code>docker exec server apt-cache search php | grep fpm
</code></pre>

<p>Aqui retornou a versão 5 do FPM. Vamos com ela.<br/><strong>ATENÇÃO:</strong> não esqueça do -y.</p>

<pre><code>docker exec server apt-get install php5-fpm -y
</code></pre>

<p>Vamos checar se instalou tudo certo?</p>

<pre><code>docker exec server php --version
</code></pre>

<p>A saída deve ser algo como:</p>

<pre><code>PHP 5.6.29-0+deb8u1 (cli) (built: Dec 13 2016 16:02:08) 
Copyright (c) 1997-2016 The PHP Group
Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies
    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies
</code></pre>

<p>Para fechar igual a instalação do NGinx que fizemos acima, vamos iniciar o php-fpm?</p>

<pre><code>docker exec server service php5-fpm start
</code></pre>

<p>Feito!</p>

<p>Sim! Você pode adicioanar os caminhos no debian para instalar a versão 7 do PHP. Aqui fizemos com a versão que havia disponível para facilitar esse tutorial.</p>

<h3>Hora de Configurar</h3>

<p>Sistema Operacional, NGinx e PHP ok. Hora de configurar as coisas para rodarem.
Acima executamos todos os comandos de fora do container com <strong><em>docker exec</em></strong>. Agora como vamos editar arquivos de configuração, acho que é melhor irmos para dentro do container.</p>

<pre><code>docker attach server
</code></pre>

<p>Seu terminal deve ter ficado com algo como <strong><em>root@id-do-seu-container</em></strong>. Estamos dentro do container!</p>

<p>Para editar arquivos vamos precisar de um editor. Vou de <strong><em>Vim</em></strong>, e vocês? Instalem o editor que você tiverem facilidade.</p>

<p><strong><em>ATENÇÃO:</em></strong> Lembra do -y nos comandos acima? Aqui não passamos esse parâmetro. Então você terá que responder com <strong><em>Y</em></strong> se você deseja instalar o pacote quando for questionado por isso. Ou adicione o <strong><em>-Y</em></strong> no comando abaixo ;-)</p>

<pre><code>apt-get install vim
</code></pre>

<p>Com o editor em mãos, vamos configurar o NGinx.
Vamos ao arquivo default de configuração. Nessa versão ele está no seguinte caminho:</p>

<pre><code>vim /etc/nginx/sites-available/default
</code></pre>

<p>O Arquivo vem com várias linhas comentadas para facilitar o seu entendimento.
Segue o meu arquivo abaixo. Deixei o mais enxuto para ele funcionar na porta 80.</p>

<pre><code>server {
    listen   80;

    root /var/www/app;
    index index.php index.html;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}
</code></pre>

<p>Após editar o arquivo, reinicie o <strong><em>NGinx</em></strong></p>

<pre><code>service nginx restart
</code></pre>

<p>Repare que colocamos como raiz o caminho <strong><em>/var/www/app</em></strong>.
Vamos até <strong><em>/var/www</em></strong></p>

<pre><code>cd /var/www
</code></pre>

<p>Agora criamos a pasta app</p>

<pre><code>mkdir app
</code></pre>

<p>Vamos criar um arquivo <strong><em>index.php</em></strong> com uma função <strong><em>phpinfo</em></strong> dentro dele para fazermos um teste.</p>

<pre><code>&lt;?php phpinfo(); ?&gt;
</code></pre>

<p>Acesse localhost e veja o resultado.</p>

<h3>Hmm.. mas quando eu derrubar esse container?</h3>

<p>É, você vai ter que fazer tudo novamente. Mas não entre em pânico! Que tal criarmos nossa própria imagem, e sempre que quisermos um container com NGinx+PHP, podemos usar nossa própria imagem. Como te parece?</p>

<p>Vamos para a parte 2 desse artigo para pegar essa ideia <a href="http://flaviosilveira.com/2017/criando-seu-container-nginx-php-2">http://flaviosilveira.com/2017/criando-seu-container-nginx-php-2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microserviços]]></title>
    <link href="http://flaviosilveira.com/2016/microservicos/"/>
    <updated>2016-11-07T08:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/microservicos</id>
    <content type="html"><![CDATA[<p>Muito anda se falando sobre microserviços e trago para vocês minha experiência de como começamos a trabalhar dessa forma aqui na <a href="https://www.lojaskd.com.br">LojasKD</a>.</p>

<p>Assim como meu post anterior sobre <a href="http://flaviosilveira.com/2016/ansible-desperte-a-automacao-em-voce/">Ansible e automação</a>, esse assunto também faz parte de uma palestra que apresentei durante 2016, um dos meus grandes orgulhos desse ano que encerro com esse post.</p>

<h3>Microserviços - O que é?</h3>

<p>Para falar sobre microserviços eu sempre empresto a frase do <a href="https://twitter.com/tiagodolphine">@tiagodolphine</a>: &ldquo;O menor possível, porém grande o suficiente para representar seu domínio&rdquo;.</p>

<!--more-->


<p>Pequenas aplicações que representem seus domínios. Parece fácil ah?
Mas a linha para que isso se torne um <strong>macroserviço</strong> é tênue. Se você descuidar da organização dos seus serviços eles podem começar a dar mais trabalho do que você gostaria.</p>

<h3>Seus problemas não acabaram</h3>

<p>Não existe solução perfeita, tudo tem seu uso ideal, seu lado bom e seu lado ruim.</p>

<p>Microserviços não são uma bala de prata que vai resolver todos os problemas de seus projetos. Assim como você escolhe uma linguagem para desenvolver um projeto, qual banco de dados vai usar e etc, o mesmo deve servir para sua arquitetura.</p>

<p><strong>Não vá de microserviços simplesmente pelo modismo!</strong></p>

<p>Aliás, microserviços pode ser comparado ao que acontecia com APIs em SOAP (Simple Object Access Protocol) com seus WSDLs para lá e para cá, que tem seus primeiros registros de uso no fim dos anos 90. Tecnologia tem muito disso, coisas que voltam com nomes diferentes ou um buzz que surge com coisas que já fazemos.</p>

<p>Acompanhem comigo os prós e contras de uma arquitetura monolítica versus uma de microserviços.</p>

<h3>Monolítico</h3>

<p>Há não tantos anos atrás, na hora de iniciar nossos projetos era certo que eles seriam de uma forma única. Como estamos falando da KD aqui, vamos pegar o exemplo de ECommerce.</p>

<p>Um banco de dados, uma aplicação MVC em cima de uma linguagem. Um controller para a Vitrine, outro para o Carrinho, outro para o Checkout. Tudo em um lugar só.</p>

<p>Mas então quando seu serviço cai? Tudo cai, tudo fica fora. <strong>-1 aqui para o monolítico</strong>. Mas, na hora de colocar isso em produção? Demais! Tudo em um só lugar, um único deploy. <strong>+1 para o monolítico</strong>.</p>

<p>Se uma das partes do seu sistema ficava lento, grande chance de ele ficar lento por inteiro. E a parte que está deixando lento, que digamos seja lá na visualização de produtos, está impedindo que pessoas fechem suas compras. <strong>-1 para o monolítico</strong>.</p>

<p>Vamos monitorar para que não caia novamente? Vamos ter que monitorar uma única aplicação, Ótimo! <strong>+1 para o monolítico</strong>.</p>

<p>Achar desenvolvedores para um projeto com uma linguagem só é um outro ponto positivo aqui e também o conhecimento em cima de como servir uma única aplicação. <strong>+2 para o monolítico</strong>. Mas a curva de aprendizagem em cima de regras de negócio que estão todas juntas e misturadas podem complicar. <strong>-1 para o monolítico</strong>.</p>

<h3>Os Microserviços</h3>

<p>Em microserviços não vamos pensar como uma coisa só, vamos pensar como várias pequenas partes para formar um objetivo comum. Nosso Carrinho, nossa Vitrine, nosso Checkout que estavam todos juntos, aqui se separam em pequenas aplicações cada uma com sua função.</p>

<p>Se um dos nossos serviços caírem, outros serviços continuam funcionando e nosso ECommerce não fica totalmente fora. <strong>+1 para os microserviços</strong>.</p>

<p>Mas fazer deploy de tudo, várias aplicações. E se uma depender de outra em determinada funcionalidade? E se&hellip; É, a orquestração de entregas com microserviços pode não ser simples. <strong>-1 para os microserviços</strong>.</p>

<p>Lentidão em um dos serviços? Não deve afetar o restante. <strong>+1 para os microserviços</strong>. Ainda você pode escalar as funcionalidades de uma maneira mais flexível. Exemplo: Você tem muito mais acessos na vitrine do que no carrinho? Coloque mais máquinas para servir sua parte de vitrines, deixe a parte do carrinho com menos máquinas. É uma maneira de otimizar custos usando microserviços.</p>

<p>Agora, monitorar várias aplicações, ter uma arquitetura maior para cuidar. <strong>-1 para os microserviços</strong>.</p>

<h3>Tecnologias Agnósticas</h3>

<p>Dei a entender em um dos pontos acima que com microserviços teremos várias linguagens. Isso não é regra, claro! Mas com uma arquitetura em microserviços fica muito mais fácil você experimentar uma nova linguagem para solucionar algum problema. Se não der certo, tudo bem! O Serviço está pequeno o suficiente para você rescrever ele em uma linguagem do seu domínio em pouco tempo.</p>

<p>Coloco isso como dois pontos positivos dos microserviços: Você poder experimentar novas linguagens, poder colocar junto linguagens que não acreditam umas nas outras, descobrir novos conceitos de programação de maneira fácil sem complicar todo um negócio. E a facilidade em reescrever se for necessário. É pequeno, é rápido reescrever. <strong>+2 para os microserviços</strong>.</p>

<p>Mas, na hora de contratar pessoal para mexer com várias linguagens você pode ter um problema. <strong>-1 para os microserviços</strong>.</p>

<h3>Quem ganhou?</h3>

<p>Se você está fazendo a matemática dos pontos acima, você está perdendo. Veja o que se aplica melhor para sua necessidade e o que você pode ganhar com cada uma. Novamente, não há melhor ou pior, são soluções distintas.</p>

<p>O que você usaria para provar um conceito de uma ideia para startup? Para um hot site? Um portal de notícias? Um site institucional? Um sistema administrativo?</p>

<p>Recomendo aqui a audição do Episódio #1 do Hipsters ponto tech, <a href="http://hipsters.tech/tecnologias-no-nubank-hipsters-01/">http://hipsters.tech/tecnologias-no-nubank-hipsters-01/</a> onde o pessoal do NuBank comenta sobre a escolha de microserviços desde o início, e suposições do que poderia ter acontecido se não tivessem ido por esse caminho.</p>

<h3>Comunicação entre microserviços</h3>

<p>Várias aplicações, várias linguagens, como uma vai conversar com a outra?</p>

<p>Estamos em 2016 e para comunicar linguagens diferentes hoje temos padrões como REST, JSON que são simples de trabalhar e estão presentes em todo o lugar. Diferente dos antigos e trabalhosos XMLs com WSDLs que infelizmente ainda encontramos por aí.</p>

<h3>Bancos de dados Agnósticos</h3>

<p>Muito do que falamos acima para aplicações e linguagens, podem vir de encontro também ao pensar em banco de dados. Porque um banco de dados monolítico? Se ele ficar comprometido pode comprometer todo seu negócio.</p>

<p>Você poder experimentar bancos de dados diferentes em busca de soluções diferentes, performances de cada um e etc. Um banco de dados para produtos, outro banco de dados para pedidos e assim por diante.</p>

<p>Ah, mas como vou tirar relatórios para os meus diretores com várias bases? Como vou unir os dados de uma base com a outra? A resposta aqui pode ser BI. Business Inteligence. Una as informações que sua empresa precisa para seus KPIs e OKRs em um único ponto, onde eles possam montar seus relatórios em uma única ferramenta.</p>

<h3>Na KD</h3>

<p>Agora que já comentamos alguns pontos gerais de microserviços e estruturas monolíticas. Segue alguns pontos da nossa experiência com microserviços aqui na LojasKD:</p>

<ul>
<li><p>Os Microserviços chegaram na KD para resolver um problema de software legado. Foi a maneira que encontramos para ir substituindo as funcionalidades de uma grande aplicação monolítica aos poucos, até que não tenhamos mais ela. Estamos nesse rumo.</p></li>
<li><p>Como não tinhamos nenhuma experiência com microserviços, começamos com algo minúsculo. Um serviço que apenas trazia as informações de um pedido quando passado seu ID.</p></li>
<li><p>Começamos a experimentar linguagens e bases de dados diferentes em busca de soluções melhores para problemas conhecidos.</p></li>
<li><p>Já erramos e tivemos que reescrever microserviços inteiros novamente, mas não levou mais que uma semana.</p></li>
<li><p>Para serviços mais críticos, mantemos em nossa linguagem de maior domínio hoje, PHP.</p></li>
<li><p>Sofremos um pouco com monitoramento. É bastante coisa  para monitorar, disparar alertas e ficar de olho. Custo e trabalho em cima disso são altos.</p></li>
<li><p>A manutenção dos servers não é tão crítica, temos receitas em puppet e dockerfiles que nos ajudam nessa área.</p></li>
<li><p>Os deploys estão automatizados, mas as vezes precisamos fazer uma orquestração verbal para evitar conflitos.</p></li>
<li><p>Nosso time de desenvolvedores trabalham em cima de todos os microserviços e em suas diferentes linguagens. Temos Node, Python, Ruby, Java, GOLang e o já citado PHP. Sofremos um pouquinho na hora de contratar pessoas hoje. Não queremos desenvolvedores que saibam todas essas linguagens, mas o que acontece é que os candidatos acabam assustados com a diversidade.</p></li>
</ul>


<p>-É natural que um desenvolvedor entenda mais de uma linguagem do que de outra e vá guiando o time.</p>

<ul>
<li><p>Não descuide do tamanho dos microserviços. Mantenha uma documentação básica no mínimo.</p></li>
<li><p>Estude sobre API Gateway.</p></li>
</ul>


<p>Espero que minha abordagem para explicar microserviços tenha ajudado.
Mas e vocês, como estão usando microserviços? Ou como estão pretendendo usar?
Dúvidas? Outras ideias? Só comentar.
Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Drops of Life - Three]]></title>
    <link href="http://flaviosilveira.com/2016/4-drops-of-life-3/"/>
    <updated>2016-11-07T08:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/4-drops-of-life-3</id>
    <content type="html"><![CDATA[<p>Salve pessoal!</p>

<p>No Drops of Life de hoje vamos falar de meditação, como melhorar seu inglês, sobre decisões difíceis e uma dica para aumentar sua produtividade no trabalho.</p>

<p>4 drops of life, é uma série de artigos onde trago 4 pequenas coisas para sua vida quinzenalmente. Um pensamento, uma tecnologia, arte, alimentação, exercícios e etc. Pequenos hábitos em busca de mais produtividade, conhecimento e uma vida melhor. Lifehackings!</p>

<h3>Inglês Online Podcast</h3>

<p>Tenho um conhecimento bom de mim mesmo, como aprendo e como absorvo melhor as coisas. E se tratando de idiomas o que mais funciona para mim é ouvir.</p>

<p>Se você quer desenvolver mais seu inglês recomendo demais o <a href="http://www.inglesonline.com.br/category/podcast-inglesonline/">Inglês online Podcast</a>.</p>

<!--more-->


<p>Os episódios são inteiros em inglês e a <a href="https://twitter.com/inglesonline">Ana</a>, host do podcast, é brasileira. Então a parte do sotaque fica muito fácil para a gente entender, mesmo se você é iniciante. Os temas que ela apresenta são baseados em coisas que falamos no nosso dia comum. Exemplo: Como falo &ldquo;estou atolado de trabalho&rdquo;, como falo &ldquo;Se Deus quiser&rdquo;, e assim por diante.</p>

<p>Também não há desculpa de falta de tempo para ouvir. Os episódios são rápidos, 5 minutos. O que é ideal para você ouvir duas, três vezes por dia e dessa forma fixar melhor o conteúdo.</p>

<p>Quer melhorar seu inglês? Inglês Online Podcast!</p>

<h3>Não fuja das decisões difíceis</h3>

<p>Sempre que você se depara com uma decisão de extrema dificuldade, é normal não saber idealmente o que é melhor. Você vai ter que investir!</p>

<p>Veja o paralelo: Quando você aplica seu dinheiro em um investimento, você não sabe se aquilo vai dar certo e você vai ganhar, ou se vai dar errado e você vai perder tudo.</p>

<p>Tudo na vida é um investimento. Qualquer espécie de ganho você tem que arriscar. Material, dinheiro, emocional.</p>

<p>Assim são as decisões difíceis. Avalie as opções e aposte! Sinta-se tranquilo com o que decidiu. Não olhe para trás se ele der perda. Nos erramos para aprender, caímos para levantar.</p>

<h3>Não trabalhe com o email aberto</h3>

<p>Minha vida mudou quando passei a fechar o email para trabalhar.</p>

<p>Aquele contador de mensagens na aba, ou no software é extremamente convidativo e mesmo que você se segure em não abrir, seus olhos ficam batendo ali. E sim, esse simples desviar de olhos te faz perder tempo também, da mesma maneira que um piloto de corrida perde um pouco de seu tempo olhando no retrovisor.</p>

<p>Feche seu email! Estabeleça os melhores horários para você responder eles. Uma ou duas vezes por dia. 80% dos seus emails são resolvidos com ações rápidas. Outros 10% são fáceis de delegar e então você terá tempo para os 10% de emails que você precisa escrever com calma, reler e enviar.</p>

<p>Não se preocupe! Se for urgente, vão te ligar.</p>

<h3>Meditação</h3>

<p>Meditar é para mim uma das coisas mais importantes do dia.</p>

<p>E você não precisa seguir o budismo, nem mesmo de um curso para começar. Sente-se confortavelmente por 5, 10 minutos e tente uma das seguintes opções: não pensar em nada ou pensar em algum objetivo que está buscando, se imaginar com ele realizado.</p>

<p>Quem medita comenta sobre a mente do macaco, sua mente pulando de pensamento em pensamento como um macaco de galho em galho. Vai acontecer com você! Respire, se concentre. Sua mente fugiu para um pensamento? Respire e volte para onde quer. No começo esse trabalho é maior, mas com o tempo vai ficando mais fácil.</p>

<p>Algumas pessoas tem muita dificuldade em parar e tentar se concentrar, mas os benefícios são altos. Calma, paciência, foco, clareza, além de combater o stress entre outros.</p>

<p>Não deixe de meditar, aconteça o que acontecer.</p>

<p>Para quem tem dificuldades ou para quem quer entender um pouco mais, recomendo os vídeos do <a href="https://www.youtube.com/user/ActualizedOrg/search?query=meditation">Actualized.org</a> que falam sobre meditação de uma maneira bem direta.</p>

<p>Esse foi o Drops of life de hoje. Tem sugestões, ideias diferentes? Comente abaixo para dividir conhecimentos e práticas.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Drops of Life - Two]]></title>
    <link href="http://flaviosilveira.com/2016/4-drops-of-life-2/"/>
    <updated>2016-10-24T08:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/4-drops-of-life-2</id>
    <content type="html"><![CDATA[<p>Salve pessoal!</p>

<p>No Drops of Life de hoje vamos falar de hidratação, exercício para seu cérebro, música para trabalhar e qualidade de sono.</p>

<p>4 drops of life, é uma série de artigos onde trago 4 pequenas coisas para sua vida quinzenalmente. Um pensamento, uma tecnologia, arte, alimentação, exercícios e etc. Pequenos hábitos em busca de mais produtividade, conhecimento e uma vida melhor. Lifehackings!</p>

<h3>Duas garrafas de 500ml d'água</h3>

<p>Vejo muita gente com aplicativos e outras técnicas para lembrar de tomar água. Vou deixar aqui a maneira como faço e que já se tornou um hábito para mim.</p>

<p>No trabalho e em casa eu tenho duas garrafas de 500ml de água. Pode ser uma garrafa bonita que você tenha ou uma de água mineral que você comprou em qualquer lugar.</p>

<!--more-->


<p>Encha as duas pela manhã e você tem até o almoço para terminá-las.
Ao voltar do almoço, encha as duas novamente e você tem até o fim da tarde para terminar. Sempre deixo as garrafas por perto e ao olhar para elas lembro de dar um gole. Se vou para uma reunião, uma delas me acompanha.</p>

<p>No começo, como tudo, era complicado. Voltava do almoço ainda com um resto em alguma das garrafas. Mas insisti e recomendo a você o mesmo. Isso traz os 2 litros diários d'água recomendados pela organização mundial de saúde além de melhoras na pele, ânimo e muitos outros pontos.</p>

<p>Porquê não uma garrafa de 1 litro ou maior? Na minha prática, ficou difícil controlar e dividir do momento em que você está até o momento de terminar aquilo. Afinal de contas você tomar goles enormes de aguá pode tirar os sais da sua boca e isso não é bom. Você deve tomar um gole a cada pouco. Além de carregar algo maior e mais pesado para lá e para cá é mais difícil.</p>

<p>Há anos as pessoas me vêem com minhas garrafas e funciona muito bem para mim. O que funciona para você?</p>

<h3>Lumosity</h3>

<p>Você exercita seu corpo, músculos e orgãos. E seu cérebro? Como você o exercita?</p>

<p>Se você não conhece, o Lumosity pode te ajudar a exercitar seu cérebro nos seguintes pontos: velocidade de resposta, memória, atenção, flexibilidade e solução de problemas.</p>

<p>Na versão grátis você vai ter 3 exercícios dentro dos 5 pontos todo dia,a versão paga cobre os 5. Os exercícios vão aumentando de nível a medida que você vai resolvendo eles com mais facilidade.</p>

<p>Não recomendo que você fique fazendo os exercícios milhares de vezes por dia, faça os propostos pelo aplicativo. Se estiver um pouco mais disposto faça mais alguns, mas sem exagero. Seria o mesmo princípio que o exercício físico: Você não sai de um dia onde não faz nenhum exercício para no outro correr 50km.</p>

<p>Lembre-se que há dias bons e dias ruins, treinos bons e treinos ruins e isso vai acontecer aqui também. Dias aonde você vai responder ao Lumosity melhor e outros dias pior.</p>

<p>Particularmente, eu faço o lumosity a cada 2 dias. Eu intercalo ele com outros aplicativos e jogos para o mesmo objetivo, coisas que no futuro vou trazer aqui.</p>

<h3>Jazz e Fusion para trabalhos mentais</h3>

<p>Eu sou um apaixonado por música, tendo inclusive feito faculdade nesse meio. Sou voltado extremamente ao Hard e Heavy metal seja qual linha a partir daí surgir. Por gostar tanto de música acho que ela tem um poder alto de me tirar a concentração e, trabalhar ouvindo Hard, Heavy e coisas com um refrão que dá vontade de cantar junto pesa ainda mais nisso.</p>

<p>Muito se fala sobre o som ideal para trabalhar, sons de cafeteria, sons de fundo, sem som nenhum. Uso e experimento todos e cada um tem seu resultado de acordo com o tipo de trabalho para mim.</p>

<p>Quando estou escrevendo, programando e qualquer coisa no sentido mais cérebro, o Jazz e Fusion me trazem bons resultados. Se você é parecido comigo na questão musical, recomendo tentar.</p>

<p>Dave Weckl, Greg Howe, Michael Camilo, Pat Metheny, Peter White, Rippingtons, Chick Corea, Steve Morse Band e Hiromi Uehara são alguns dos meus preferidos.</p>

<h3>8 horas de cama por dia</h3>

<p>Se fala muito sobre horas de sono, 8 horas no mínimo e etc e etc.</p>

<p>Eu tenho extrema dificuldade para dormir, fico com mil pensamentos e cheio de vontades de dominar o mundo. Sou notívago, algo que puxei de minha mãe e o dormir bem é onde peco muitas vezes.</p>

<p>Indo contra alguns pensamentos de não levar livros e eletrônicos para cama, algo que tem dado certo para mim é substituir o <strong>8 horas de sono</strong> por <strong>8 horas de cama</strong>.</p>

<p>Me policio para ficar 8 horas na cama. Se não estou com sono escrevo em meu caderno de anotações, leio um livro ou escuto podcasts. Nesse último caso tomo cuidado pois não gosto realmente de levar eletrônicos para o quarto, então reduzo a luminosidade do celular e coisas assim. Hora para lá ou para cá acabo com sono e dormindo.</p>

<p>Acordo descansado e ok, mesmo não tendo dormido as 8 horas todas.
Se você tem dificuldades como eu de dormir, experimente esse método e me diga como se sente.</p>

<p>Esse foi o Drops of life de hoje. Tem sugestões, ideias diferentes? Comente abaixo para dividir conhecimentos e práticas.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible - Desperte a Automação Em Você]]></title>
    <link href="http://flaviosilveira.com/2016/ansible-desperte-a-automacao-em-voce/"/>
    <updated>2016-10-17T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/ansible-desperte-a-automacao-em-voce</id>
    <content type="html"><![CDATA[<p>Automação vem se tornando um tema essencial em empresas que querem crescer com mais cérebro e menos braço. Aquela tarefa que você repete mais de duas vezes já deve ser pensada em uma maneira de ser automática, concorda?</p>

<p>No universo do desenvolvimento, quantas são as tarefas que repetimos quando se trata de máquinas? Deploys, extração de logs, instalação e configuração de ferramentas, etc. Ansible pode ser a ferramenta que vai te ajudar a automatizar tudo isso.</p>

<!--more-->


<p>Durante esse ano de 2016 apresentei a palestra <strong><em>Automações com Ansible</em></strong> onde o objetivo principal foi uma iniciação ao Ansible. Como usar ele de maneira bem básica e se iniciar na automação. Estrutura de um projeto básico, como criar as primeiras tarefas, passar argumentos, variáveis, e usar includes. Essa vai ser a agenda desse longo post técnico e assim também encerrando as apresentações dessa palestra para dar lugar a outras :-).</p>

<h4>Ansible</h4>

<p>Ansible (<a href="https://www.ansible.com/">https://www.ansible.com/</a>) é uma ferramenta Open Source em Python para automatizar ações em máquinas. Ela é super simples, e esse é sempre um dos meus lemas quando se trata de desenvolvimento e tecnologia. Se está difícil, tem alguma coisa errada. Pare e analise. Tecnologia não é mágica, tem que fazer sentido.</p>

<p>Não vou falar da instalação do Ansible. É fácil você fazer download dele e sair rodando ou ainda usar <strong>yum install</strong> ou <strong>apt-get install</strong>.</p>

<h4>Um projeto básico</h4>

<p>Há várias maneiras de estruturar um projeto ansible. Algumas sugestão com arquiteturas de pastas super elaboradas, onde podem fazer sentido para algumas soluções. Para agora, para começarmos, dois arquivos vão resolver nosso problema.</p>

<pre><code>- projeto.yml
- hosts
</code></pre>

<p>Um arquivo com extensão .yml (yet another markup language) e um arquivo hosts, sem extensão.
No arquivo yml você vai colocar o passo a passo da sua automação. Tecnicamente ele tem o nome de playbook. No arquivo hosts vamos apontar as máquinas onde as tarefas serão executadas.</p>

<h4>Arquivo hosts</h4>

<p>Vamos primeiro configurar as máquinas que serão afetadas pelas nossas tarefas.</p>

<pre><code>#This is the Host File.

[projeto]
192.168.5.6 ansible_ssh_user=user ansible_ssh_pass=pass
</code></pre>

<p>É isso que vocês precisam no arquivo hosts quando falamos de acesso que o ansible vai fazer usando ssh. O IP da máquina, seguido de um usuário e senha. Esse nome em colchetes vai te ajudar a gerenciar as coisas em um futuro, mantenha ele ali.</p>

<p>Vai fazer uso de portas? Acesso a máquinas com chave? Chamar mais de uma máquina?</p>

<pre><code>#This is the Host File.

###################
# Projeto servers #
###################
[projeto-homologacao]
222.222.222.222:2123 ansible_ssh_private_key_file=/.ssh/chave.pem ansible_ssh_pass=pass
123.123.123.123:2123 ansible_ssh_private_key_file=/.ssh/chave.pem ansible_ssh_pass=pass

[projeto-local]
192.168.5.6 ansible_ssh_user=user ansible_ssh_pass=pass
</code></pre>

<p>Para acessar as máquinas usando chaves use <strong>ansible_ssh_private_key_file</strong>. Se seu acesso tem portas diferentes, basta adicionar elas ao final do IP.</p>

<p>Notem que fiz uma separação entre as máquinas de homologação e a máquina local. Essa organização pode te ajudar no futuro a gerenciar essas máquinas e usar isso em suas automações.</p>

<h4>Rodando o Ansible</h4>

<p>Para rodar o ansible o comando é fácil</p>

<pre><code>ansible-playbook -i hosts projeto.yml
</code></pre>

<p>Ansible-playbook é o comando. -i  é o parâmetro que significa inventory, para inventário, onde passaremos nosso arquivo hosts. Por último nosso arquivo de tarefas. Sim! Não temos nenhuma tarefa, já vamos chegar lá.</p>

<p>Caso precise rodar o ansible com mais saidas de log, em um momento para resolver problemas por exemplo, você pode usar -v, de verbose.</p>

<pre><code>ansible-playbook -i hosts projeto.yml -v
ansible-playbook -i hosts projeto.yml -vv
ansible-playbook -i hosts projeto.yml -vvv
ansible-playbook -i hosts projeto.yml -vvvv
</code></pre>

<p>As opções vão até 4 Vs. Onde cada um a mais, te mostra mais detalhes dos comandos e dos erros se houver.</p>

<h4>Criando tasks</h4>

<p>Vamos começar com um exemplo bem simples de tarefa, um hello world por assim dizer.</p>

<pre><code>--
# Projeto
- hosts: "projeto"

tasks:
- name: "Vamos dar echo"
  shell: 'echo teste'
</code></pre>

<p>Lembra no nosso arquivo hosts a separação que fizemos com os colchetes? Use o nome que você definiu lá, aqui na opção hosts.</p>

<p>Em seguida criamos uma tarefa com o nome <strong>Vamos dar echo</strong>. E é isso que ela se dispõe a fazer. Rodando o playbook acima, ele vai acessar as máquinas presente no seu host e executar um <strong>echo teste</strong>.</p>

<p>Reparem que usamos o módulo <strong>shell</strong> do ansible para executar o comando. Vamos falar mais disso depois.</p>

<p>Vamos criar uma nova tarefa, agora usando o módulo <strong>script</strong> do ansible. Você deve ir aninhando as suas tarefas uma abaixo da outra como segue:</p>

<pre><code>--
# Projeto
- hosts: "projeto"

tasks:
  - name: "Vamos dar echo"
    shell: 'echo teste'

  - name: "Executar um script"
    script: '/bin/usr/meu.sh'
</code></pre>

<p>Adicionamos a tarefa chamada <strong>Executar um script</strong>, que vai executar o .sh presente no caminho passado.</p>

<h4>Módulos</h4>

<p>Ansible tem vários módulos como você pode conferir na documentação em <a href="http://docs.ansible.com/ansible/modules_by_category.html">http://docs.ansible.com/ansible/modules_by_category.html</a>.</p>

<p>Esses módulos vem para te ajudar a criar tarefas das mais diferentes naturezas que você imaginar. Execução de linhas de comando, criação de arquivos, acesso a repositórios de versionamento, filas (rabbit, sqs, kafka), checar acesso a outras redes, instalação de programas, acesso a Amazon, Azure, Google Cloud, etc. Esses exemplos são poucos. Dê uma boa navegada na página acima para conferir a real gama de facilidades que o ansible nos dá.</p>

<p>Retorne os olhos nas tasks que fizemos acima e veja os módulos em ação. Usamos Shell e Script que fazem parte da categoria <strong>Commands Modules</strong> (<a href="http://docs.ansible.com/ansible/list_of_commands_modules.html">http://docs.ansible.com/ansible/list_of_commands_modules.html</a>).</p>

<p>Para efeitos didáticos, não vamos usar em nossos exemplos aqui módulos muito diferentes e ousados. Mas não se limite! A documentação do Ansible é excelente e fácil de compreender e vai te ajudar com toda certeza.</p>

<h4>Argumentos</h4>

<p>Os módulos podem ter argumentos / parâmetros. Alguns são nativos a todos os módulos do Ansible, outros são específicos. Confira a documentação para ir ficando a par disso.</p>

<pre><code>tasks:
  - name: "Ver se existe a pasta do projeto criada"
    shell: 'mkdir projeto'
    args:
      chdir: '/home'
      creates: 'projeto'
</code></pre>

<p>Aqui com <strong>args</strong>. Usamos <strong>chdir</strong> para dizer aonde queremos executar nossa tarefa.
Também usamos <strong>creates</strong>, que nos ajuda checando se o mkdir vai ser necessário mesmo ou não.</p>

<h4>Variáveis</h4>

<p>Podemos e devemos definir variáveis no topo de nossos playbooks para usá-las em nossas tasks.</p>

<pre><code>---
# Projeto
- hosts: "projeto"

vars:
    repo: git@bitbucket.org/flaviosilveira/primeiro-jogo-html5.git
    document_root: /var/www
    releases_folder: releases

- name: "Clone/Update projeto"
  git: 'repo=ssh://{{repo}} dest={{document_root}}/{{releases_folder}} clone=yes update=yes accept_hostkey=yes force=yes'   
</code></pre>

<p>Usamos as variáveis com seus nomes entre chaves duplas <strong>{{nome_da_variavel}}</strong>.</p>

<p>Repare como se compõe o comando para clonar ou atualizar nosso projeto usando o módulo git do ansible. Esse módulo faz clone se o projeto git não existir na máquina ou atualiza se ele já estiver lá.</p>

<h4>Passando variáveis pela linha de comando</h4>

<p>Você consegue passar variáveis através da chamada do ansible, o que pode te dar ainda mais ideas em suas automações.</p>

<pre><code>ansible-playbook -i hosts projeto.yml -e "env=homologacao"
</code></pre>

<p>Com -e, passamos a variável <strong>env</strong> para nosso playbook. De dentro dele, vamos usar {{env}} para resgatar.</p>

<pre><code>---
# Projeto
- hosts: "projeto-{{env}}"
</code></pre>

<p>Lembram na definição de nossos hosts, quando fizemos uma variação com máquinas de homologação e uma máquina local? Aqui está um uso para essa organização, facilitando em você não ter de ficar alterando seus playbooks todo o tempo.</p>

<h4>Salvando saídas de tarefas como variável</h4>

<p>Outra coisa legal é armazenar saídas de tarefas para variáveis e assim poder usá-las posteriormente.</p>

<pre><code>- name: "Contar pastas"
  shell: 'ls | wc -l'
  args:
    chdir: '{{document_root}}/{{releases_folder}}'
  register: to_remove
</code></pre>

<p>Na tarefa acima, usamos um comando Shell para contar um número de pastas.
Estamos usando argumentos para o módulo e também variáveis. Coisas que já vimos acima.</p>

<p>Em seguida registramos a saída desse comando para a variável <strong>count</strong>.
Para usá-la? {{count}}.</p>

<p>As vezes o que você coloca na variável é um objeto. Confira a saída em verbose (-vvvv) caso tenha problemas usando como acima. Talvez você precise de alternativas:</p>

<pre><code>{{count.stdout}} #Saída do ansible
{{count.stdout | int}} #Mesmo que acima, mas convertendo para inteiro
</code></pre>

<h4>Condicionais</h4>

<p>Uma task pode ser executada ou não baseado em uma condional.</p>

<pre><code>- name: "Remove pastas"
  shell: 'ls -t | tail -n $(($(ls | wc -l)-3)) | xargs rm -rf'
  args:
    chdir: '{{document_root}}/{{releases_folder}}'
  when: '{{count.stdout | int}} &gt; 3'
</code></pre>

<p>Reparem na última linha, no <strong>when</strong>. Se a variável nos trouxer um resultado maior que 3, executaremos a tarefa, caso contrário não.</p>

<p>Para curiosidade, esse comando ordena as pastas por data, e deixa apenas as últimas 3, removendo o restante.</p>

<h4>Ignorando erros</h4>

<p>As vezes algumas tarefas nos trarão erros, mas que por algum motivo não precisamos nos preocupar. Para isso, use <strong>ignore_errors</strong>.</p>

<pre><code>--
# Projeto
- hosts: "projeto"

tasks:
  - name: "Vamos dar echo"
    shell: 'echo teste'
    args:
       chdir: '{{document_root}}/{{releases_folder}}'
    ignore_errors: true
</code></pre>

<p>Pronto, erros serão ignorados e seu playbook continuará em execução.</p>

<p>Isso pode ser útil também para algum comando que tem uma saída de comando muito grande. O ansible as vezes considera isso como um erro.</p>

<h4>Usando Includes</h4>

<p>Alguma tarefa que vai ser executada em mais de um playbook? Use Includes.
Crie uma pasta chamada <strong>includes</strong> e dentro dela crie um arquivo chamado <strong>outro.yml</strong>.</p>

<p>Dentro do seu arquivo <strong>outro.yml</strong>, você trabalha como se ele fosse uma tarefa normal</p>

<pre><code>---
# Include responsavel pela criacao da pasta

- name: "Ver se existe a pasta do projeto criada"
  shell: 'mkdir projeto'
  args:
    chdir: '/home'
    creates: 'projeto'
</code></pre>

<p>Para usar o include em outros playbooks faça:</p>

<pre><code>tasks:
  - include: 'includes/outro.yml'
</code></pre>

<p>Quer passar variáveis para seus includes?</p>

<pre><code>tasks:
  - include: 'includes/outro.yml variavel=3 variavel2={{document_root}}'
</code></pre>

<p>Reparem que definimos uma variável no momento de chamar o include e para a variável chamada <strong>variavel2</strong>, usamos uma variável que pode ter sido definida no topo de nosso playbook ou ainda que pode ter vindo da saída de uma task.</p>

<h4>That&rsquo;s It</h4>

<p>É isso por hoje pessoal! Cobrimos aqui o bé-a-bá no ansible, criamos tarefas, definimos nossas máquinas afetadas, aprendemos sobre módulos, argumentos, variáveis e includes.</p>

<p>Exercite em sua infraestrutura. Se não tem uma infraestrutura para testar, experimente com máquinas virtuais ou ainda com containers em Docker, tema que viemos discutindo aqui no Blog recentemente (<a href="http://flaviosilveira.com/2016/comece-com-docker/">http://flaviosilveira.com/2016/comece-com-docker/</a>, <a href="http://flaviosilveira.com/2016/docker-php7-e-php-built-in/">http://flaviosilveira.com/2016/docker-php7-e-php-built-in/</a>).</p>

<p>Desperte a automação em você! Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Drops of Life - One]]></title>
    <link href="http://flaviosilveira.com/2016/4-drops-of-life-1/"/>
    <updated>2016-10-10T08:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/4-drops-of-life-1</id>
    <content type="html"><![CDATA[<p>Continuando com a série 4 drops of life, essa é a edição 1.</p>

<p>4 drops of life, é uma série de artigos onde trago 4 pequenas coisas para sua vida quinzenalmente. Um pensamento, uma tecnologia, arte, alimentação, exercícios e etc. Pequenos hábitos em busca de mais produtividade, conhecimento e uma vida melhor. Lifehackings!</p>

<h3>1 - Aplicativo - Pocket</h3>

<p>Começando hoje com tecnologia. Para quem não conhece vou falar do <a href="https://getpocket.com/">pocket</a>. Um aplicativo simples que te ajuda a organizar links, vídeos e programas para ler, assistir e usar mais tarde.</p>

<p>Você já viu ou é daquelas pessoas que fica abrindo várias abas no navegador e não fecha para ver depois? Pocket pode ser para você.</p>

<!--more-->


<p>Instale em seus navegadores a extensão do pocket e sempre que se deparar com algo interessante mas não for o momento para aquilo, salve no pocket. Mais tarde, em um momento mais adequado você abre o pocket e lá está tudo que você salvou. Seja no celular, no tablet ou no notebook.</p>

<p>Além de manter suas abas mais limpas te ajuda a manter o foco quando por exemplo você está trabalhando e alguém te manda um link. Pocket nele!</p>

<p>Sempre reserve um tempo do dia para ler o que está no pocket e você estará usando a ferramenta da melhor maneira.</p>

<h3>2 - Documentário - Cidade 40</h3>

<p>Assisti esse documentário chamado <a href="http://www.imdb.com/title/tt2721744/">City 40</a> nos últimos dias e estou boquiaberto.</p>

<p>O documentário conta a história da cidade de Ozersk, que só tem esse nome desde 1994, antes disso ela era conhecida como a Cidade 40. É uma cidade fechada até hoje. Isso mesmo! Portões para entrar e sair e cercas com arame em suas extremidades.</p>

<p>Ao final os cineastas te mostram que essas cidades são mais comuns do que parecem. Recomendadíssimo para nos lembrar que o mundo é sempre mundo.</p>

<p>Enquanto escrevo esse documentário está disponível no Netflix.</p>

<h3>3 - Uma frase - O corpo é capaz de qualquer coisa, não deixe a mente lhe dizer o contrário.</h3>

<p>Essa frase aparece de várias maneiras em vários lugares. Poderíamos creditar ela a vários autores. Deixo aqui essa minha versão e sugiro você a ter ela sempre contigo.</p>

<p>Domine a mente e você viverá bem e melhor. Lembrando que viver bem não é viver muito.</p>

<p>Medite a sua maneira e coloque sua mente no lugar dela, a trate com autoridade e você alcançara mais.</p>

<h3>4 - Uma colher de mel para dormir melhor</h3>

<p>Um dos lifehackers que sigo é <a href="https://twitter.com/bulletproofexec">Dave Asprey</a>. Confesso que para mim ele virou muito marketeiro nos últimos tempos, vendendo mais do que experimentando. Mass&hellip; há alguns meses venho aplicando uma dica que li em seus materiais.</p>

<p>Uma colher de mel antes de dormir.</p>

<p>Simples assim! Para quem como eu tem muita dificuldade em dormir recomendo a dica que em sua explicação coloca o açucar do mel como energia necessária para um bom sono. Experimente!</p>

<p>Fechamos por hoje. Espero que tenham curtido as dicas. Mandem sugestões.
Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker, PHP7 E PHP Built In]]></title>
    <link href="http://flaviosilveira.com/2016/docker-php7-e-php-built-in/"/>
    <updated>2016-10-10T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/docker-php7-e-php-built-in</id>
    <content type="html"><![CDATA[<p>No artigo anterior (<a href="http://flaviosilveira.com/2016/comece-com-docker/">Comece com Docker!</a>) descrevemos juntos alguns passos iniciais com o Docker. Criamos containers, usamos attached, detached, entramos, saímos, executamos comandos. Se você não está familiarizado a isso, te convido a visitar o artigo.</p>

<p>Sendo repetitivo, meu desejo com esses artigos sobre docker é passar para as pessoas as facilidades que containers nos dão para experimentar tecnologias. Que tal hoje experimentarmos o PHP7? Se você não teve a oportunidade de mexer um pouco com ele o Docker está aqui para facilitar as coisas. E para facilitar ainda mais vamos usar o recurso Built In, presente desde a versão 5.4, que nos traz um servidor web embutido. Assim não vamos precisar instalar nada mais.</p>

<!--more-->


<h3>PHP no DockerHub</h3>

<p>No final do artigo anterior falamos sobre o <a href="https://hub.docker.com/">DockerHUB</a>, repositório oficial de imagens para criarmos nossos containers.</p>

<p>O <a href="https://hub.docker.com/_/php/">PHP tem um reposítorio oficial no Docker hub</a> e é de lá que vamos começar. Nessa página temos várias informações desde o que é PHP até como usar a imagem, contribuir, instalar extensões e etc.</p>

<p>Nos comandos que usamos, fizemos <strong><em>Docker Run</em></strong> que verifica se já temos a imagem em nossa máquina e caso não tenha faz o download dela. Vamos aprender um comando novo.</p>

<pre><code>docker pull php
</code></pre>

<p>Com docker pull vamos fazer apenas o download da imagem, ele não vai iniciar um container para a gente direto como <strong><em>docker run</em></strong> faz, apenas o download.</p>

<p>Nesse comando temos a opção de especificar a versão que queremos do PHP. Não passando nada, vai vir para a gente a última. Exatamente o que estamos querendo aqui certo?</p>

<h3>Subindo Container PHP</h3>

<p>Uma vez que a imagem está em nossa máquina, é hora de rodar o container. Vamos ver em que versão estamos?</p>

<pre><code>docker run php php --version
</code></pre>

<p><strong>Docker run</strong> é nosso comando. <strong>php</strong> é o nome da nossa imagem e em seguida o comando que queremos executar no nosso container, <strong>php &ndash;version</strong>.</p>

<p>Ao final desse comando o container terá subido, executado <strong>php &ndash;version</strong>, mostra uma saída e mata o container. A saída dada para mim na data de hoje foi versão <strong>PHP7.0.11</strong>.</p>

<p>O Container morre, porque o comando que passamos executou e finalizou. Comprovamos isso rodando <strong>docker ps</strong>.</p>

<h3>PHP CLI</h3>

<p>Na mesma pegada, vamos testar o PHP CLI com nosso container. PHP CLI é o php em linha de comando.</p>

<p>Mas antes vamos criar um script php para rodar no CLI. Criei uma pasta chamada <strong>php</strong> no meu diretório de desenvolvimento e dentro dele vou criar um script chamado <strong>spaceship.php</strong>.</p>

<pre><code>&lt;?php

// Testing Spaceship Operator
echo 2 &lt;=&gt; 2; // 0
echo 5 &lt;=&gt; 6; // -1
echo 6 &lt;=&gt; 5; // 1

echo "a" &lt;=&gt; "a"; // 0
echo "a" &lt;=&gt; "b"; // -1
echo "b" &lt;=&gt; "a"; // 1
</code></pre>

<p>O objetivo desse script é simplesmente testarmos o Spaceship, novo operador que veio com o PHP7. Vamos rodar ele em um container?</p>

<pre><code>docker run -v ~/dev/php:/usr/src/wd -w /usr/src/wd php php spaceship.php
</code></pre>

<p><strong>Docker run</strong> é nosso comando. Com <strong>-v</strong> vamos fazer share do nosso diretório da nossa máquina local com um diretório de nosso container. Os dois vão estar espelhados. Com <strong>-w</strong> vamos dizer para nosso container php qual é nosso Working directory, nosso diretório de trabalho. Repare que coloquei o mesmo diretório que em nosso container é equivalente ao diretório em nossa máquina.</p>

<p><strong>php</strong> é o nome da nossa imagem que vai servir de base para nosso container e <strong>php spaceship.php</strong> é nosso comando que vai rodar em nosso working directory.</p>

<p>A saída esperada é <strong>0-110-11</strong>, como nos comentários do script acima.
Já conhecia o Spaceship? Vale uma lida na documentação em <a href="http://php.net/manual/en/migration70.new-features.php">novas features PHP7</a>.</p>

<h3>PHP Built In</h3>

<p>Finalmente, vamos finalizar com o PHP Built In.</p>

<p>Vamos primeiro lembrar como é o comando do PHP Built In. Para consultar o help do PHP Cli podemos fazer</p>

<pre><code>docker run -v ~/dev/php:/usr/src/wd -w /usr/src/wd php php --help
</code></pre>

<p>Com -S maiúsculo, temos o que procuramos:</p>

<pre><code>php -S 127.0.0.1:8080
</code></pre>

<p>Simples não? -S, IP e a porta para acessar.</p>

<p>Dessa vez vou explicar o comando que vamos fazer antes:
<strong>Docker run</strong> que é nosso comando para subir o container. <strong>-p</strong> vai mapear a porta 8080 da nossa máquina para a porta 8080 do container. <strong>-v</strong> como vimos anteriormente vai fazer o share do nosso diretório. <strong>-w</strong> especifica onde vai ser o working directory do container php. <strong>php</strong> é o nome da nossa imagem que vai servir de base para nosso container. E o comando que vamos executar dentro do container será <strong>php -S 0.0.0.0:8080</strong>.</p>

<pre><code>docker run -p 8080:8080 -v ~/dev/php:/usr/src/wd -w /usr/src/wd php php -S 0.0.0.0:8080
</code></pre>

<p>Em meu exemplo eu estou usando uma docker machine que tem um IP <strong>192.168.99.100</strong>, quando passo para o comando do container um IP <strong>0.0.0.0</strong> ele é traduzido para o IP da minha docker machine.</p>

<p>Ao executar o comando, ele vai ficar esperando.</p>

<p>Acesso no navegador o seu IP passando a porta 8080, e acrescente <strong>/spaceship.php</strong>. O mesmo resultado visto anteriormente no terminal, agora está no seu navegador.</p>

<p>Para matar o container basta retornar ao terminal e dar um <strong>CTRL+C</strong>.</p>

<h3>Fechando</h3>

<p>Hoje usamos a imagem do PHP. Para quem nunca havia provado o PHP7, fica a sugestão de fazer esse experimento bem facilmente usando containers e Docker. Aprendemos o comando para simplesmente fazer download de uma imagem e exploramos a imagem do PHP usando CLI e Built In.</p>

<p>Espero que sua cabeça esteja com ideias em cima do que foi passado aqui.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comece Com Docker]]></title>
    <link href="http://flaviosilveira.com/2016/comece-com-docker/"/>
    <updated>2016-10-03T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/comece-com-docker</id>
    <content type="html"><![CDATA[<p>Tenho dois posts envolvendo <a href="https://www.vagrantup.com/">vagrant</a> aqui no blog que ainda são certo sucesso de acessos. <a href="http://flaviosilveira.com/2012/vagrant-facil-e-util">Vagrant Fácil e Útil</a> que dá uma introdução ao Vagrant com um exemplo simples e <a href="http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in/">Vagrant, PuPHPet E PHP Built In</a> que apresenta o PuPHPet como um facilitador para criar ambientes e um experimento com o PHP Built In. O primeiro artigo é de 2012, o segundo de 2013. Passados três anos e vendo a busca disso não diminuir, quero trazer para quem ainda não conhece o <a href="https://www.docker.com/">Docker</a>.</p>

<!--more-->


<h3>Containers VS Virtual Machines</h3>

<p>Muita coisa me anima no Vagrant: ser uma máquina virtual leve, poder deixar minha máquina limpa sem ter que instalar várias coisas, poder trabalhar com várias versões de software com facilidade, se aproximar bastante do ambiente de produção e poder experimentar sem medo.</p>

<p>Não vou entrar aqui na discussão filosófica sobre docker vs vagrant, quero apenas trazer uma alternativa a tudo que eu coloquei acima e, em um futuro, mostrar como o docker pode nos ajudar a experimentar ainda mais novas tecnologias.</p>

<p>Docker trabalha com containers, Vagrant com máquinas virtuais. Qual a diferença se você está começando com tudo isso? Não muita! Você pode pensar no container como uma máquina virtual se você está começando mas tenha em mente que todo o conceito e funcionamento é diferente. Ná prática você vai continuar com um mundo paralelo onde vai poder criar e experimentar suas coisas.</p>

<h3>O velho que é novo</h3>

<p>Containers já existem há algum tempo dentro da nossa área com o que chamavamos de Linux Containers ou LXC. O que aparece com o Docker agora é uma maneira mais fácil de trabalhar com tudo isso e um engajamento da comunidade e das empresas de software gigantesco, trazendo uma gama de várias ferramentas prontas em formato de imagens. Com isso não vamos perder muito tempo com configurações e testar e descobrir tecnologias fica mais fácil.</p>

<p>Marque na agenda para pesquisar sobre libvirt, LXC e a história por trás da criação do Docker na França. Vale a pena!</p>

<h3>Instalação e não só para Linux</h3>

<p>Diferente dos antigos, o docker trouxe maneiras de trabalharmos com containers em qualquer sistema operacional. A maneira como ele faz isso está sempre evoluindo a cada versão. Pesquise como está para o seu sistema operacional.</p>

<p>Eu não vou tratar aqui como instalar o Docker nem sua arquitetura básica, quero ir direto aos pontos mesmo que ainda ficando muito parecido com os primeiros passos da documentação oficial. A ideia é explicar as coisas um pouquinho diferente para quem não pegou da maneira que ficou lá e trazer umas maneiras diferentes de pensar.</p>

<h3>Hello World</h3>

<p>Cada um tem a sua maneira de aprender as coisas, sujiro muito que você descubra a sua. Eu gosto de Hello World, começar do ultra básico e ir evoluindo e tentando entender passo a passo. Vamos fazer juntos e já vou explicando algumas coisas.</p>

<p>O Hello World com docker fica da seguinte maneira. Rode:</p>

<pre><code>docker run hello-world
</code></pre>

<h4>Imagens</h4>

<p>O docker vai buscar uma imagem chamada hello-world. Imagens são a base dos containers, são como um cenário pronto que pode conter um sistema operacional e um conjunto de softwares por exemplo.</p>

<p>Você não tem a imagem localmente, então o docker vai fazer o download dela. Para algumas imagens você vai ver o docker fazendo vários downloads paralelos para deixar as coisas mais rápidas.</p>

<h4>Saída</h4>

<p>Uma vez que foi feito o download da imagem o docker vai subir o container e rodar o programa hello-world sozinho.</p>

<pre><code>Hello from Docker!
This message shows that your installation appears to be working correctly.
To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash
</code></pre>

<p>Se é isso que aparece para você, está feito! Tudo funcionando! O docker já te provoca a tentar algo mais ambicioso e é para esse caminho que vamos:</p>

<h3>CentOS</h3>

<p>A saída do Hello World te desafia a fazer um container Ubuntu. Como muita gente usa Ubuntu como máquina principal, pessoalmente sugiro tentar outra distro no container. Que tal CentOS?</p>

<pre><code>docker run -it centos bash
</code></pre>

<p>Novamente aqui o docker vai buscar por uma imagem, dessa vez do CentOS, se não tiver vai fazer download dela.</p>

<p>Novidades no comando:</p>

<ul>
<li>-i é o comando para interagir, vai manter o STDIN aberto.</li>
<li>-t é para alocar um TTY(Talk to you) que é um terminal.</li>
</ul>


<p>Com a imagem em mãos, o docker vai subir o container e executar o comando bash.</p>

<p>Note que a linha do seu terminal mudou e você deve estar dentro do container. Todo comando que você executar agora está sendo executado dentro do seu container com Ubuntu.</p>

<p>Experimente alguns comandos para comprovar. Por exemplo: <strong>yum</strong>.</p>

<h3>Attached</h3>

<p>Vamos sair do nosso container sem matar ele. Segure CTRL e pressione P e em sequida Q.
Você está de volta para sua máquina principal. Vamos ver os containers que temos rodando?</p>

<pre><code>docker ps
</code></pre>

<p>O comando ps vai nos mostrar os containers que estão rodando com um id, o processo que estão executando, quando foram criados, seu status, portas e nome do container.</p>

<p>Como não passamos nenhum nome para nosso container, o docker deu um de seus nomes padrão.</p>

<p>Vamos voltar para nosso container CentOS? Para isso vamos fazer o seguinte comando:</p>

<pre><code>docker attach [id ou nome do container]
</code></pre>

<p>Com o ID ou nome do container, você consegue voltar para ele, o que chamam de attach.</p>

<p>Pense no Attach como você dentro do container. O padrão quando se cria um container é attach, e foi isso que aconteceu quando passamos o comando run, entramos no container.</p>

<h3>Detach</h3>

<p>De dentro do container, digite exit. Isso vai matar o container e ele não vai existir mais. O mesmo vai acontecer se você fizer um CTRL+C por exemplo.</p>

<pre><code>docker ps -a
</code></pre>

<p>Com o comando acima, além de ver seus containers ativos (se houver) ele mostra também os containers inativos. Se você deu exit em seu container do CentOS, essa mensagem vai ser mostrada em status.</p>

<p>Agora vamos criar o container novamente, mas dessa vez passando uma opção detached, ou seja, vamos criar o container mas não vamos entrar nele. Vamos também dar um nome para nosso container</p>

<pre><code>docker run --name meu-centos -itd centos bash
</code></pre>

<p>Ao rodar docker ps você vê que seu container está rodando, com o comando <strong>bash</strong> e com o nome <strong>meu-centos</strong></p>

<p><strong>Nesse ponto faça o exercício de entrar e sair de containers, criar outros e etc. Use Attach e CTRL+P+Q</strong></p>

<h3>Exec</h3>

<p>As vezes precisamos apenas executar apenas um comando dentro de um container e entrar e sair dele seria muito chato e demorado. Para isso temos o Exec:</p>

<pre><code>docker exec meu-centos echo teste
</code></pre>

<p>Aqui o docker entrou no container, executou o comando <strong>echo teste</strong> em meu-centos e retornou a sua máquina.</p>

<h3>Comandos que você talvez precise</h3>

<pre><code>#Para listar as imagens que você tem: docker images
#Para remover containers: docker rm
#Para remover imagens: docker rmi
#Parar e reiniciar container: docker start / docker stop 
</code></pre>

<h3>Fechando</h3>

<p>Aqui fizemos os pequenos primeiros passos com containers. Muito parecido com o proposto pela documentação oficial.</p>

<p>Te convido a explorar o <a href="https://hub.docker.com/">DockerHUB</a> repositório oficial de imagens para criarmos containers. Procure ferramentas que você já trabalha, ferramentas que você quer experimentar, o uso de containers vai te ajudar a fazer testes rápidos e estudar qualquer coisa.</p>

<p>Com isso acredito que sua cabeça já começe a fervilhar de ideias de para onde podemos ir.
Me comprometo a evoluir esses exemplos aqui nas próximas semanas.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Drops of Life - Zero]]></title>
    <link href="http://flaviosilveira.com/2016/4-drops-of-life-0/"/>
    <updated>2016-09-26T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/4-drops-of-life-0</id>
    <content type="html"><![CDATA[<p>Reavaliando minha lista de metas para 2016, vejo que uma delas era <strong>Escrever mais</strong>. Olhando aqui no blog coloquei apenas 2 posts esse ano, o que não altera minha péssima métrica dos últimos 730 dias. Procurando mudar isso vou começar essa série que estou chamando de <strong>4 Drops of life</strong>, que no nosso português seria algo como <strong>4 gotas de vida</strong>.</p>

<p>4 drops of life, é uma série de artigos onde trago 4 pequenas coisas para sua vida quinzenalmente. Um pensamento, uma tecnologia, arte, alimentação, exercícios e etc. Pequenos hábitos em busca de mais produtividade, conhecimento e uma vida melhor. Lifehackings!</p>

<p>Vamos começar?</p>

<!--more-->


<h2>4 Drops of Life - Zero</h2>

<h3>1 - Música - Mercy Falls - Seventh Wonder</h3>

<p>Quero começar trazendo um tema de extrema importância na minha vida que é música.</p>

<p>Seventh Wonder é uma banda sueca que tem seu estilo no metal progressivo. Recentemente lançou um albúm ao vivo, o que acabou resgatando ela para mim. Nesse ao vivo, eles tocam na íntegra a peça Mercy Falls, um albúms deles de 2008 que conta a história de um casal que sofre um acidente de carro, deixando o marido em coma. Para quem gosta de coisas próximas de Dream Theater e Symphony X pode ser um prato cheio.</p>

<p>Caso ajude, é uma banda super do bem, as letras não falam de dêmonios nem nada assim. Recomendadíssimo!</p>

<h3>2 - Exercício físico pela manhã</h3>

<p>Há algumas semanas inclui na minha rotina uma academia as 6 da manhã. Isso mesmo! Acordar 5:30, ir para academia, fazer seu exercício e aí sim ir trabalhar. No meu caso me deu um ânimo extra, mas vontade da vida e um bom humor constante.</p>

<p>Quando chego para trabalhar já estou acordado a quase 3 horas, o que traz um outro olhar sobre as coisas, com muito menos preguiça e vontade de fazer acontecer.</p>

<p>O bem para o corpo que o exercício traz é uma consequência para mim.</p>

<h3>3 - Série - Wallander</h3>

<p>Novamente a Suécia aparece por aqui hoje, e agora com a série <a href="http://www.imdb.com/title/tt1178618/">Wallander</a>.</p>

<p>Essa série, que apesar de sueca tem diálogos em inglês, traz um detetive sem poderes especiais, de adivinhação ou qualquer coisa do tipo. É uma pessoa comum no seu dia de trabalho. Para mim é um ponto super interessante e crítico a outras séries do gênero onde do nada os crimes e mistérios são resolvidos. Aqui você consegue caminhar com o enredo e descobrir junto as peças para formar o quebra cabeça.</p>

<p>Os episódios são poucos, mas são grandes, quase um filme cada um. Disponível no Netflix atualmente. Aprecie com moderação!</p>

<h3>4 - Livro - Sêneca - Aprendendo a viver</h3>

<p>Deixo aqui uma recomendação de um livro de filosofia do Romano Sêneca. Ele tem uma conturbada história tentando ser mentor de Nero, sim, aquele que foi colocar fogo em Roma, o mesmo que posteriormente ordenaria que Sêneca se matasse.</p>

<p>Aprendendo a viver é um apanhado das cartas de Sêneca a Lucílio. São no total 124 cartas, onde 29 estão presentes nessa coletânia brasileira.</p>

<p>Algumas mensagens dele:</p>

<ul>
<li><p>Qualquer tempo que já passou pertençe a morte. Seja menos dependente do amanhã, e se lance ao presente. Enquanto adiamos, a vida se vai.</p></li>
<li><p>Um teto de palha abriga o homem tão bem quanto o de ouro.</p></li>
<li><p>Concede ao corpo apenas o que for suficiente para um bom estado de saúde. É necessário tratá-lo com severidade para que não desobedeça a mente.</p></li>
</ul>


<p>Os historiadores nunca descobriram quem foi Lucílio ao certo. Para alguns era um amigo fictício de Sêneca, para mim Lucílio somos todos nós.</p>

<p>Espero que tenham gostado da ideia e apreciado as dicas.
Quais as suas sugestões?</p>

<p>Até o próximo! Grande Abraço!</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perdeu a Tampa Do Seu Teclado Apple?]]></title>
    <link href="http://flaviosilveira.com/2016/perdeu-a-tampa-do-seu-teclado-apple/"/>
    <updated>2016-06-13T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/perdeu-a-tampa-do-seu-teclado-apple</id>
    <content type="html"><![CDATA[<p><img src="../../../../assets/uploads/2016/tampa_teclado.jpg" alt="Tampa teclado Apple" /></p>

<p>Iiii.. perdeu a tampa do seu teclado Apple, seu Magic Keyboard, (ou qualquer outro nome carinhoso que você tenha por ele aqui)? Não se desespere, seus problemas acabaram!</p>

<!--more-->


<p>A minha triste história começa ao descobrir que meus queridos gatos se aproveitaram do momento em que parei para trocar as pilhas do teclado e surrupiaram a tampa que fecha o mesmo.</p>

<p>Sem a tal peça como fazer? Dá para ver que algo tem que segurar as pilhas e ao mesmo tempo fechar o circuito. Mas o quê pode cumprir esse papel?</p>

<p><strong>O que não vai dar certo</strong></p>

<p>Você pode descartar de cara:</p>

<ul>
<li>Colocar uma moeda com durex</li>
<li>Ficar segurando com o dedo e digitando com a outra mão</li>
</ul>


<p>Sim, isso foi uma piada e agora com as brincadeiras cessadas, vamos para a verdade.</p>

<p><strong>Primeiras pesquisas</strong></p>

<p>As primeiras buscas recaem sobre uma nova peça. A mesma, o Mercado Livre nos oferece por atuais R$80 (Oitenta reais) no momento em que escrevo esse texto. Vários vendedores, o mesmo valor.</p>

<p>Buscando pela peça no EBay e sites similares, temos a peça por cerca de $7 (Sete dólares), deixando na sua cabeça apenas a dúvida de quanto tempo vai levar para chegar na sua casa, e, se chegar.</p>

<p><strong>Buscas mais profundas</strong></p>

<p>Um leque se abre quando você se acalma, aceita a besteira e começa a pesquisar mais alternativas.</p>

<p>Vi pessoas com soluções de peças como as abaixo:
<img src="../../assets/uploads/2016/tampa_teclado_1.png" alt="Alternativa 1" />
<img src="../../assets/uploads/2016/tampa_teclado_2.png" alt="Alternativa 2" /></p>

<p>Você pode consultar um material de construções mais próximo em busca de algo similar as imagens acima. Há peças de chuveiro, porcas e outras opções. Apenas tenha em mente que o que segura as pilhas terá de fechar o circuito, conduzir energia.</p>

<p><strong>Minha solução</strong></p>

<p>Nos posts que encontrei (<a href="https://pt.ifixit.com/Answers/View/48359/I+need+a+replacement+battery+cover">Discussão 1</a>, <a href="http://forums.macrumors.com/threads/lost-cap-to-battery-enclosure-apple-bluetooth-keyboard.1676579/">Discusão 2</a>) muito se fala de uma medida de 5/8" (cinco oitavos).
Com isso anotado sai a caça de um pafuso nessa medida, e para minha surpresa deu extremamente certo.</p>

<p>Encontrei um parafuso de aço, como o abaixo. A rosca dele encaixa certinho no teclado:</p>

<p><img src="../../assets/uploads/2016/piece.png" alt="Parafuso" /></p>

<p>Aqui o resultado:</p>

<p><img src="../../assets/uploads/2016/my-keyboard-1.png" alt="Meu Teclado" />
<img src="../../assets/uploads/2016/my-keyboard-2.png" alt="Meu Teclado 2" /></p>

<p>Você fica com um teclado funcionando por uma peça de no máximo R$2 (Dois reais), com um design arrojado a lá Frankenstein. No pior dos resultados, você pode usar essa solução enquanto sua peça está vindo de um EBay, Alibaba e etc.</p>

<p>O vendedor me deu a dica que para melhorar o resultado eu poderia procurar por um parafuso mosca ou um allen sem cabeça em uma loja mais especializada de parafusos. Como os da imagem abaixo:</p>

<p><img src="../../assets/uploads/2016/mosca.png" alt="Parafuso Mosca" /></p>

<p><strong>Final Feliz</strong></p>

<p>Após me verem felizes com o resultado de economia e funcionamento do teclado, meus gatos devolveram a peça original em troca de uma lata de atum.</p>

<p>Espero que esse post ajude outras pessoas com gatos psicopatas ou que simplesmente perderam essa tampa em uma mudança ou qualquer outro descuido.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Não Existem Pessoas Sem Tempo]]></title>
    <link href="http://flaviosilveira.com/2016/nao-existem-pessoas-sem-tempo/"/>
    <updated>2016-04-22T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/nao-existem-pessoas-sem-tempo</id>
    <content type="html"><![CDATA[<p>Você não é uma pessoa que não tem tempo, e sim uma pessoa que prioriza certas coisas, e outras não. Se você está priorizando coisas importantes, cabe a você entender o que melhor define essa palavra, quais seus objetivos de/com/pela vida e o que está lhe ajudando a alcançá-los.</p>

<!--more-->


<p>Meu último post nesse Blog foi em 17 de fevereiro de 2014. Estava eu sem tempo? Os vários filmes que vi ajudam a responder que, NÃO! E meu projeto Open Source, o <a href="http://jquerypriceformat.com/">JQuery Price Format</a> que não tem uma versão atualizada desde Janeiro do mesmo ano. Sem tempo? O movimento de translação não mudou muito, e o dia continua tendo 24 horas, então, NÃO.</p>

<p>O que fiz com minhas horas? Em uns momentos priorizei carreira, em outros priorizei casamento, em outros família, investimentos, em alguns a insanidade e em outras a saúde.</p>

<p>Se você tem algo que sabe que é importante, mas ainda usa a desculpa do tempo, sugiro que comece pequeno. Faça um teste e veja se é isso mesmo que você está buscando. Por exemplo: Você quer começar a fazer um exercício, mas &ldquo;não tem tempo&rdquo; para começar. Comece com 5 minutos. Isso mesmo, 5 minutos! 5 minutos não vão interferir na sua agenda e antes de vc pensar que correr 5 minutos não faz diferença para nada, se aquilo realmente criar valor para você, você já vai ter aumentado para 20 minutos, meia hora por dia. Se não criar valor, você tentou, viu que não é a sua e pode gastar seus 5 minutos em outro investimento.</p>

<p><em>Max Gunther</em> autor do livro <em>Os Axiomas de Zurique</em> diz: &ldquo;Tudo na vida é um investimento. Qualquer espécie de ganho você tem que arriscar, seja um bem material, dinheiro ou emocional&rdquo;. Então, não deixe de tentar se você está buscando ganhos.</p>

<p>Depois de ter tentado, você pode trocar o &ldquo;Não tenho tempo&rdquo; para um belo &ldquo;Estou priorizando outras coisas no momento&rdquo;.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evoluindo Seu Primeiro Jogo Em HTML5]]></title>
    <link href="http://flaviosilveira.com/2014/evoluindo-seu-primeiro-jogo-em-html5/"/>
    <updated>2014-02-17T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2014/evoluindo-seu-primeiro-jogo-em-html5</id>
    <content type="html"><![CDATA[<p>O post de hoje é uma continuação do anteriormente escrito Seu primeiro jogo em HTML5. O objetivo dessa continuação é aprender mais alguns conceitos de desenvolvimento de jogos e animar um pouco o nosso game que não estava lá essas coisas de divertido. Você acompanha a primeira parte no seguinte link <a href="http://flaviosilveira.com/2013/seu-primeiro-jogo-em-html5/" title="Seu primeiro jogo em HTML5 - Parte 1">http://flaviosilveira.com/2013/seu-primeiro-jogo-em-html5/</a>.</p>




<!--more-->




<p>Nessa continuação vamos adicionar um pouco de jogabilidade, variando a velocidade das bolas que caem e também seu tamanho e a sua pontuação.</p>




<p><strong>Objeto</strong><br/>
Estamos querendo tipos diferentes de bolas. Tamanhos diferente, velocidades diferentes, pontos diferentes. Ainda são bolas, mas cada uma de um jeito, certo?<br/>
Estamos falando então de uma mesma coisa, mas com características e comportamentos diferentes, concorda?</p>




<p>Vamos entrar aqui então com o conceito de programação orientada a objetos para resolver o problema.<br/>
Dependendo do seu nível em programação, esse pode ser um conceito novo e, se esse é o caso, você vai precisar fazer algumas pesquisas caso queira entender melhor alguns pontos. Se você não conhece Orientação a Objetos recomendo que pare a leitura aqui e pesquise á respeito e também como é aplicado na linguagem javaScript. Não é necessário um conhecimento profundo neste momento, dê aquela lida no conceito, faça um exemplos simples em um papel e volte a leitura do post. Caso você já entenda o suficiente desse conceito é seguir em frente.</p>




<p>Precisamos então programar algo que crie as bolas para a gente, uma fôrma das bolas, que é equivalente a uma classe em orientação a objetos. Em javaScript não temos classes propriamente ditas, tudo que precisamos fazer é uma função.</p>




<p>Pegue então o código que desenvolvemos no post anterior.<br/>
Antes da nossa função inicializar, vamos criar uma função chamada bola e dentro dela vamos colocar todas as variáveis iniciais referente a bola que estão hoje na função inicializar.<br/>
Veja como fica:</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
    {
                bolaDiametro = 10;
                bolaPosX = canvas.width / 2;
                bolaPosY = -10;
        velocidadeBola = 10;
        colisao = false;
    }
        
    function inicializar()
    {
        barraAltura = 15;
        barraLargura = 90;

        pontosJogador = 0;
        jogadorPosicaoX = (canvas.width - barraLargura) / 2;
        velocidadeJogador = 20;
                
        canvas = document.getElementById("canvas");
        context = canvas.getContext("2d");              
                
        document.addEventListener('keydown', keyDown);
                
        setInterval(gameLoop, 30);
    }
</pre>




<p>Dentro da função inicializar vamos criar a primeira bola e adicionar ela dentro de um array. Esse array vai guardar todas as bolas que estiverem em cena. Dessa maneira teremos controle sobre elas.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function inicializar()
    {
        …     
        var primeira = new bola()
        bolas = new Array(primeira);
        …
    }
</pre>




<p>Rodando o seu código nesse momento verá que está tudo como antes. A questão é que nesse ponto não estamos utilizando nenhum conceito novo. Tudo que foi feito foi adicionar o código de antes para uma função, e chamar ela. Nem estamos trabalhando com o array criado não é mesmo?</p>




<p>Vamos trocar a nossa função para ela realmente virar um objeto, com propriedades. Para isso adicione a palavra chave this a frente de todas as variáveis.<br/>
Essa palavra chave fará referência para aquela instância de objeto e apenas ela. Caso não entenda isso aqui, talvez você entenda melhor quando trabalharmos com o array das bolas que estão em cena.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
{
    this.bolaDiametro = 10;
    this.bolaPosX = canvas.width / 2;
    this.bolaPosY = -10;
    this.velocidadeBola = 10;
    this.colisao = false;
}
</pre>




<p>Neste momento o game para de funcionar. Isso porque as variáveis que temos dentro de nosso gameLoop já não existem mais. Temos agora um objeto bola e esse objeto adicionado a um array que é responsável por todas as bolas em cena. Precisamos trabalhar com esse array para as coisas voltarem a funcionar.</p>




<p>Para questão de organização, já que as variáveis que definiam as características da bola não nos servem mais, podemos limpar elas da nossa definição inicial na primeira linha de javaScript. Mas não esqueça de adicionar a variável para o nosso array de bolas, para que fique acessível para todo o resto do código. Ficando assim:</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, pontosJogador, bolas;
</pre>




<p>Agora vá até a função de gameLoop, e repare onde está a lógica da bola. Começa onde iniciamos com o desenho dela e termina com a verificação da colisão.<br/>
O que vamos fazer aqui é tirar tudo isso, e aplicar para cada objeto dentro do array bolas usando um foreach. Fica dessa forma:</p>




<pre class="brush: jscript; title: ; notranslate" title="">// Bola
bolas.forEach(function(bola, indice){
    context.beginPath();
    context.arc(b.bolaPosX, b.bolaPosY, b.bolaDiametro, 0, Math.PI * 2, true);
    context.fill();
                
    if(bola.bolaPosY &lt;= canvas.height)
    {
        bola.bolaPosY += bola.velocidadeBola;
    }
    else
    {
        bola.bolaPosX = Math.random() * 600;
        bola.bolaPosY = -10;
        bola.colisao = false;
    }
                
    // Checar Colisão
    if((bola.bolaPosX &gt; jogadorPosicaoX && bola.bolaPosX &lt; jogadorPosicaoX + barraLargura) && bola.bolaPosY &gt;= canvas.height - barraAltura && bola.colisao == false)
    {
        pontosJogador++;
        bola.colisao = true;
    }
});
</pre>




<p>Na função de forEach do javaScript o primeiro parâmetro é o elemento em si e o segundo o indíce.<br/>
Para cada objeto dentro do array, ele vai executar uma vez.<br/>
Note que agora nas variáveis com as características da bola de antes, adicionamos “b.”. É dessa maneira que acessamos as propriedades do objeto.<br/>
Tome cuidado para não adicionar isso nas variáveis do jogador nem do canvas.<br/>
Neste ponto se jogo volta a funcionar como antes, mas dessa vez usando bola com o conceito de orientação a objetos.</p>




<p><strong>Cada bola um Objeto</strong><br/>
Olhe o código e verá que quando a bola chega ao final do canvas ou quando ela colide com o jogador, não criamos uma nova, apenas editamos novamente as propriedades do mesmo objeto que foi criado da primeira vez. Vamos mudar isso alterando o if que checa se a bola já passou do canvas. Agora quando ela passar do canvas, vamos retirar ela do nosso array usando a função splice do javaScript.</p>




<pre class="brush: jscript; title: ; notranslate" title="">if(bola.bolaPosY &lt;= canvas.height)
    {
        bola.bolaPosY += bola.velocidadeBola;
    }
    else
    {
        bolas.splice(indice, 1);
    }
</pre>




<p>Tudo que estava dentro do else, que era usado para criar uma nova bola, não é mais necessário. Trocamos tudo isso pela função splice.<br/>
Splice irá retirar um item do array baseado em seu índice. O primeiro parâmetro é o índice que queremos tirar e o segundo é a quantidade de índices a partir dele, que para nós será sempre 1.</p>




<p>Rodando seu game agora, quando a bola passa pelo canvas, não é criado nenhuma nova.</p>




<p><strong>Criando uma nova bola</strong><br/>
Nosso foreach só é executado se tivermos bolas dentro dele. Como nossa primeira bola passou pelo canvas e foi destruída, vamos adicionar uma verificação antes do foreach para caso nosso array estiver vazio, criar uma nova bola dentro dele. Para isso vamos usar um push. Veja como fica:</p>




<pre class="brush: jscript; title: ; notranslate" title="">if(bolas.length &lt;= 0)
{
    bolas.push(new bola());
}
</pre>




<p>Certo, mas todas as bolas estão saindo no mesmo lugar. Dá para ganhar o jogo parado!<br/>
Isso está acontecendo por conta da posição X e Y estarem fixas dentro da criação do nosso objeto.<br/>
Vamos alterar isso com a ajuda da classe Math de javaScript.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
{
    this.bolaDiametro = 10;
    this.bolaPosX = Math.random() * 600;
    this.bolaPosY = -10;
    this.velocidadeBola = 10;
    this.colisao = false;
}
</pre>




<p>A posição Y da bola pode continuar sendo -10 para aparecer antes do canvas. Mas para deixar a posição X randômica, use Math.random multiplicando pela largura do seu canvas.</p>




<p>Use um pouco da matemática aqui para alterar também a velocidade de sua bola.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
{
    this.bolaDiametro = 10;
    this.bolaPosX = Math.random() * 600;
    this.bolaPosY = -10;
    this.velocidadeBola = Math.random() * (10 - 6) + 6;
    this.colisao = false;
}
</pre>




<p>No exemplo acima temos velocidades entre 10 e 6.<br/>
Acima você vê como obter um número randômico entre um mínimo e um máximo. Math.random multiplicado pelo máximo diminuindo o mínimo e somado ao mínimo.<br/>
Caso queira tentar entender o “truque” acima lembre-se que Math.random retorna um número entre 0 e 1.</p>




<p><strong>Diâmetros e pontos variados</strong><br/>
Para termos diâmetros variados e pontos baseados nesse diâmetro, vamos primeiro definir isso em um array, antes do nosso objeto bola.<br/>
Nesse array, criamos um objeto que tem um dâimetro e uma pontuação.</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, pontosJogador, bolas;
        
var diametros = new Array(
    {'diametro' : 7, 'pontos' : 1},
    {'diametro' : 10, 'pontos' : 2},
    {'diametro' : 15, 'pontos' : 3}
);
</pre>




<p>Com isso definido, vamos agora usar a mesma fórmula que usamos acima para pegar um número randômico que esteja dentro dos valores desse array. Lembrando que o array começa em 0, então vamos diminuir um ao final. Vamos armazenar esse número, e usar ele para o tamanho da bola e consequentemente sua pontuação. Veja como fica:</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
{
    var indice = Math.round(Math.random() * (3 - 1) + 1) - 1;
    this.bolaDiametro = diametros[indice]['diametro'];
    this.pontos = diametros[indice]['pontos'];
                
    this.bolaPosX = Math.random() * 600;
    this.bolaPosY = -10;
    this.velocidadeBola = Math.random() * (10 - 6) + 6;
    this.colisao = false;
}
</pre>




<p>Neste momento os tamanhos de bolas já aparecem diferentes na tela. Mas a pontuação continua somando 1 sempre.<br/>
Precisamos alterar nosso gameLoop para pegar os pontos do objeto em questão. Veja como:</p>




<pre class="brush: jscript; title: ; notranslate" title="">if((bola.bolaPosX &gt; jogadorPosicaoX && bola.bolaPosX &lt; jogadorPosicaoX + barraLargura) && bola.bolaPosY &gt;= canvas.height - barraAltura && bola.colisao == false)
{
    pontosJogador += bola.pontos;
    bola.colisao = true;
}
</pre>




<p>Trocamos o incrementar que tinha antes para um += que vai pegar o valor que já tinha na variável e somar o valor dos pontos daquela bola que colidiu.</p>




<p>Mais de uma ao mesmo tempo e tudo junto<br/>
Para finalizar, que tal deixar cair mais de uma bola ao mesmo tempo?</p>




<p>Para fazer isso de forma bem simples, adicione dentro do foreach um verificação para caso aquela bola já tenha passado da posição 50 em Y, criar uma nova.</p>




<pre class="brush: jscript; title: ; notranslate" title="">// Criar nova bola?
if(bola.bolaPosY &gt;= 50 && bolas.length &lt;= 2)
{
    bolas.push(new bola());
}
</pre>




<p>Cuidado! Veja no código acima que eu também verifiquei quantas bolas estão em cena antes de adicionar uma nova. Caso contrário você vai ter um efeito matrix em sua tela e travar seu navegador. Tente por sua conta e risco :).</p>




<p><strong>Conclusão</strong><br/>
Você pode aplicar o conceito de orientação a objetos para tudo o que for objeto na tela. Dessa maneira você vai ter um melhor controle das coisas e é a maneira correta de trabalhar em jogos.</p>




<p>Acompanhe o repositório gitHub dessa série em <a href="https://github.com/flaviosilveira/primeiro-jogo-html5" title="Git Hub - Seu primeiro jogo em HTML5">https://github.com/flaviosilveira/primeiro-jogo-html5</a>.</p>




<p>Aguarde o próximo post da série. Abraços!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erros No Vagrant No Mavericks OSX?]]></title>
    <link href="http://flaviosilveira.com/2014/erros-com-vagrant-no-mavericks-osx/"/>
    <updated>2014-01-17T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2014/erros-com-vagrant-no-mavericks-osx</id>
    <content type="html"><![CDATA[<p>Há algum tempo a Apple liberou a nova versão de seu sistema operacional, o Mavericks OSX. Se você usa Macs e Vagrant para desenvolvimento deve ter percebido que as coisas de repente não rodaram mais.</p>




<p>[Ainda não sabe o que é Vagrant? Confira esses meus dois posts: <a href="http://flaviosilveira.com/2012/vagrant-facil-e-util/" title="Vagrant fácil e útil">http://flaviosilveira.com/2012/vagrant-facil-e-util/</a> e <a href="http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in/" title="Vagrant, PuPHPet e PHP Built In">http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in/</a>]</p>




<!--more-->




<p>Correndo atrás do que estava acontecendo cheguei no post do Stu Miller <a href="http://www.stumiller.me/fixing-vagrant-osx-mavericks-update/" title="Stu Miller : Fixing Vagrant after an Mavericks Update">http://www.stumiller.me/fixing-vagrant-osx-mavericks-update/</a> que mostra os comandos para sair desse problema.</p>




<p>Porém você vai descobrir, seja lendo os comentários no blog do Stu ou na prática, que a cada vez que desligar seu Mac terá que executar esses comandos. Para diminuir um pouco o saco de ter que fazer isso sempre, criei um Shell Script que você pode colocar para rodar automaticamente quando sua máquina liga ou ao menos não ter que ficar lembrando quais eram os comandos.</p>




<p><a href="../../assets/uploads/fix-mavericks.sh" title="Fix Mavericks Shell Script">Faça o download aqui!</a></p>




<p>Execute-o com SUDO.<br/>
Você passa um primeiro parâmetro com o caminho da sua máquina virtual.<br/>
O segundo parâmetro é opcional, caso a sua versão do <em>VirtualBox</em> seja maior ou igual que 4.3 apenas passe um <em>true</em>.<br/>
Exemplo:</p>




<pre class="brush: bash; title: ; notranslate" title="">sudo ./fix-maverick.sh seu-diretorio true
</pre>




<p>O script não está a prova de balas, é apenas uma ajuda para resolver o problema.<br/>
Abrindo o script você vê um código bem simples, checando se o <em>vagrant</em> está instalado, se você executou o comando como SUDO e se o caminho passado é válido.</p>




<p>Qualquer sugestão é só enviar. Abraços!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seu Primeiro Jogo Em HTML5]]></title>
    <link href="http://flaviosilveira.com/2013/seu-primeiro-jogo-em-html5/"/>
    <updated>2013-09-19T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/seu-primeiro-jogo-em-html5</id>
    <content type="html"><![CDATA[<p>Hoje quero ajudar você a desenvolver seu primeiro jogo, que talvez não fique aquele delírio de diversão, mas é o primeiro passo para você começar a entrar nesse mundo de desenvolvimento de jogos. E para isso vamos usar tecnologias que você tem em mãos no seu navegador. HTML5 e javascript.</p>




<p>Vou passo a passo, tentando deixar claro o porque de algumas coisas primordiais em desenvolvimento de jogos. Cometendo erros para depois corrigi-los. Isso talvez torne o post um pouco extenso, então busque sua garrafa de água para manter seu cérebro hidratado.</p>




<!--more-->




<p>Para os sem saco, no final do post você tem um link para o código completo.</p>




<p><strong>O Jogo</strong><br/>
Eu havia pensado em desenvolver um <a href="http://en.wikipedia.org/wiki/Arkanoid">Arkanoid</a> para esse post, mas a criação e a lógica subiriam um pouco de nível e a intenção de começar devagar iria se perder. Então temos algo bem mais simples, bolas que caem do topo da tela e que você deve resgatá-las com a plataforma.<br/>
<img src="../../../assets/uploads/2013/09/Imagem1-300x240.png" alt="" title="Imagem1" width="300" height="240" class="alignnone size-medium wp-image-660" /><br style="clear:both;" /></p>




<p><strong>HTML</strong><br/>
Para montar o desenho da tela, o jogador e a bola, vamos usar a tag canvas. Ela está presente há algum tempo nos navegadores, tendo começado no Safari da Apple, mas ganhou mais popularidade recentemente com o HTML5.</p>




<p>Crie um arquivo HTML com qualquer nome e dentro dele crie um Canvas.</p>




<pre class="brush: xml; title: ; notranslate" title="">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Seu Primeiro Jogo - HTML5&lt;/title&gt;
    &lt;/head&gt;   
    &lt;body&gt;
        &lt;canvas id="canvas" width="600" height="480"&gt;
            Navegador não suporta HTML5
        &lt;/canvas&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>




<p>Usamos o Doctype do HTML5 junto com um título.<br/>
Dentro da tag body vemos o canvas, onde definimos uma largura e uma altura.</p>




<p>Carregando isso no navegador, não vemos nada. Mas não se preocupe, você não fez nada de errado. Vamos com ajuda de um CSS definir uma borda para nosso canvas, assim vamos ver ele na tela. Nosso head vai ficar como abaixo.</p>




<pre class="brush: xml; title: ; notranslate" title="">&lt;head&gt;
    &lt;title&gt;Seu Primeiro Jogo - HTML5&lt;/title&gt;
     &lt;style type="text/css"&gt;
    canvas {
        border: 1px solid #000000;
    }
     &lt;/style&gt;
&lt;/head&gt;  
</pre>




<p>Fique a vontade para alterar a cor, o tipo da borda ou o que mais quiser nesse CSS.</p>




<p>Nosso trabalho com HTML acaba aqui. Tudo o que vamos usar agora é JavaScript. Para isso vamos então chamar uma função javaScript quando o body estiver totalmente carregado, da seguinte maneira.</p>




<pre class="brush: xml; title: ; notranslate" title="">&lt;body onload="inicializar()"&gt;
</pre>




<p><strong>JavaScript</strong><br/>
Vamos criar nosso JavaScript no mesmo arquivo do HTML. Nosso intuito não é discutir arquitetura aqui. Vamos criar uma tag script logo depois de nosso canvas, e já vamos definir nossa função inicializar que chamamos acima.</p>




<pre class="brush: jscript; title: ; notranslate" title="">&lt;script type="text/javascript"&gt;
function inicializar()
{
 // Nosso código aqui
}
&lt;/script&gt;
</pre>




<p><strong>Jogador</strong><br/>
Vamos começar desenhando o jogador, que nada mais é do que uma barra.</p>




<p>Vamos iniciar algumas variáveis acima da nossa função. barraAltura e barraLargura.<br/>
Em seguida em nossa função inicializar setamos os valores desejados para elas.</p>




<p>Para desenhar com o canvas, precisamos capturar o elemento com javaScript e usar o contexto que no nosso caso vai ser 2D.</p>




<p>O método para desenhar retângulos com canvas é fillRect. Essa função nos pede a posição do elemento (pontos X e Y), sua largura e sua altura.</p>




<p>Como a posição X (horizontal) do jogador vai ficar mudando, vamos criar uma variável para isso também. Já a posição Y (vertical) como não vai mudar, podemos deixá-la fixa usando a altura do canvas menos o tamanho da barra.</p>




<p>Confira o código abaixo com as explicações acima:</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX;
        
function inicializar()
{
    barraAltura = 15;
    barraLargura = 90;

    jogadorPosicaoX = 0;

    canvas = document.getElementById("canvas");
    context = canvas.getContext("2d");

    context.fillRect(jogadorPosicaoX, canvas.height - barraAltura, barraLargura, barraAltura);
}
</pre>




<p>Resultado na tela:<br/>
<img src="../../../assets/uploads/2013/09/imagem2-300x240.png" alt="" title="imagem2" width="300" height="240" class="alignnone size-medium wp-image-659" /><br style="clear: both;" /></p>




<p>Nosso jogador não ficou centralizado, porque definimos sua posição X como 0, ou seja, o canto esquerdo do canvas.<br/>
Altere os valores de pouco em pouco para você perceber como o jogador irá se mover, isso também irá ajudar na lógica de colisão mais para frente. Entendido isso, vamos deixar nosso jogador centralizado, pegando o tamanho do canvas e dividindo por 2.</p>




<p>Ao atualizar seu browser e conferir o resultado nesse ponto não se preocupe, você não está com problema na vista. É necessário diminuir o tamanho da barra para que o jogador fique exatamente no centro do canvas. Ficando então da seguinte maneira.</p>




<pre class="brush: jscript; title: ; notranslate" title="">jogadorPosicaoX = (canvas.width - barraLargura) / 2;
</pre>




<p>Use os parênteses para fazer a subtração primeiro.</p>




<p><strong>Comandos do jogador</strong><br/>
É hora de dar vida ao jogador.<br/>
O que queremos é que quando for pressionado para a direita, para esquerda, a nossa barra obedeça isso.</p>




<p>Vamos deixar nosso javaScript de olho quando o jogador apertar alguma tecla com os Event Listeners do javaScript.</p>




<p>Então definimos a função desse listener. Aqui no meu notebook, o código das teclas para esquerda e para direita são respectivamente 37 e 39. Isso pode variar se você tem um tipo diferente de teclado ou ainda se quiser outras teclas de comando.</p>




<p>Vamos agora reposicionar o jogador de acordo com as teclas pressionadas.<br/>
Se apertar a tecla código 37, esquerda, diminuimos a posição do jogador. Se apertar a tecla código 39 vamos somar.</p>




<p>Mas vamos somar/diminuir quanto? Vamos definir uma variável para a velocidade do jogador, essa velocidade será a quantidade de pixels que o jogador se movimenta a cada vez que é pressionado as teclas. Voltando então, se pressionar para a direita somamos a velocidade do jogador, se pressionar para a esquerda diminuimos a velocidade do jogador.</p>




<p>Não esqueça de desenhar a barra novamente com a posição nova do jogador.</p>




<p>Confira o código abaixo:</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador;
        
function inicializar() ...
    velocidadeJogador = 20;
    ...
    document.addEventListener('keydown', keyDown);
}
            
function keyDown(e) 
{
    if(e.keyCode == 37)
    {
        jogadorPosicaoX -= velocidadeJogador;
    }
                
    if(e.keyCode == 39)
    {
        jogadorPosicaoX += velocidadeJogador;
    }

    context.fillRect(jogadorPosicaoX, canvas.height - barraAltura, barraLargura, barraAltura);
}
</pre>




<p>Atualizando nossa tela e apertando as teclas você vê o resultado.<br/>
<img src="../../../assets/uploads/2013/09/Imagem3-300x241.png" alt="" title="Imagem3" width="300" height="241" class="alignnone size-medium wp-image-658" /><br style="clear: both;" /></p>




<p>Percebe um problema? Temos dois na verdade, mas vamos um de cada vez.<br/>
O primeiro é que não estamos apagando a posição anterior do jogador. Estamos então tendo a sensação de que a barra está aumentando de tamanho.</p>




<p>Para resolver isso temos que entender um conceito no desenvolvimento de jogos que é o GameLoop.<br/>
Não vou entrar em detalhes á fundo, mas acompanhe.</p>




<p><strong>Game Loop &#8211; Explicação ultra simples</strong><br/>
Um jogo não passa de um loop infinito. Se você perde, você volta ao começo.<br/>
Então pense em um loop que contêm algumas verificações dentro dele que serão os comandos do jogador, pontuação e etc.</p>




<p>Durante esse loop, os inimigos, o jogador e outras coisas na tela irão mudar de posição o tempo todo.<br/>
Mas você deve apagar a posição anterior caso contrário vai ficar um efeito como o que estamos tendo.</p>




<p>Então vamos apagar tudo da tela e fazer aparecer novamente. Ok!<br/>
Mas isso não pode ser visível ao jogador, a tela não pode parecer que está piscando.<br/>
Então vamos definir um tempo, um certo número de frames que não permita que o jogador perceba isso.</p>




<p>Então vamos re-estruturar nosso código, pensando nesse conceito.</p>




<p>No topo temos a definição das variáveis.</p>




<p>Em seguida na função inicializar, vamos deixar apenas o valor inicial das variável e o listener, e de dentro dela chamar o gameLoop.<br/>
Para o loop, vamos usar setInterval e chamar nossa função a cada 30 milisegundos.<br/>
Ficando assim:</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador;
        
function inicializar()
{
    barraAltura = 15;
    barraLargura = 90;

    jogadorPosicaoX = (canvas.width - barraLargura) / 2;
    velocidadeJogador = 20;

    canvas = document.getElementById("canvas");
    context = canvas.getContext("2d");              

    document.addEventListener('keydown', keyDown);

    setInterval(gameLoop, 30);
}
</pre>




<p>Seguimos o código com a função keyDown que fizemos acima, mas já vamos resolver nosso segundo problema que não comentei anteriormente. O jogador não pode continuar indo para a direita ou para esquerda se ele chegar aos limites do canvas. Então adicionamos algumas verificações para isso. Repare também que não vamos mais redesenhar a tela a partir dessa função.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function keyDown(e) 
{
    if(e.keyCode == 37)
    {
        if(jogadorPosicaoX &gt; 0)
        {
            jogadorPosicaoX -= velocidadeJogador;
        }
    }

    if(e.keyCode == 39)
    {
        if(jogadorPosicaoX &lt; (canvas.width - barraLargura))
        {
            jogadorPosicaoX += velocidadeJogador;
        }
    }
}
</pre>




<p>Por último nosso gameLoop. Ele contém uma função que desenha um retângulo em branco em cima de toda a área do canvas.<br/>
Isso limpa a nossa tela. E em seguida redesenhamos nosso jogador.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function gameLoop()
{
    context.clearRect(0, 0, canvas.width, canvas.height);

    context.fillRect(jogadorPosicaoX, canvas.height - barraAltura, barraLargura, barraAltura);
}
Recarregue sua tela e se divirta movimentando a barra.

&lt;strong&gt;Bola&lt;/strong&gt;
Vamos primeiro desenhar uma bola parada no topo da tela.
Vamos definir algumas configurações para ela. Diâmetro, posição X, posição Y e sua velocidade.
1
var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, bolaDiametro, bolaPosX, bolaPosY, velocidadeBola;
        
function inicializar()
{
    ...
    bolaDiametro = 10;
    bolaPosX = canvas.width / 2;
    bolaPosY = 0;
    velocidadeBola = 10;
    ...
}
</pre>




<p>Para desenhar a bola, adicione as seguintes linhas dentro de gameLoop.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function gameLoop()
{
    ...
    context.beginPath();
    context.arc(bolaPosX, bolaPosY, bolaDiametro, 0, Math.PI * 2, true);
    context.fill();
    ...
}
</pre>




<p>Procure pesquisar some a função de desenho do arco que usamos acima. Foge do mérito desse artigo explicá-la.</p>




<p>Como resultado você deve ver metade da bola desenhada no topo do canvas. Como abaixo:<br/>
<img src="../../../assets/uploads/2013/09/Imagem4-300x240.png" alt="" title="Imagem4" width="300" height="240" class="alignnone size-medium wp-image-657" /><br style="clear: both;" /></p>




<p>Vemos metade dela pois ela é desenhada a partir do centro, como setamos Y para 0, a outra metade está acima do canvas.<br/>
Sendo desenhada do centro, não precisamos diminuir seu diâmetro para centralizar ela na tela, bastou dividir por 2 o eixo X.</p>




<p><strong>Movimentando a bola</strong><br/>
Bom, não queremos que a bola inicia com metade aparecendo, melhor que isso queremos que ela venha antes do canvas.<br/>
Você pode setar o valor de bolaPosY para -10 para que isso aconteça.</p>




<pre class="brush: jscript; title: ; notranslate" title="">...
    bolaPosY = -10;
    ...
</pre>




<p>Agora vamos movimentar ela como se estivesse caindo, no eixo Y.<br/>
Simples não? Basta a cada gameLoop diminuir a velocidade da bola.</p>




<p>Mas veja que isso só pode acontecer se a posição Y da bola for menor que a altura do canvas, caso contrário a bola vai descer até o infinito.</p>




<p>E já que a bola chegou ao fim do canvas, que tal iniciar outra lá no topo?</p>




<p>Acompanhe isso no trecho abaixo:</p>




<pre class="brush: jscript; title: ; notranslate" title="">...
if(bolaPosY &lt;= canvas.height)
{
    bolaPosY += velocidadeBola;
}
else
{
    bolaPosY = -10;
}
...
</pre>




<p>Legal! Mas o jogo já não é muito divertido, se a bola ficar caindo sempre no mesmo lugar então.<br/>
Vamos adicionar um cálculo para fazer a posição X da bola variar cada vez que é criada uma nova.<br/>
Basta reformular o nosso else acima.</p>




<pre class="brush: jscript; title: ; notranslate" title="">...
else
{
    bolaPosX = Math.random() * 600;
    bolaPosY = -10;
}
...
</pre>




<p>Você já pode ir treinando para o game final agora.</p>




<p><strong>Colisão</strong><br/>
Chegou a hora de checar se a bola colide com a barra e com isso marcar pontos para você.</p>




<p>Vamos definir uma variável pontosJogador. Não esqueça de iniciá-la como zero dentro da função inicializar.</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, bolaDiametro, bolaPosX, bolaPosY, velocidadeBola, pontosJogador;

function inicializar()
{
    ...
    pontosJogador = 0;
    ...
}
</pre>




<p>Em seguida vamos pensar na matemática da colisão.<br/>
Temos que fazer um cálculo que coloque a bola em cima da barra.<br/>
Então primeiramente, a posição X da bola tem de ser maior que a posição X da barra.<br/>
Mas também essa posição X da bola tem de ser menor que a posição X da barra + o tamanho dela.<br/>
Lembrando que na barra, sua posição X é o início dela, no canto esquerdo, por isso somamos a sua largura.</p>




<p>Não podemos bater apenas o ponto X. O eixo Y da bola tem de ser maior ou igual que a altura do canvas menos a altura da barra.</p>




<p>Dentro do IF da colisão incrementamos os pontos do jogador.</p>




<p>Em seguida temos um código para escrever a pontuação na tela.</p>




<p>Confira o código abaixo com a explicação acima:</p>




<pre class="brush: jscript; title: ; notranslate" title="">if((bolaPosX &gt; jogadorPosicaoX && bolaPosX &lt; jogadorPosicaoX + barraWidth) && bolaPosY &gt;= canvas.height - barraHeight)
{
    pontosJogador++;
}

context.font = "32pt Tahoma";
context.fillText(pontosJogador, canvas.width - 70, 50);
</pre>




<p>Hora de rodar o seu jogo!<br/>
<img src="../../../assets/uploads/2013/09/Imagem5-300x241.png" alt="" title="Imagem5" width="300" height="241" class="alignnone size-medium wp-image-656" /><br style="clear: both;" /></p>




<p>Mas espere! Isso não é basquete e a cada bola que pegamos estamos fazendo 3 pontos ou mais.<br/>
Porque isso está acontecendo?</p>




<p>Ah, simples! Como refazemos a tela a cada 30 milesegundos, a bola leva muito mais tempo que isso para passar pela barra. Então ela está caindo no IF de colisão mais de uma vez.</p>




<p>Para resolver isso vamos adicionar uma flag dizendo se colidiu ou não.<br/>
Vamos primeiro definir essa variável, em seguida inicializar ela como false.</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, bolaDiametro, bolaPosX, bolaPosY, velocidadeBola, pontosJogador, colisao;

function inicializar()
{
    ...
    colisao = false;
    ...
}
</pre>




<p>Agora no IF onde checamos a colisão, mudamos o valor para true quando colidir, e antes de checar se colidiu verificamos se esse status ainda é false.</p>




<pre class="brush: jscript; title: ; notranslate" title="">if((bolaPosX &gt; jogadorPosicaoX && bolaPosX &lt; jogadorPosicaoX + barraLargura) && bolaPosY &gt;= canvas.height - barraAltura && colisao == false)
{
    pontosJogador++;
    colisao = true;
}
</pre>




<p>Por último, se uma bola nova começa a cair ela tem de vir com esse status como falso.<br/>
Lembra do nosso else que cria uma nova bola no eixo X?</p>




<pre class="brush: jscript; title: ; notranslate" title="">...
else
{
    bolaPosX = Math.random() * 600;
    bolaPosY = -10;
    colisao = false;
}
...
</pre>




<p>Feito! Hora de chamar os amigos e iniciar um campeonato.</p>




<p><strong>Conclusão</strong><br/>
Estude alterando as variáveis como velocidade do jogador, velocidade da bola e etc.<br/>
A partir daqui pode surgir muita coisa. Quem sabe não continuamos desenvolvendo esse jogo em um próximo post?</p>




<p>Código completo aqui: <a href="https://github.com/flaviosilveira/primeiro-jogo-html5">https://github.com/flaviosilveira/primeiro-jogo-html5</a></p>




<p>Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant, PuPHPet E PHP Built In]]></title>
    <link href="http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in/"/>
    <updated>2013-09-15T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in</id>
    <content type="html"><![CDATA[<p>Fala pessoal.<br/>
Hoje trago uma dica simples, talvez sem uma utilidade de pronto, mas que pode ser interessante para algum estudo.</p>




<p><strong>O que é Vagrant?</strong><br/>
Para quem ainda não conhece, Vagrant é uma ferramenta que vem revolucionando os ambientes de desenvolvimento.<br/>
Se você ainda não sabe nada sobre essa ferramenta, confira o post que escrevi aqui no blog: <a href="http://flaviosilveira.com/2012/vagrant-facil-e-util/">http://flaviosilveira.com/2012/vagrant-facil-e-util/</a>.</p>




<!--more-->




<p>Alguns pontos do Vagrant:<br/>
&#8211; Com o Vagrant você não precisa instalar apache e outras ferramentas e poluir sua máquina.<br/>
&#8211; Você pode criar uma máquina virtual para cada projeto e com isso ter uma versão igual ao seu servidor de produção, com a mesma versão de PHP, de MySQL e etc.<br/>
Com isso acaba aquela desculpa de &#8220;Na minha máquina funciona!&#8221;.<br/>
&#8211; Com o Vagrant você pode distribuir o mesmo ambiente para todo seu time de desenvolvimento, evitando funcionamentos diferentes entre pessoas do mesmo time.<br/>
&#8211; Muito mais.</p>




<p><strong>PuPHPet: Arquivos puppet</strong><br/>
Com arquivos puppet (.pp) você pode definir pacotes, programas e extensões a serem instaladas na sua máquina virtual.<br/>
Geralmente são coisas complicadas e sempre acaba surgindo um problema quando são feitos esses arquivos na mão.</p>




<p>Felizmente surge o PuPHPet <a href="https://puphpet.com/">https://puphpet.com/</a>, uma ferramenta online que cria o puppet para você. Você seleciona tudo o que você quer, incluindo pacotes PEAR, pacotes PECL, etc.<br/>
Permite também setar o XDebug, timezone, escolher versão do PHP, do MySQL, incluir o composer, muito mais.</p>




<p>Dê uma atenção especial na opção BOX IP Address. Nesse campo você define o ip da sua máquina virtual.<br/>
É esse IP que você vai digitar no browser da sua máquina e acessar o seu projeto.<br/>
Por padrão o PuPHPet traz o IP 192.168.56.101.</p>




<p><strong>O que é PHP Built In?</strong><br/>
Com a versão 5.4, o PHP trouxe uma novidade para os ambientes de desenvolvimento. O PHP Buitl In.<br/>
É um web server rodando direto em cima do PHP, mas apenas com propósitos de desenvolvimento.<br/>
Com um simples comando você define a porta da onde quer rodar o servidor, e pronto. Sem precisar de Apache, NGinx ou o que for.<br/>
Uma coisa rápida para testar seu projeto. Veja detalhes na documentação: <a href="http://www.php.net/manual/pt_BR/features.commandline.webserver.php">http://www.php.net/manual/pt_BR/features.commandline.webserver.php</a></p>




<p><strong>Mãos a Obra</strong><br/>
Instale a versão mais recente do Vagrant acessando a página de downloads em <a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a>.<br/>
Uma dica é ter instalado o Virtual Box para que tudo corra bem. A instalação não tem segredos.</p>




<p>Um segundo passo é configurar a sua máquina com a ajuda do PuPHPet <a href="https://puphpet.com/">https://puphpet.com/</a>.<br/>
Escolha no mínimo uma versão 5.4 do PHP. Faça o download do arquivo e posicione onde melhor julgar na sua máquina.</p>




<p>Via console, acesse essa pasta e vamos subir a sua máquina virtual com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant up
</pre>




<p>Esse comando irá fazer o download de tudo que você selecionou de configuração via PuPHPet e deixar a máquina online para você.<br/>
Ao final da configuração, você já é capaz de acessar a sua máquina via porta 80 por exemplo, digite em seu navegador o ip que foi setado no campo BOX IP Address no PuPHPet.</p>




<p>Mas que tal testar essa funcionalidade que veio com o PHP 5.4? Vamos colocar o PHP Built In para rodar.<br/>
Vamos acessar sua máquina virtual via ssh, com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant ssh
</pre>




<p>Caso você precise do root para qualquer coisa, basta colocar um sudo na frente do que precisar.</p>




<p>Vamos configurar um pequeno projeto PHP apenas para ocasião de teste. Por exemplo:</p>




<pre class="brush: bash; title: ; notranslate" title="">cd /var/www
mkdir teste
cd teste
</pre>




<p>Dentro dessa pasta teste que criamos, crie um arquivo PHP simples, com um echo por exemplo.</p>




<p>Você será capaz de acessar isso digitando seu BOX IP/teste, mas, para testar o PHP Built In, entre com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">sudo php -S 192.168.56.101:8080
</pre>




<p>Não esqueça de substituir 192.168.56.101 pelo seu BOX IP.<br/>
8080 é a porta que escolhemos aqui. Você pode definir a porta que quiser, com exceção das que já estão em uso.<br/>
** Qualquer comando executado nessa mesma janela, ou um ctrl+c irá derrubar o server.</p>




<p>Pronto, o PHP Built In está escutando na porta definida.<br/>
Você pode conferir isso abrindo um outro terminal e consultando os listenings com o comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">netstat -ln
</pre>




<p>Lembrando que esse comando pode variar de acordo com a distribuição que você selecionou na sua BOX.</p>




<p>Pronto. Você pode acessar do seu browser o seu BOX IP:PORTA e acessar o seu projeto diretamente, sem barras nem nada.<br/>
Aqui eu acessei <a href="http://192.168.56.101:8080/.">http://192.168.56.101:8080/.</a></p>




<p><strong>Resumindo</strong><br/>
Escrevi esse post apenas como curiosidade. Sei que ele pode não ter nenhuma aplicação prática, mas de repente é uma para o pessoal conhecer o PHP Built In e ver até onde ele vai e porque ele está apenas disponível para desenvolvimento.</p>




<p>Grande Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C: A Linguagem Por Trás Do iOS – Parte 2]]></title>
    <link href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-2/"/>
    <updated>2013-04-13T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-2</id>
    <content type="html"><![CDATA[<p>[Este artigo faz parte de uma série de artigos para desenvolvimento IPhone, IPad e iOS.<br/>
<span style="line-height: 1.6em;">Você pode ver os demais artigos da série através da categoria Mobile]</span></p>




<p><span style="line-height: 1.6em;">Nessa parte 2 vamos continuar dando os primeiros passos e criando os primeiros exemplos com a linguagem Objective-C. Como discutido no primeiro artigo, essa linguagem veio evoluindo mas ainda mantém a linguagem C por trás dela, e é com isso que estamos criando nossos primeiros exemplos.</span></p>




<!--more-->




<p><span style="line-height: 1.6em;">[Acompanhe a primeira parte desse artigo em </span><a style="line-height: 1.6em;" href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/"><a href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/">http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/</a></a><span style="line-height: 1.6em;">]</span></p>




<p><strong style="line-height: 1.6em;">Lição de casa da parte 1<br /> </strong><span style="line-height: 1.6em;">No primeiro artigo deixei uma Lição de Casa que na verdade era uma pegadinha. Imprimir uma variável do tipo Boleana com o printf. Rapidamente o pessoal sacou e colocou nos comentários de que isso não existe. O </span><em style="line-height: 1.6em;">Boolean</em><span style="line-height: 1.6em;"> ou </span><em style="line-height: 1.6em;">Bool</em><span style="line-height: 1.6em;">, aparece em linguagens mais modernas. Para utilizar isso com C, fazemos uma simulação usando por exemplo um inteiro (0 e 1) ou também definindo um tipo qualquer e usando </span><em style="line-height: 1.6em;">enum</em><span style="line-height: 1.6em;">.</span></p>




<p><span style="line-height: 1.6em;">Hoje vamos Criar algumas condicionais e alguns loops.<br /> </span><span style="line-height: 1.6em;">Não tem novidade para quem já programa em outras linguagens, basta checar a sintaxe.<br /> </span><span style="line-height: 1.6em;">Mas caso você não se encaixe nesse grupo, siga o artigo.</span></p>




<p><span style="line-height: 1.6em;">Caso não lembre onde testar o seu código, que arquivo estamos mexendo e etc, consulte a parte 1!</span></p>




<p><strong style="line-height: 1.6em;">IF<br /> </strong><span style="line-height: 1.6em;">O IF não é segredo. Traduzindo do inglês = SE.<br /> </span><span style="line-height: 1.6em;">Se a condição bater, executa o código entre as chaves. Veja o exemplo:<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 5;
if(valor &lt; 10)
{
    printf("Menor que dez!");
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Definimos um variável inteira com valor 5. Se o valor for menor que 10, o printf é executado, caso contrário esse trecho é ignorado. </span><span style="line-height: 1.6em;">Simples não?</span></p>




<p><span style="line-height: 1.6em;">Para fazer comparações com a variável de valor, você pode usar no lugar do menor:<br /> </span><em style="line-height: 1.6em;">> Maior<br /> </em><em style="line-height: 1.6em;">&lt;= Menor ou Igual<br /> </em><em style="line-height: 1.6em;">>= Maior ou Igual<br /> </em><em style="line-height: 1.6em;">== Igual<br /> </em><em style="line-height: 1.6em;">!= Diferente</em></p>




<p><strong style="line-height: 1.6em;">ELSE<br /> </strong><span style="line-height: 1.6em;">Para os casos onde você quer executar algo quando o IF não bater, temos o ELSE. Traduzindo SENÃO.<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 15;
if(valor &lt; 10)
{
    printf("Menor que dez!");
}
else
{
    printf("Maior que dez!");
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Alteramos o valor da variável para 15. Em seguida adicionamos um ELSE.<br /> </span><span style="line-height: 1.6em;">Como valor é Maior que 10, esse trecho é pulado e o que está dentro das chaves do ELSE é executado.</span></p>




<p><strong style="line-height: 1.6em;">Combinando IFs e ELSEs<br /> </strong><span style="line-height: 1.6em;">Você pode combinar o If com o Else quantas vezes quiser, como no seguinte exemplo:<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 7;
if(valor == 7)
{
    printf("Valor Igual 7");
}
else if(valor &lt; 10)
{
    printf("Um numero menor que dez!");
}
else
{
    printf("Um numero maior que dez!");
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Alteramos a variável para 7, o que faz ela cair no primeiro IF. Caso contrário o código iria passando até bater com uma das condicionais. </span><span style="line-height: 1.6em;">Caso não bata com nenhum das condições ela cai no último ELSE. Lembrando que esse ELSE final não é obrigatório.</span></p>




<p><strong style="line-height: 1.6em;">SWITCH<br /> </strong><span style="line-height: 1.6em;">É recomendado evitar o uso de muitas combinações de IF e ELSE, para ficar mais fácil de manter o código ou até para entendimento do mesmo. </span><span style="line-height: 1.6em;">Veja o exemplo:</span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 16;
    
switch (valor) 
{
    case 7:
        printf("Sete!");
    break;
        
    case 9:
        printf("Nove!");
    break;    
        
    case 16:
        printf("Dezesseis!");
    break;    
        
    case 10:
        printf("Dez!");
    break;    
            
    default:
        printf("Outro!");
    break;
}
</pre>




<p><span style="line-height: 1.6em;">Entramos com o valor a ser analisado dentro do Switch.<br /> </span><span style="line-height: 1.6em;">Então usando o Case, entramos com as condicionais.<br /> </span><span style="line-height: 1.6em;">Caso não bata com nenhuma, temos a opção </span><em style="line-height: 1.6em;">DEFAULT</em><span style="line-height: 1.6em;">.</span></p>




<p><strong style="line-height: 1.6em;">FOR<br /> </strong><span style="line-height: 1.6em;">Quando temos a necessidade de executar uma ação várias vezes ou iterar um valor, surgem para nós os Loops.<br /> </span><span style="line-height: 1.6em;">E o FOR é um dos primeiros que encontramos.<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">for(int i = 0; i &lt;= 10; i++)
{
    printf("Valor de i: %d", i);
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Para entender o FOR, leia da seguinte maneira. i é igual a 0, enquanto i é menor ou igual que 10, vá aumentando i.</span></p>




<p><span style="line-height: 1.6em;">Esse i++, significa que estamos somando 1 ao valor de i, chamamos isso de incremento. Teremos mais detalhes sobre isso em próximos artigos.</span></p>




<p><span style="line-height: 1.6em;">Está é a maneira mais simples do FOR. Temos outros variações, mais complexas, com mais, com menos parâmetros.<br /> </span><span style="line-height: 1.6em;">Mas se você está começando fique com essa por enquanto.</span></p>




<p><strong style="line-height: 1.6em;">WHILE<br /> </strong><span style="line-height: 1.6em;">While, que traduzindo significa enquanto, é uma outra opção de loop. Veja o exemplo:<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int i = 0;
while (i &lt;= 10) 
{
    printf("Valor de i: %d", i);
    i++;
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Seguindo a mesma ideia do FOR, definimos o valor de i, mas dessa vez for da função. Enquanto i for menor igual que 10, o que temos dentro das chaves do while será executado.</span></p>




<p><span style="line-height: 1.6em;">Cuidado! Não esqueça de somar 1 ao valor de i cada vez que passarmos dentro do while.<br /> </span><span style="line-height: 1.6em;">Caso contrário teremos um loop infinito, e isso irá exceder o limite de memória e te causar problemas.</span></p>




<p><span style="line-height: 1.6em;">No exemplo acima, se i fosse por exemplo 15, o </span><em style="line-height: 1.6em;">WHILE</em><span style="line-height: 1.6em;"> não seria executado nenhuma vez.</span></p>




<p>Há situações onde precisamos executar ao menos uma vez o loop, mesmo que o valor não bata. Para essas situações temos o <em>DO WHILE</em>.</p>




<p><strong>DO WHILE<br/>
</strong></p>




<pre class="brush: cpp; title: ; notranslate" title="">int i = 15;
    
do 
{
    printf("Valor de i: %d", i);
    i++;
}
while (i &lt;= 10); 
</pre>




<p>O código é executado uma vez, independente se o valor bate com a condicional ou não.</p>




<p>No exemplo acima, como o valor está setado para 15, ele já não bate com nosso <em>WHILE</em> que pede um número menor igual a 10. Mesmo assim o código é executado uma vez, por conta do <em>DO</em>, traduzindo <em>FAÇA</em>.<span style="line-height: 1.6em;"> </span></p>




<p><strong>Resumindo<br/>
</strong><span style="line-height: 1.6em;">Os exemplos são bem simples e ainda não refletem exemplos muito reais. São exemplos fáceis de entender para que venham no futuro encaixar em problemas que você vai encontrar. </span></p>




<p>Pratique, mude valores das variáveis, faça seus exemplos, crie outras situações.<br/>
Esse é o caminho nesse estágio.</p>




<p>Até o próximo!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Montando a Tela Do Seu Aplicativo – Parte 1]]></title>
    <link href="http://flaviosilveira.com/2013/montando-a-tela-do-seu-aplicativo-parte-1/"/>
    <updated>2013-03-06T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/montando-a-tela-do-seu-aplicativo-parte-1</id>
    <content type="html"><![CDATA[<p><span style="line-height: 1.6em;">[Este artigo faz parte de uma série de artigos para desenvolvimento IPhone, IPad e iOS. Você pode ver os demais artigos da série através da categoria Mobile]</span></p>




<p>No artigo de hoje vamos conhecer alguns objetos para nos ajudar a criar a tela de nossos aplicativos para iOS. Para conhecer eles vamos usar o projeto que criamos nos artigos anteriores. É um projeto simples do tipo <em>Single View Application</em>, que ainda não tem nada demais, já que estamos apenas conhecendo algumas coisas. Então nada impede que você crie outro projeto do tipo <em>Single View Application</em>.</p>




<!--more-->




<p><strong>Interface Builder</strong></p>




<p>Como explicado no primeiro artigo, temos na estrutura que o XCode cria para nós arquivos do tipo StoryBoard. Como criamos nosso projeto com a opção <em>Universal</em> temos um StoryBoard para IPhone e outro para IPad, como mostra a imagem abaixo.<br/>
<span style="line-height: 1.6em;"><img class="size-full wp-image-633 alignleft" title="Estrutura do projeto" src="../../assets/uploads/2013/03/Imagem-1.png" alt="" width="296" height="115" /><br style="clear: both;" /></span><span style="line-height: 1.6em;">Ao clicar em um desses arquivos você visualiza o Interface Builder.</span></p>




<p>Vejamos por exemplo o arquivo <em>MainStoryboard_IPhone.storyboard</em>:<br/>
<span style="line-height: 1.6em;"><img class="alignnone size-large wp-image-634" title="Imagem 2" src="../../assets/uploads/2013/03/Imagem-2-1024x606.png" alt="" width="655" height="387" /></span><span style="line-height: 1.6em;">Uma pequena curiosidade aqui. As atuais versões do XCode trazem o Interface Builder acoplado ao XCode, tudo na mesma ferramenta. Em versões anteriores você tinha uma aplicação separada para isso, assim como o IPhone Simulator por exemplo. </span></p>




<p><span style="line-height: 1.6em;">Descrevendo rapidamente as janelas da imagem temos:</span></p>




<p>No canto esquerdo superior a Document Outline onde está aparecendo nossa<em>View Controller Scene</em>. É onde irá conter todos os elementos e objetos da nossa cena, da nossa tela.<br/>
<img class="size-full wp-image-631 alignleft" title="Imagem3" src="../../assets/uploads/2013/03/Imagem3.png" alt="" width="268" height="159" /><br style="clear: both;" /><br style="clear: both;" /></p>




<p>No canto direito superior é onde irão aparecer os utilitários. Nesses utilitários poderemos alterar tamanhos, identificadores, conexões com funções entre outros. Você pode navegar entre os botões para encontrar essas opções.<br/>
<img class="size-full wp-image-632 alignleft" title="Imagem4" src="../../assets/uploads/2013/03/Imagem4.png" alt="" width="241" height="198" /><br style="clear: both;" /><br style="clear: both;" /></p>




<p>Logo abaixo temos nossa Library de objetos, que é onde estão os objetos que vamos usar para montar nossas telas.<br/>
<span style="line-height: 1.6em;"><img class="size-full wp-image-629 alignleft" title="Imagem 5" src="../../assets/uploads/2013/03/Imagem-5.png" alt="" width="257" height="247" /><br style="clear: both;" /></span><span style="line-height: 1.6em;">Repare que temos uma caixa de busca logo no rodapé. Ela vai nos ajudar a encontrar mais rápido o que queremos sem que precisar ficar rolando e rolando com o mouse em busca de algo. Caso você navegue pelos botões que aparecem em cima, você irá para outras libraries que aparecem no XCode, mas não vamos usar nenhuma delas tão cedo então não se preocupe agora.</span></p>




<p>Resumindo então:</p>




<ul>
<li><span style="line-height: 1.6em;">Document outline: Mostra os objetos da nossa cena</span></li>
<li><span style="line-height: 1.6em;">Utilitários: Onde vamos alterar propiedades, características, identificadores, alinhamentos, etc…</span></li>
<li><span style="line-height: 1.6em;">Library de objects: Onde os objetos estão.</span></li>
</ul>




<p><div>
  <p>
    <strong>Primeiros Objetos</strong>
  </p></p>

<p>  <p>
    <span style="line-height: 1.6em;">Vamos agora conhecer 4 objetos básicos para montar nossas telas: Um botão, label, campo texto e um slider.<br /> </span><span style="line-height: 1.6em;">Esses são os objetos que mais devem surgir em seus projetos, mas claro que isso pode variar de projeto para projeto.</span><span style="line-height: 1.6em;"> </span>
  </p></p>

<p>  <p>
    <strong>Botão</strong>
  </p></p>

<p>  <p>
    <span style="line-height: 1.6em;">No campo de busca da library de objetos digite </span><em style="line-height: 1.6em;">Round Rec Button</em><span style="line-height: 1.6em;">. Ao começar a digitar você já vai ver o objeto surgir para você. Clique em cima dele e arraste para a sua tela. Posicione como preferir.</span>
  </p></p>

<p>  <p>
    Você pode trabalhar o alinhamento, largura e altura diretamente com o objeto, mas se preferir pode fazer isso também pelas janelas de utilitários. O mesmo para alterar o label do botão, você pode dar um duplo clique em cima dele ou alterar pelos utilitários. Experimente essas e algumas outras opções na janela de utilitários chamada <em>Attributes Inspector</em>.
  </p></p>

<p>  <p>
    <strong>Label</strong>
  </p></p>

<p>  <p>
    Devolta ao campo de busca da library de objetos, dessa vez vamos buscar por label. A label é uma simples etiqueta, um texto para nos indicar alguma coisa. Da mesma maneira que o botão você pode alterar algumas de suas características diretamente sobre o elemento, ou fazer isso pelas janelas utilitárias.  Tente por exemplo alterar a cor da fonte para vermelho.
  </p></p>

<p>  <p>
    Repare que ao mover diretamente os objetos pelo nosso protótipo de tela, algumas linhas quase que como réguas aparecem para te ajudar no alinhamento dos seus objetos. Use disso para manter tudo alinhado e bem distribuído.
  </p></p>

<p>  <p>
    <strong>Campo de texto</strong>
  </p></p>

<p>  <p>
    Para adicionar um campo de texto vamos devolta ao campo de busca da library de objetos, e digite Text Field. Nesse objeto o usuário poderá entrar com um texto. É aquele famoso objeto que quando ativo exibe um teclado na tela. Logo, além de todas as opções dos objetos anteriores, como cor da fonte, alinhamento, tamanho, você pode selecionar qual o tipo de teclado que o usuário irá ter disponível.
  </p></p>

<p>  <p>
    Outra opção ainda é setar um placeholder no campo de texto e tentar com isso economizar um label para explicar do que se trata aquele campo.
  </p></p>

<p>  <p>
    <strong>Slider</strong>
  </p></p>

<p>  <p>
    Um slider pode servir como marcador de alguma coisa, um projeto onde por exemplo o usuário deve entrar sua altura ou seu peso pode ser melhor apresentado com um slide. Na caixa de busca da library procure por <em>slider</em>.
  </p></p>

<p>  <p>
    Um detalhe é que o slider não traz um indicador de em que ponto ele está, como por exemplo 50% ou 100%. Então uma boa ideia é colocar junto do Slide uma Label para indicar esse valor.
  </p></p>

<p>  <p>
    <strong>Exercício</strong>
  </p></p>

<p>  <p>
    Com o objetos que aprendemos acima, você deve ser capaz de montar uma tela como essa:<br /> <img class="alignnone size-medium wp-image-630" title="Imagem6" src="../../assets/uploads/2013/03/Imagem6-152x300.png" alt="" width="152" height="300" />
  </p></p>

<p>  <p>
    <strong>Difícil? Vou te ajudar</strong>
  </p></p>

<p>  <p>
    Esses são os 4 objetos que temos para hoje. Achou complicado de entender? Não te culpo já que é um tema totalmente visual. Por isso estou anexando a esse artigo o vídeo abaixo que segue os passos executados no texto. Com a leitura e o visual da coisa você deve entender tudo sem problemas.<br />
  </p></p>

<p>  <p>
    <br style="clear: both;" />Mas, caso ainda tenha dúvidas é só mandar. Grande Abraço!
  </p></p>

<p>  <iframe src="https://player.vimeo.com/video/61175405" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
<p><a href="https://vimeo.com/61175405">Montando a tela do seu aplicativo - Parte 1</a> from <a href="https://vimeo.com/user9814221">Fl&aacute;vio Silveira</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C: A Linguagem Por Trás Do iOS – Parte 1]]></title>
    <link href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/"/>
    <updated>2013-02-21T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1</id>
    <content type="html"><![CDATA[<p>Fala pessoal!</p>




<p>Este é segundo artigo, que faz parte da série sobre desenvolvimento para iOS que estou fazendo. Se você perdeu o primeiro post siga esse link <a href="http://flaviosilveira.com/2013/comece-a-programar-para-ios/">http://flaviosilveira.com/2013/comece-a-programar-para-ios/</a> para acompanhar nossos passos desde o início.<span style="line-height: 1.6em;"> </span></p>




<p>Em nosso primeiro post criamos um projeto simples e entendemos a sua estrutura de pastas. Partindo desse ponto, vamos hoje conhecer um pouco da linguagem que vamos usar para desenvolver para iOS. É! XCode não é só arrastar e soltar, tem que codificar. E para isso usamos a linguagem Objective-C.</p>




<!--more-->




<p><strong>Rápida História</strong></p>




<p>Você deve achar que o Objective-C não é tão antigo, já que não faz tanto tempo que temos pessoas com IPhones desfilando por aí não é mesmo? Mas não, o Objective-C está na área desde o início dos anos 80 e foi idealizado e criado pelo PHD em Matemática biológica Brad Cox e pelo (também) PHD em Ciência cognitiva Tom Love.</p>




<p>Como com esses títulos eles caíram na programação eu não sei, mas outros detalhes da história deles, de como eles estavam preocupados com a falta de reutilização de código em cima do Smaltalk dentro da ITT e de como eles começaram a criação de um processador em C para resolver esses problemas, você pode encontrar dando aquela rápida pesquisada no Google. Se você está com seu listening de inglês em dia você pode conferir o próprio Tom Love falando sobre o assunto nesse vídeo no Youtube <a href="http://youtu.be/adI6-liGXqE">http://youtu.be/adI6-liGXqE</a> (Há outros vídeos e keynotes de Tom que você pode encontrar no youtube).</p>




<p>No vídeo, Love também comenta sobre como o Objective-C sobreviveu através dos anos até ele ser popularizado pela NeXT, empresa de Steve Jobs. A NeXT extendeu o GCC para compilar Objective-C e também criou as primeiras ferramentas de desenvolvimento para ele que vão evoluindo até chegar no XCode que temos em mãos hoje.</p>




<p>E aproveitando que comentei sobre o XCode, vale dizer que visto que o Objective-C é uma linguagem que já vem de algum tempo, você encontra vários compiladores para ela de modo que consiga estudar ela em separado. Mas como aqui vamos focar em IPhones, IPads e em ambiente Apple, nada melhor que o XCode na hora de te ajudar a desenvolver para esses fins.<span style="line-height: 1.6em;"> </span></p>




<p><strong>C</strong></p>




<p>Tom Love comenta que apesar de tudo que eles desenvolveram, o C continua lá sem nenhuma alteração. E é verdade. Os tipos prímarios de dados em cima de Objective-C são exatamente os mesmos que no C puro. Para experimentar isso abra em seu projeto o arquivo <em>ViewController.m</em> e procure pelo método <em>viewDidLoad</em> (view carregada), dentro dele você pode experimentar alguns tipos de dados no melhor estilo C.</p>




<p>Os principais tipos de dados em C são <em>char</em>, <em>int</em>, <em>float</em>, <em>double</em> e <em>bool</em>. Para definir eles usamos a seguinte sintaxe:</p>




<pre class="brush: cpp; title: ; notranslate" title="">tipo nome_da_variavel;
tipo nome_da_segunda_variavel = valor_da_variavel;
</pre>




<p>Repare que no primeiro exemplo de sintaxe apenas iniciamos a variável, sem nenhum valor inicial. Já no segundo exemplo, aproveitamos e já definimos um valor para ela. Vejamos alguns exemplos abaixo:</p>




<pre class="brush: cpp; title: ; notranslate" title="">// Char
char caracter;
char letra = 'a';
char nome[7] = 'Flavio;

// Int
int idade;
int ano = 2013;

// Float
float peso = 81.30;

// Double
// que tal você pesquisar a diferença do float para o double?
double pi = 3.1415926535;

// Bool --de booleano
bool aceite = TRUE;
</pre>




<p>Certo, certo. Estamos aqui definindo variáveis. Mas que coisa sem graça. Vamos colocar um pouquinho mais de diversão nisso?</p>




<p><span style="line-height: 1.6em;">No XCode vamos abrir nosso console e exibir nossas animadas variáveis. Para exibir o console você pode ir até o menu </span><em style="line-height: 1.6em;">View >> Debug Area >> Active Console</em><span style="line-height: 1.6em;"> ou em </span><em style="line-height: 1.6em;">View >> Debug Area >> Show Debug Area. </em><span style="line-height: 1.6em;">Outra opção é clicar em um pequeno botão no rodapé do XCode que contém uma seta apontando para cima como mostra a figura abaixo:<br /> <a href="../../assets/uploads/2013/02/Imagem-1.png"><img class="alignnone size-full wp-image-617" title="Imagem 1" src="../../assets/uploads/2013/02/Imagem-1.png" alt="" width="174" height="52" /></a></p>


<p></p></p>

<p>
  </span>
</p>




<p>
  Seu console deve parecer como na imagem abaixo:<br /> <a href="../../assets/uploads/2013/02/Imagem-2.png"><img class="alignnone size-large wp-image-618" title="Imagem 2" src="../../assets/uploads/2013/02/Imagem-2-1024x102.png" alt="" width="655" height="65" /></a>
</p>




<p>
  Console ativado, é hora de exibir as variáveis. Qual a função que exibi variávies no C? A mais conhecida que você já deve ter visto por aí é o printf. Fazendo um teste com o array de char que definimos acima temos o seguinte código:
</p>




<pre class="brush: cpp; title: ; notranslate" title="">

- (void)viewDidLoad
{
[super viewDidLoad];

// Do any additional setup after loading the view, typically from a nib.

// Char
char nome[7] = "Flavio";

printf("Nome: %s", nome);
}
</pre>




<p>
  </span><span style="line-height: 1.6em;">Compile o seu projeto para ver a variavel sair no output. (Caso não lembre como compilar o projeto, dê uma olhada no final do primeiro post da série </span><a style="line-height: 1.6em;" href="http://flaviosilveira.com/2013/comece-a-programar-para-ios/">http://flaviosilveira.com/2013/comece-a-programar-para-ios/</a><span style="line-height: 1.6em;"> ).<br /> </span>
</p>




<p>
  Repare bem na sintaxe do printf. No primeiro parâmetro da função colocamos a string mais um identificador <em>%s</em>. Esse identificador será substituído pelo segundo parâmetro da função, no caso aqui nossa variável nome. Esse <em>s</em> em nosso identificador é um indicador para o tipo da nossa variável, no caso aqui String. Para imprimir um inteiro utilize o identificador <em>%d</em>, onde <em>d</em> se refere a decimal:
</p>




<pre class="brush: cpp; title: ; notranslate" title="">
- (void)viewDidLoad
{
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

// Char
int ano = 2013;

printf("Ano: %d", ano);
}
</pre>




<p>
  </span><span style="line-height: 1.6em;">Sim, sim. É verdade que </span><em style="line-height: 1.6em;">%i</em><span style="line-height: 1.6em;"> tambem funciona para inteiros, mas em materiais por aí é mais comum ver o </span><em style="line-height: 1.6em;">%d</em><span style="line-height: 1.6em;">.</span>
</p>




<p>
  Continue seus testes com floats e doubles. Use o Identificador <em>%f </em>para esses dois tipos. Se quiser formatar seu numero utilize %.3f, onde 3 é o numero de casas decimais que você quer. <em>%lf </em>ou <em>%g</em> também servem para esses tipos.
</p>




<p>
  <strong>Lição de casa</strong>
</p>




<p>
  O que? Quer só ler o artigo com os códigos prontos e sair mandando ver? Aqui não! Para aprender tem que ir começando a se virar sozinho certo?
</p>




<p>
  A primeira lição que deixo é a de imprimir uma variável do tipo boleana usando o printf. Fácil não? Só dar aquela googada aí ou pegar aquela Barsa da estante.
</p>




<p>
  Para aqueles que já tem uma noções de lógica, que tal experimentar alguns IFS, ELSES, WHILE, CASE, DO…WHILE, FOR ??
</p>




<p>
  Para os demais, é isso que veremos no próximo post.
</p>




<p>
  Grande Abraço!
</p>

]]></content>
  </entry>
  
</feed>
