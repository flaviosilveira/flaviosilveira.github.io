<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Flávio Silveira]]></title>
  <link href="http://flaviosilveira.com/atom.xml" rel="self"/>
  <link href="http://flaviosilveira.com/"/>
  <updated>2016-10-03T03:56:14+00:00</updated>
  <id>http://flaviosilveira.com/</id>
  <author>
    <name><![CDATA[Flávio Silveira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Comece Com Docker]]></title>
    <link href="http://flaviosilveira.com/2016/comece-com-docker/"/>
    <updated>2016-10-03T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/comece-com-docker</id>
    <content type="html"><![CDATA[<p>Tenho dois posts envolvendo <a href="https://www.vagrantup.com/">vagrant</a> aqui no blog que ainda são certo sucesso de acessos. <a href="http://flaviosilveira.com/2012/vagrant-facil-e-util">Vagrant Fácil e Útil</a> que dá uma introdução ao Vagrant com um exemplo simples e <a href="http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in/">Vagrant, PuPHPet E PHP Built In</a> que apresenta o PuPHPet como um facilitador para criar ambientes e um experimento com o PHP Built In. O primeiro artigo é de 2012, o segundo de 2013. Passados três anos e vendo a busca disso não diminuir, quero trazer para quem ainda não conhece o <a href="https://www.docker.com/">Docker</a>.</p>

<!--more-->


<h3>Containers VS Virtual Machines</h3>

<p>Muita coisa me anima no Vagrant: ser uma máquina virtual leve, poder deixar minha máquina limpa sem ter que instalar várias coisas, poder trabalhar com várias versões de software com facilidade, se aproximar bastante do ambiente de produção e poder experimentar sem medo.</p>

<p>Não vou entrar aqui na discussão filosófica sobre docker vs vagrant, quero apenas trazer uma alternativa a tudo que eu coloquei acima e, em um futuro, mostrar como o docker pode nos ajudar a experimentar ainda mais novas tecnologias.</p>

<p>Docker trabalha com containers, Vagrant com máquinas virtuais. Qual a diferença se você está começando com tudo isso? Não muita! Você pode pensar no container como uma máquina virtual se você está começando mas tenha em mente que todo o conceito e funcionamento é diferente. Ná prática você vai continuar com um mundo paralelo onde vai poder criar e experimentar suas coisas.</p>

<h3>O velho que é novo</h3>

<p>Containers já existem há algum tempo dentro da nossa área com o que chamavamos de Linux Containers ou LXC. O que aparece com o Docker agora é uma maneira mais fácil de trabalhar com tudo isso e um engajamento da comunidade e das empresas de software gigantesco, trazendo uma gama de várias ferramentas prontas em formato de imagens. Com isso não vamos perder muito tempo com configurações e testar e descobrir tecnologias fica mais fácil.</p>

<p>Marque na agenda para pesquisar sobre libvirt, LXC e a história por trás da criação do Docker na França. Vale a pena!</p>

<h3>Instalação e não só para Linux</h3>

<p>Diferente dos antigos, o docker trouxe maneiras de trabalharmos com containers em qualquer sistema operacional. A maneira como ele faz isso está sempre evoluindo a cada versão. Pesquise como está para o seu sistema operacional.</p>

<p>Eu não vou tratar aqui como instalar o Docker nem sua arquitetura básica, quero ir direto aos pontos mesmo que ainda ficando muito parecido com os primeiros passos da documentação oficial. A ideia é explicar as coisas um pouquinho diferente para quem não pegou da maneira que ficou lá e trazer umas maneiras diferentes de pensar.</p>

<h3>Hello World</h3>

<p>Cada um tem a sua maneira de aprender as coisas, sujiro muito que você descubra a sua. Eu gosto de Hello World, começar do ultra básico e ir evoluindo e tentando entender passo a passo. Vamos fazer juntos e já vou explicando algumas coisas.</p>

<p>O Hello World com docker fica da seguinte maneira. Rode:</p>

<pre><code>docker run hello-world
</code></pre>

<h4>Imagens</h4>

<p>O docker vai buscar uma imagem chamada hello-world. Imagens são a base dos containers, são como um cenário pronto que pode conter um sistema operacional e um conjunto de softwares por exemplo.</p>

<p>Você não tem a imagem localmente, então o docker vai fazer o download dela. Para algumas imagens você vai ver o docker fazendo vários downloads paralelos para deixar as coisas mais rápidas.</p>

<h4>Saída</h4>

<p>Uma vez que foi feito o download da imagem o docker vai subir o container e rodar o programa hello-world sozinho.</p>

<pre><code>Hello from Docker!
This message shows that your installation appears to be working correctly.
To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash
</code></pre>

<p>Se é isso que aparece para você, está feito! Tudo funcionando! O docker já te provoca a tentar algo mais ambicioso e é para esse caminho que vamos:</p>

<h3>CentOS</h3>

<p>A saída do Hello World te desafia a fazer um container Ubuntu. Como muita gente usa Ubuntu como máquina principal, pessoalmente sugiro tentar outra distro no container. Que tal CentOS?</p>

<pre><code>docker run -it centos bash
</code></pre>

<p>Novamente aqui o docker vai buscar por uma imagem, dessa vez do CentOS, se não tiver vai fazer download dela.</p>

<p>Novidades no comando:</p>

<ul>
<li>-i é o comando para interagir, vai manter o STDIN aberto.</li>
<li>-t é para alocar um TTY(Talk to you) que é um terminal.</li>
</ul>


<p>Com a imagem em mãos, o docker vai subir o container e executar o comando bash.</p>

<p>Note que a linha do seu terminal mudou e você deve estar dentro do container. Todo comando que você executar agora está sendo executado dentro do seu container com Ubuntu.</p>

<p>Experimente alguns comandos para comprovar. Por exemplo: <strong>yum</strong>.</p>

<h3>Attached</h3>

<p>Vamos sair do nosso container sem matar ele. Segure CTRL e pressione P e em sequida Q.
Você está de volta para sua máquina principal. Vamos ver os containers que temos rodando?</p>

<pre><code>docker ps
</code></pre>

<p>O comando ps vai nos mostrar os containers que estão rodando com um id, o processo que estão executando, quando foram criados, seu status, portas e nome do container.</p>

<p>Como não passamos nenhum nome para nosso container, o docker deu um de seus nomes padrão.</p>

<p>Vamos voltar para nosso container CentOS? Para isso vamos fazer o seguinte comando:</p>

<pre><code>docker attach [id ou nome do container]
</code></pre>

<p>Com o ID ou nome do container, você consegue voltar para ele, o que chamam de attach.</p>

<p>Pense no Attach como você dentro do container. O padrão quando se cria um container é attach, e foi isso que aconteceu quando passamos o comando run, entramos no container.</p>

<h3>Detach</h3>

<p>De dentro do container, digite exit. Isso vai matar o container e ele não vai existir mais. O mesmo vai acontecer se você fizer um CTRL+C por exemplo.</p>

<pre><code>docker ps -a
</code></pre>

<p>Com o comando acima, além de ver seus containers ativos (se houver) ele mostra também os containers inativos. Se você deu exit em seu container do CentOS, essa mensagem vai ser mostrada em status.</p>

<p>Agora vamos criar o container novamente, mas dessa vez passando uma opção detached, ou seja, vamos criar o container mas não vamos entrar nele. Vamos também dar um nome para nosso container</p>

<pre><code>docker run --name meu-centos -itd centos bash
</code></pre>

<p>Ao rodar docker ps você vê que seu container está rodando, com o comando <strong>bash</strong> e com o nome <strong>meu-centos</strong></p>

<p><strong>Nesse ponto faça o exercício de entrar e sair de containers, criar outros e etc. Use Attach e CTRL+P+Q</strong></p>

<h3>Exec</h3>

<p>As vezes precisamos apenas executar apenas um comando dentro de um container e entrar e sair dele seria muito chato e demorado. Para isso temos o Exec:</p>

<pre><code>docker exec meu-centos echo teste
</code></pre>

<p>Aqui o docker entrou no container, executou o comando <strong>echo teste</strong> em meu-centos e retornou a sua máquina.</p>

<h3>Comandos que você talvez precise</h3>

<pre><code>#Para listar as imagens que você tem: docker images
#Para remover containers: docker rm
#Para remover imagens: docker rmi
#Parar e reiniciar container: docker start / docker stop 
</code></pre>

<h3>Fechando</h3>

<p>Aqui fizemos os pequenos primeiros passos com containers. Muito parecido com o proposto pela documentação oficial.</p>

<p>Te convido a explorar o <a href="https://hub.docker.com/">DockerHUB</a> repositório oficial de imagens para criarmos containers. Procure ferramentas que você já trabalha, ferramentas que você quer experimentar, o uso de containers vai te ajudar a fazer testes rápidos e estudar qualquer coisa.</p>

<p>Com isso acredito que sua cabeça já começe a fervilhar de ideias de para onde podemos ir.
Me comprometo a evoluir esses exemplos aqui nas próximas semanas.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Drops of Life - Zero]]></title>
    <link href="http://flaviosilveira.com/2016/4-drops-of-life-0/"/>
    <updated>2016-09-26T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/4-drops-of-life-0</id>
    <content type="html"><![CDATA[<p>Reavaliando minha lista de metas para 2016, vejo que uma delas era <strong>Escrever mais</strong>. Olhando aqui no blog coloquei apenas 2 posts esse ano, o que não altera minha péssima métrica dos últimos 730 dias. Procurando mudar isso vou começar essa série que estou chamando de <strong>4 Drops of life</strong>, que no nosso português seria algo como <strong>4 gotas de vida</strong>. Algo para me forçar mais a escrever.</p>

<p>A ideia aqui é trazer 4 itens do que tenho feito, ouvido, lido e enfim. Recomendações do que fazer e do que as vezes não fazer na minha visão. Tecnologia (Sim!), Arte, Físico e o que mais surgir.</p>

<p>Vamos começar?</p>

<!--more-->


<h2>4 Drops of Life - Zero</h2>

<h3>1 - Música - Mercy Falls - Seventh Wonder</h3>

<p>Quero começar trazendo um tema de extrema importância na minha vida que é música.</p>

<p>Seventh Wonder é uma banda sueca que tem seu estilo no metal progressivo. Recentemente lançou um albúm ao vivo, o que acabou resgatando ela para mim. Nesse ao vivo, eles tocam na íntegra a peça Mercy Falls, um albúms deles de 2008 que conta a história de um casal que sofre um acidente de carro, deixando o marido em coma. Para quem gosta de coisas próximas de Dream Theater e Symphony X pode ser um prato cheio.</p>

<p>Caso ajude, é uma banda super do bem, as letras não falam de dêmonios nem nada assim. Recomendadíssimo!</p>

<h3>2 - Exercício físico pela manhã</h3>

<p>Há algumas semanas inclui na minha rotina uma academia as 6 da manhã. Isso mesmo! Acordar 5:30, ir para academia, fazer seu exercício e aí sim ir trabalhar. No meu caso me deu um ânimo extra, mas vontade da vida e um bom humor constante.</p>

<p>Quando chego para trabalhar já estou acordado a quase 3 horas, o que traz um outro olhar sobre as coisas, com muito menos preguiça e vontade de fazer acontecer.</p>

<p>O bem para o corpo que o exercício traz é uma consequência para mim.</p>

<h3>3 - Série - Wallander</h3>

<p>Novamente a Suécia aparece por aqui hoje, e agora com a série <a href="http://www.imdb.com/title/tt1178618/">Wallander</a>.</p>

<p>Essa série, que apesar de sueca tem diálogos em inglês, traz um detetive sem poderes especiais, de adivinhação ou qualquer coisa do tipo. É uma pessoa comum no seu dia de trabalho. Para mim é um ponto super interessante e crítico a outras séries do gênero onde do nada os crimes e mistérios são resolvidos. Aqui você consegue caminhar com o enredo e descobrir junto as peças para formar o quebra cabeça.</p>

<p>Os episódios são poucos, mas são grandes, quase um filme cada um. Disponível no Netflix atualmente. Aprecie com moderação!</p>

<h3>4 - Livro - Sêneca - Aprendendo a viver</h3>

<p>Deixo aqui uma recomendação de um livro de filosofia do Romano Sêneca. Ele tem uma conturbada história tentando ser mentor de Nero, sim, aquele que foi colocar fogo em Roma, o mesmo que posteriormente ordenaria que Sêneca se matasse.</p>

<p>Aprendendo a viver é um apanhado das cartas de Sêneca a Lucílio. São no total 124 cartas, onde 29 estão presentes nessa coletânia brasileira.</p>

<p>Algumas mensagens dele:</p>

<ul>
<li><p>Qualquer tempo que já passou pertençe a morte. Seja menos dependente do amanhã, e se lance ao presente. Enquanto adiamos, a vida se vai.</p></li>
<li><p>Um teto de palha abriga o homem tão bem quanto o de ouro.</p></li>
<li><p>Concede ao corpo apenas o que for suficiente para um bom estado de saúde. É necessário tratá-lo com severidade para que não desobedeça a mente.</p></li>
</ul>


<p>Os historiadores nunca descobriram quem foi Lucílio ao certo. Para alguns era um amigo fictício de Sêneca, para mim Lucílio somos todos nós.</p>

<p>Espero que tenham gostado da ideia e apreciado as dicas.
Quais as suas sugestões?</p>

<p>Até o próximo! Grande Abraço!</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perdeu a Tampa Do Seu Teclado Apple?]]></title>
    <link href="http://flaviosilveira.com/2016/perdeu-a-tampa-do-seu-teclado-apple/"/>
    <updated>2016-06-13T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/perdeu-a-tampa-do-seu-teclado-apple</id>
    <content type="html"><![CDATA[<p><img src="../../../../assets/uploads/2016/tampa_teclado.jpg" alt="Tampa teclado Apple" /></p>

<p>Iiii.. perdeu a tampa do seu teclado Apple, seu Magic Keyboard, (ou qualquer outro nome carinhoso que você tenha por ele aqui)? Não se desespere, seus problemas acabaram!</p>

<!--more-->


<p>A minha triste história começa ao descobrir que meus queridos gatos se aproveitaram do momento em que parei para trocar as pilhas do teclado e surrupiaram a tampa que fecha o mesmo.</p>

<p>Sem a tal peça como fazer? Dá para ver que algo tem que segurar as pilhas e ao mesmo tempo fechar o circuito. Mas o quê pode cumprir esse papel?</p>

<p><strong>O que não vai dar certo</strong></p>

<p>Você pode descartar de cara:</p>

<ul>
<li>Colocar uma moeda com durex</li>
<li>Ficar segurando com o dedo e digitando com a outra mão</li>
</ul>


<p>Sim, isso foi uma piada e agora com as brincadeiras cessadas, vamos para a verdade.</p>

<p><strong>Primeiras pesquisas</strong></p>

<p>As primeiras buscas recaem sobre uma nova peça. A mesma, o Mercado Livre nos oferece por atuais R$80 (Oitenta reais) no momento em que escrevo esse texto. Vários vendedores, o mesmo valor.</p>

<p>Buscando pela peça no EBay e sites similares, temos a peça por cerca de $7 (Sete dólares), deixando na sua cabeça apenas a dúvida de quanto tempo vai levar para chegar na sua casa, e, se chegar.</p>

<p><strong>Buscas mais profundas</strong></p>

<p>Um leque se abre quando você se acalma, aceita a besteira e começa a pesquisar mais alternativas.</p>

<p>Vi pessoas com soluções de peças como as abaixo:
<img src="../../assets/uploads/2016/tampa_teclado_1.png" alt="Alternativa 1" />
<img src="../../assets/uploads/2016/tampa_teclado_2.png" alt="Alternativa 2" /></p>

<p>Você pode consultar um material de construções mais próximo em busca de algo similar as imagens acima. Há peças de chuveiro, porcas e outras opções. Apenas tenha em mente que o que segura as pilhas terá de fechar o circuito, conduzir energia.</p>

<p><strong>Minha solução</strong></p>

<p>Nos posts que encontrei (<a href="https://pt.ifixit.com/Answers/View/48359/I+need+a+replacement+battery+cover">Discussão 1</a>, <a href="http://forums.macrumors.com/threads/lost-cap-to-battery-enclosure-apple-bluetooth-keyboard.1676579/">Discusão 2</a>) muito se fala de uma medida de 5/8" (cinco oitavos).
Com isso anotado sai a caça de um pafuso nessa medida, e para minha surpresa deu extremamente certo.</p>

<p>Encontrei um parafuso de aço, como o abaixo. A rosca dele encaixa certinho no teclado:</p>

<p><img src="../../assets/uploads/2016/piece.png" alt="Parafuso" /></p>

<p>Aqui o resultado:</p>

<p><img src="../../assets/uploads/2016/my-keyboard-1.png" alt="Meu Teclado" />
<img src="../../assets/uploads/2016/my-keyboard-2.png" alt="Meu Teclado 2" /></p>

<p>Você fica com um teclado funcionando por uma peça de no máximo R$2 (Dois reais), com um design arrojado a lá Frankenstein. No pior dos resultados, você pode usar essa solução enquanto sua peça está vindo de um EBay, Alibaba e etc.</p>

<p>O vendedor me deu a dica que para melhorar o resultado eu poderia procurar por um parafuso mosca ou um allen sem cabeça em uma loja mais especializada de parafusos. Como os da imagem abaixo:</p>

<p><img src="../../assets/uploads/2016/mosca.png" alt="Parafuso Mosca" /></p>

<p><strong>Final Feliz</strong></p>

<p>Após me verem felizes com o resultado de economia e funcionamento do teclado, meus gatos devolveram a peça original em troca de uma lata de atum.</p>

<p>Espero que esse post ajude outras pessoas com gatos psicopatas ou que simplesmente perderam essa tampa em uma mudança ou qualquer outro descuido.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Não Existem Pessoas Sem Tempo]]></title>
    <link href="http://flaviosilveira.com/2016/nao-existem-pessoas-sem-tempo/"/>
    <updated>2016-04-22T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2016/nao-existem-pessoas-sem-tempo</id>
    <content type="html"><![CDATA[<p>Você não é uma pessoa que não tem tempo, e sim uma pessoa que prioriza certas coisas, e outras não. Se você está priorizando coisas importantes, cabe a você entender o que melhor define essa palavra, quais seus objetivos de/com/pela vida e o que está lhe ajudando a alcançá-los.</p>

<!--more-->


<p>Meu último post nesse Blog foi em 17 de fevereiro de 2014. Estava eu sem tempo? Os vários filmes que vi ajudam a responder que, NÃO! E meu projeto Open Source, o <a href="http://jquerypriceformat.com/">JQuery Price Format</a> que não tem uma versão atualizada desde Janeiro do mesmo ano. Sem tempo? O movimento de translação não mudou muito, e o dia continua tendo 24 horas, então, NÃO.</p>

<p>O que fiz com minhas horas? Em uns momentos priorizei carreira, em outros priorizei casamento, em outros família, investimentos, em alguns a insanidade e em outras a saúde.</p>

<p>Se você tem algo que sabe que é importante, mas ainda usa a desculpa do tempo, sugiro que comece pequeno. Faça um teste e veja se é isso mesmo que você está buscando. Por exemplo: Você quer começar a fazer um exercício, mas &ldquo;não tem tempo&rdquo; para começar. Comece com 5 minutos. Isso mesmo, 5 minutos! 5 minutos não vão interferir na sua agenda e antes de vc pensar que correr 5 minutos não faz diferença para nada, se aquilo realmente criar valor para você, você já vai ter aumentado para 20 minutos, meia hora por dia. Se não criar valor, você tentou, viu que não é a sua e pode gastar seus 5 minutos em outro investimento.</p>

<p><em>Max Gunther</em> autor do livro <em>Os Axiomas de Zurique</em> diz: &ldquo;Tudo na vida é um investimento. Qualquer espécie de ganho você tem que arriscar, seja um bem material, dinheiro ou emocional&rdquo;. Então, não deixe de tentar se você está buscando ganhos.</p>

<p>Depois de ter tentado, você pode trocar o &ldquo;Não tenho tempo&rdquo; para um belo &ldquo;Estou priorizando outras coisas no momento&rdquo;.</p>

<p>Grande Abraço!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evoluindo Seu Primeiro Jogo Em HTML5]]></title>
    <link href="http://flaviosilveira.com/2014/evoluindo-seu-primeiro-jogo-em-html5/"/>
    <updated>2014-02-17T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2014/evoluindo-seu-primeiro-jogo-em-html5</id>
    <content type="html"><![CDATA[<p>O post de hoje é uma continuação do anteriormente escrito Seu primeiro jogo em HTML5. O objetivo dessa continuação é aprender mais alguns conceitos de desenvolvimento de jogos e animar um pouco o nosso game que não estava lá essas coisas de divertido. Você acompanha a primeira parte no seguinte link <a href="http://flaviosilveira.com/2013/seu-primeiro-jogo-em-html5/" title="Seu primeiro jogo em HTML5 - Parte 1">http://flaviosilveira.com/2013/seu-primeiro-jogo-em-html5/</a>.</p>




<!--more-->




<p>Nessa continuação vamos adicionar um pouco de jogabilidade, variando a velocidade das bolas que caem e também seu tamanho e a sua pontuação.</p>




<p><strong>Objeto</strong><br/>
Estamos querendo tipos diferentes de bolas. Tamanhos diferente, velocidades diferentes, pontos diferentes. Ainda são bolas, mas cada uma de um jeito, certo?<br/>
Estamos falando então de uma mesma coisa, mas com características e comportamentos diferentes, concorda?</p>




<p>Vamos entrar aqui então com o conceito de programação orientada a objetos para resolver o problema.<br/>
Dependendo do seu nível em programação, esse pode ser um conceito novo e, se esse é o caso, você vai precisar fazer algumas pesquisas caso queira entender melhor alguns pontos. Se você não conhece Orientação a Objetos recomendo que pare a leitura aqui e pesquise á respeito e também como é aplicado na linguagem javaScript. Não é necessário um conhecimento profundo neste momento, dê aquela lida no conceito, faça um exemplos simples em um papel e volte a leitura do post. Caso você já entenda o suficiente desse conceito é seguir em frente.</p>




<p>Precisamos então programar algo que crie as bolas para a gente, uma fôrma das bolas, que é equivalente a uma classe em orientação a objetos. Em javaScript não temos classes propriamente ditas, tudo que precisamos fazer é uma função.</p>




<p>Pegue então o código que desenvolvemos no post anterior.<br/>
Antes da nossa função inicializar, vamos criar uma função chamada bola e dentro dela vamos colocar todas as variáveis iniciais referente a bola que estão hoje na função inicializar.<br/>
Veja como fica:</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
    {
                bolaDiametro = 10;
                bolaPosX = canvas.width / 2;
                bolaPosY = -10;
        velocidadeBola = 10;
        colisao = false;
    }
        
    function inicializar()
    {
        barraAltura = 15;
        barraLargura = 90;

        pontosJogador = 0;
        jogadorPosicaoX = (canvas.width - barraLargura) / 2;
        velocidadeJogador = 20;
                
        canvas = document.getElementById("canvas");
        context = canvas.getContext("2d");              
                
        document.addEventListener('keydown', keyDown);
                
        setInterval(gameLoop, 30);
    }
</pre>




<p>Dentro da função inicializar vamos criar a primeira bola e adicionar ela dentro de um array. Esse array vai guardar todas as bolas que estiverem em cena. Dessa maneira teremos controle sobre elas.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function inicializar()
    {
        …     
        var primeira = new bola()
        bolas = new Array(primeira);
        …
    }
</pre>




<p>Rodando o seu código nesse momento verá que está tudo como antes. A questão é que nesse ponto não estamos utilizando nenhum conceito novo. Tudo que foi feito foi adicionar o código de antes para uma função, e chamar ela. Nem estamos trabalhando com o array criado não é mesmo?</p>




<p>Vamos trocar a nossa função para ela realmente virar um objeto, com propriedades. Para isso adicione a palavra chave this a frente de todas as variáveis.<br/>
Essa palavra chave fará referência para aquela instância de objeto e apenas ela. Caso não entenda isso aqui, talvez você entenda melhor quando trabalharmos com o array das bolas que estão em cena.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
{
    this.bolaDiametro = 10;
    this.bolaPosX = canvas.width / 2;
    this.bolaPosY = -10;
    this.velocidadeBola = 10;
    this.colisao = false;
}
</pre>




<p>Neste momento o game para de funcionar. Isso porque as variáveis que temos dentro de nosso gameLoop já não existem mais. Temos agora um objeto bola e esse objeto adicionado a um array que é responsável por todas as bolas em cena. Precisamos trabalhar com esse array para as coisas voltarem a funcionar.</p>




<p>Para questão de organização, já que as variáveis que definiam as características da bola não nos servem mais, podemos limpar elas da nossa definição inicial na primeira linha de javaScript. Mas não esqueça de adicionar a variável para o nosso array de bolas, para que fique acessível para todo o resto do código. Ficando assim:</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, pontosJogador, bolas;
</pre>




<p>Agora vá até a função de gameLoop, e repare onde está a lógica da bola. Começa onde iniciamos com o desenho dela e termina com a verificação da colisão.<br/>
O que vamos fazer aqui é tirar tudo isso, e aplicar para cada objeto dentro do array bolas usando um foreach. Fica dessa forma:</p>




<pre class="brush: jscript; title: ; notranslate" title="">// Bola
bolas.forEach(function(bola, indice){
    context.beginPath();
    context.arc(b.bolaPosX, b.bolaPosY, b.bolaDiametro, 0, Math.PI * 2, true);
    context.fill();
                
    if(bola.bolaPosY &lt;= canvas.height)
    {
        bola.bolaPosY += bola.velocidadeBola;
    }
    else
    {
        bola.bolaPosX = Math.random() * 600;
        bola.bolaPosY = -10;
        bola.colisao = false;
    }
                
    // Checar Colisão
    if((bola.bolaPosX &gt; jogadorPosicaoX && bola.bolaPosX &lt; jogadorPosicaoX + barraLargura) && bola.bolaPosY &gt;= canvas.height - barraAltura && bola.colisao == false)
    {
        pontosJogador++;
        bola.colisao = true;
    }
});
</pre>




<p>Na função de forEach do javaScript o primeiro parâmetro é o elemento em si e o segundo o indíce.<br/>
Para cada objeto dentro do array, ele vai executar uma vez.<br/>
Note que agora nas variáveis com as características da bola de antes, adicionamos “b.”. É dessa maneira que acessamos as propriedades do objeto.<br/>
Tome cuidado para não adicionar isso nas variáveis do jogador nem do canvas.<br/>
Neste ponto se jogo volta a funcionar como antes, mas dessa vez usando bola com o conceito de orientação a objetos.</p>




<p><strong>Cada bola um Objeto</strong><br/>
Olhe o código e verá que quando a bola chega ao final do canvas ou quando ela colide com o jogador, não criamos uma nova, apenas editamos novamente as propriedades do mesmo objeto que foi criado da primeira vez. Vamos mudar isso alterando o if que checa se a bola já passou do canvas. Agora quando ela passar do canvas, vamos retirar ela do nosso array usando a função splice do javaScript.</p>




<pre class="brush: jscript; title: ; notranslate" title="">if(bola.bolaPosY &lt;= canvas.height)
    {
        bola.bolaPosY += bola.velocidadeBola;
    }
    else
    {
        bolas.splice(indice, 1);
    }
</pre>




<p>Tudo que estava dentro do else, que era usado para criar uma nova bola, não é mais necessário. Trocamos tudo isso pela função splice.<br/>
Splice irá retirar um item do array baseado em seu índice. O primeiro parâmetro é o índice que queremos tirar e o segundo é a quantidade de índices a partir dele, que para nós será sempre 1.</p>




<p>Rodando seu game agora, quando a bola passa pelo canvas, não é criado nenhuma nova.</p>




<p><strong>Criando uma nova bola</strong><br/>
Nosso foreach só é executado se tivermos bolas dentro dele. Como nossa primeira bola passou pelo canvas e foi destruída, vamos adicionar uma verificação antes do foreach para caso nosso array estiver vazio, criar uma nova bola dentro dele. Para isso vamos usar um push. Veja como fica:</p>




<pre class="brush: jscript; title: ; notranslate" title="">if(bolas.length &lt;= 0)
{
    bolas.push(new bola());
}
</pre>




<p>Certo, mas todas as bolas estão saindo no mesmo lugar. Dá para ganhar o jogo parado!<br/>
Isso está acontecendo por conta da posição X e Y estarem fixas dentro da criação do nosso objeto.<br/>
Vamos alterar isso com a ajuda da classe Math de javaScript.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
{
    this.bolaDiametro = 10;
    this.bolaPosX = Math.random() * 600;
    this.bolaPosY = -10;
    this.velocidadeBola = 10;
    this.colisao = false;
}
</pre>




<p>A posição Y da bola pode continuar sendo -10 para aparecer antes do canvas. Mas para deixar a posição X randômica, use Math.random multiplicando pela largura do seu canvas.</p>




<p>Use um pouco da matemática aqui para alterar também a velocidade de sua bola.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
{
    this.bolaDiametro = 10;
    this.bolaPosX = Math.random() * 600;
    this.bolaPosY = -10;
    this.velocidadeBola = Math.random() * (10 - 6) + 6;
    this.colisao = false;
}
</pre>




<p>No exemplo acima temos velocidades entre 10 e 6.<br/>
Acima você vê como obter um número randômico entre um mínimo e um máximo. Math.random multiplicado pelo máximo diminuindo o mínimo e somado ao mínimo.<br/>
Caso queira tentar entender o “truque” acima lembre-se que Math.random retorna um número entre 0 e 1.</p>




<p><strong>Diâmetros e pontos variados</strong><br/>
Para termos diâmetros variados e pontos baseados nesse diâmetro, vamos primeiro definir isso em um array, antes do nosso objeto bola.<br/>
Nesse array, criamos um objeto que tem um dâimetro e uma pontuação.</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, pontosJogador, bolas;
        
var diametros = new Array(
    {'diametro' : 7, 'pontos' : 1},
    {'diametro' : 10, 'pontos' : 2},
    {'diametro' : 15, 'pontos' : 3}
);
</pre>




<p>Com isso definido, vamos agora usar a mesma fórmula que usamos acima para pegar um número randômico que esteja dentro dos valores desse array. Lembrando que o array começa em 0, então vamos diminuir um ao final. Vamos armazenar esse número, e usar ele para o tamanho da bola e consequentemente sua pontuação. Veja como fica:</p>




<pre class="brush: jscript; title: ; notranslate" title="">function bola()
{
    var indice = Math.round(Math.random() * (3 - 1) + 1) - 1;
    this.bolaDiametro = diametros[indice]['diametro'];
    this.pontos = diametros[indice]['pontos'];
                
    this.bolaPosX = Math.random() * 600;
    this.bolaPosY = -10;
    this.velocidadeBola = Math.random() * (10 - 6) + 6;
    this.colisao = false;
}
</pre>




<p>Neste momento os tamanhos de bolas já aparecem diferentes na tela. Mas a pontuação continua somando 1 sempre.<br/>
Precisamos alterar nosso gameLoop para pegar os pontos do objeto em questão. Veja como:</p>




<pre class="brush: jscript; title: ; notranslate" title="">if((bola.bolaPosX &gt; jogadorPosicaoX && bola.bolaPosX &lt; jogadorPosicaoX + barraLargura) && bola.bolaPosY &gt;= canvas.height - barraAltura && bola.colisao == false)
{
    pontosJogador += bola.pontos;
    bola.colisao = true;
}
</pre>




<p>Trocamos o incrementar que tinha antes para um += que vai pegar o valor que já tinha na variável e somar o valor dos pontos daquela bola que colidiu.</p>




<p>Mais de uma ao mesmo tempo e tudo junto<br/>
Para finalizar, que tal deixar cair mais de uma bola ao mesmo tempo?</p>




<p>Para fazer isso de forma bem simples, adicione dentro do foreach um verificação para caso aquela bola já tenha passado da posição 50 em Y, criar uma nova.</p>




<pre class="brush: jscript; title: ; notranslate" title="">// Criar nova bola?
if(bola.bolaPosY &gt;= 50 && bolas.length &lt;= 2)
{
    bolas.push(new bola());
}
</pre>




<p>Cuidado! Veja no código acima que eu também verifiquei quantas bolas estão em cena antes de adicionar uma nova. Caso contrário você vai ter um efeito matrix em sua tela e travar seu navegador. Tente por sua conta e risco :).</p>




<p><strong>Conclusão</strong><br/>
Você pode aplicar o conceito de orientação a objetos para tudo o que for objeto na tela. Dessa maneira você vai ter um melhor controle das coisas e é a maneira correta de trabalhar em jogos.</p>




<p>Acompanhe o repositório gitHub dessa série em <a href="https://github.com/flaviosilveira/primeiro-jogo-html5" title="Git Hub - Seu primeiro jogo em HTML5">https://github.com/flaviosilveira/primeiro-jogo-html5</a>.</p>




<p>Aguarde o próximo post da série. Abraços!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erros No Vagrant No Mavericks OSX?]]></title>
    <link href="http://flaviosilveira.com/2014/erros-com-vagrant-no-mavericks-osx/"/>
    <updated>2014-01-17T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2014/erros-com-vagrant-no-mavericks-osx</id>
    <content type="html"><![CDATA[<p>Há algum tempo a Apple liberou a nova versão de seu sistema operacional, o Mavericks OSX. Se você usa Macs e Vagrant para desenvolvimento deve ter percebido que as coisas de repente não rodaram mais.</p>




<p>[Ainda não sabe o que é Vagrant? Confira esses meus dois posts: <a href="http://flaviosilveira.com/2012/vagrant-facil-e-util/" title="Vagrant fácil e útil">http://flaviosilveira.com/2012/vagrant-facil-e-util/</a> e <a href="http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in/" title="Vagrant, PuPHPet e PHP Built In">http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in/</a>]</p>




<!--more-->




<p>Correndo atrás do que estava acontecendo cheguei no post do Stu Miller <a href="http://www.stumiller.me/fixing-vagrant-osx-mavericks-update/" title="Stu Miller : Fixing Vagrant after an Mavericks Update">http://www.stumiller.me/fixing-vagrant-osx-mavericks-update/</a> que mostra os comandos para sair desse problema.</p>




<p>Porém você vai descobrir, seja lendo os comentários no blog do Stu ou na prática, que a cada vez que desligar seu Mac terá que executar esses comandos. Para diminuir um pouco o saco de ter que fazer isso sempre, criei um Shell Script que você pode colocar para rodar automaticamente quando sua máquina liga ou ao menos não ter que ficar lembrando quais eram os comandos.</p>




<p><a href="../../assets/uploads/fix-mavericks.sh" title="Fix Mavericks Shell Script">Faça o download aqui!</a></p>




<p>Execute-o com SUDO.<br/>
Você passa um primeiro parâmetro com o caminho da sua máquina virtual.<br/>
O segundo parâmetro é opcional, caso a sua versão do <em>VirtualBox</em> seja maior ou igual que 4.3 apenas passe um <em>true</em>.<br/>
Exemplo:</p>




<pre class="brush: bash; title: ; notranslate" title="">sudo ./fix-maverick.sh seu-diretorio true
</pre>




<p>O script não está a prova de balas, é apenas uma ajuda para resolver o problema.<br/>
Abrindo o script você vê um código bem simples, checando se o <em>vagrant</em> está instalado, se você executou o comando como SUDO e se o caminho passado é válido.</p>




<p>Qualquer sugestão é só enviar. Abraços!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seu Primeiro Jogo Em HTML5]]></title>
    <link href="http://flaviosilveira.com/2013/seu-primeiro-jogo-em-html5/"/>
    <updated>2013-09-19T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/seu-primeiro-jogo-em-html5</id>
    <content type="html"><![CDATA[<p>Hoje quero ajudar você a desenvolver seu primeiro jogo, que talvez não fique aquele delírio de diversão, mas é o primeiro passo para você começar a entrar nesse mundo de desenvolvimento de jogos. E para isso vamos usar tecnologias que você tem em mãos no seu navegador. HTML5 e javascript.</p>




<p>Vou passo a passo, tentando deixar claro o porque de algumas coisas primordiais em desenvolvimento de jogos. Cometendo erros para depois corrigi-los. Isso talvez torne o post um pouco extenso, então busque sua garrafa de água para manter seu cérebro hidratado.</p>




<!--more-->




<p>Para os sem saco, no final do post você tem um link para o código completo.</p>




<p><strong>O Jogo</strong><br/>
Eu havia pensado em desenvolver um <a href="http://en.wikipedia.org/wiki/Arkanoid">Arkanoid</a> para esse post, mas a criação e a lógica subiriam um pouco de nível e a intenção de começar devagar iria se perder. Então temos algo bem mais simples, bolas que caem do topo da tela e que você deve resgatá-las com a plataforma.<br/>
<img src="../../../assets/uploads/2013/09/Imagem1-300x240.png" alt="" title="Imagem1" width="300" height="240" class="alignnone size-medium wp-image-660" /><br style="clear:both;" /></p>




<p><strong>HTML</strong><br/>
Para montar o desenho da tela, o jogador e a bola, vamos usar a tag canvas. Ela está presente há algum tempo nos navegadores, tendo começado no Safari da Apple, mas ganhou mais popularidade recentemente com o HTML5.</p>




<p>Crie um arquivo HTML com qualquer nome e dentro dele crie um Canvas.</p>




<pre class="brush: xml; title: ; notranslate" title="">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Seu Primeiro Jogo - HTML5&lt;/title&gt;
    &lt;/head&gt;   
    &lt;body&gt;
        &lt;canvas id="canvas" width="600" height="480"&gt;
            Navegador não suporta HTML5
        &lt;/canvas&gt;
    &lt;/body&gt;
&lt;/html&gt;
</pre>




<p>Usamos o Doctype do HTML5 junto com um título.<br/>
Dentro da tag body vemos o canvas, onde definimos uma largura e uma altura.</p>




<p>Carregando isso no navegador, não vemos nada. Mas não se preocupe, você não fez nada de errado. Vamos com ajuda de um CSS definir uma borda para nosso canvas, assim vamos ver ele na tela. Nosso head vai ficar como abaixo.</p>




<pre class="brush: xml; title: ; notranslate" title="">&lt;head&gt;
    &lt;title&gt;Seu Primeiro Jogo - HTML5&lt;/title&gt;
     &lt;style type="text/css"&gt;
    canvas {
        border: 1px solid #000000;
    }
     &lt;/style&gt;
&lt;/head&gt;  
</pre>




<p>Fique a vontade para alterar a cor, o tipo da borda ou o que mais quiser nesse CSS.</p>




<p>Nosso trabalho com HTML acaba aqui. Tudo o que vamos usar agora é JavaScript. Para isso vamos então chamar uma função javaScript quando o body estiver totalmente carregado, da seguinte maneira.</p>




<pre class="brush: xml; title: ; notranslate" title="">&lt;body onload="inicializar()"&gt;
</pre>




<p><strong>JavaScript</strong><br/>
Vamos criar nosso JavaScript no mesmo arquivo do HTML. Nosso intuito não é discutir arquitetura aqui. Vamos criar uma tag script logo depois de nosso canvas, e já vamos definir nossa função inicializar que chamamos acima.</p>




<pre class="brush: jscript; title: ; notranslate" title="">&lt;script type="text/javascript"&gt;
function inicializar()
{
 // Nosso código aqui
}
&lt;/script&gt;
</pre>




<p><strong>Jogador</strong><br/>
Vamos começar desenhando o jogador, que nada mais é do que uma barra.</p>




<p>Vamos iniciar algumas variáveis acima da nossa função. barraAltura e barraLargura.<br/>
Em seguida em nossa função inicializar setamos os valores desejados para elas.</p>




<p>Para desenhar com o canvas, precisamos capturar o elemento com javaScript e usar o contexto que no nosso caso vai ser 2D.</p>




<p>O método para desenhar retângulos com canvas é fillRect. Essa função nos pede a posição do elemento (pontos X e Y), sua largura e sua altura.</p>




<p>Como a posição X (horizontal) do jogador vai ficar mudando, vamos criar uma variável para isso também. Já a posição Y (vertical) como não vai mudar, podemos deixá-la fixa usando a altura do canvas menos o tamanho da barra.</p>




<p>Confira o código abaixo com as explicações acima:</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX;
        
function inicializar()
{
    barraAltura = 15;
    barraLargura = 90;

    jogadorPosicaoX = 0;

    canvas = document.getElementById("canvas");
    context = canvas.getContext("2d");

    context.fillRect(jogadorPosicaoX, canvas.height - barraAltura, barraLargura, barraAltura);
}
</pre>




<p>Resultado na tela:<br/>
<img src="../../../assets/uploads/2013/09/imagem2-300x240.png" alt="" title="imagem2" width="300" height="240" class="alignnone size-medium wp-image-659" /><br style="clear: both;" /></p>




<p>Nosso jogador não ficou centralizado, porque definimos sua posição X como 0, ou seja, o canto esquerdo do canvas.<br/>
Altere os valores de pouco em pouco para você perceber como o jogador irá se mover, isso também irá ajudar na lógica de colisão mais para frente. Entendido isso, vamos deixar nosso jogador centralizado, pegando o tamanho do canvas e dividindo por 2.</p>




<p>Ao atualizar seu browser e conferir o resultado nesse ponto não se preocupe, você não está com problema na vista. É necessário diminuir o tamanho da barra para que o jogador fique exatamente no centro do canvas. Ficando então da seguinte maneira.</p>




<pre class="brush: jscript; title: ; notranslate" title="">jogadorPosicaoX = (canvas.width - barraLargura) / 2;
</pre>




<p>Use os parênteses para fazer a subtração primeiro.</p>




<p><strong>Comandos do jogador</strong><br/>
É hora de dar vida ao jogador.<br/>
O que queremos é que quando for pressionado para a direita, para esquerda, a nossa barra obedeça isso.</p>




<p>Vamos deixar nosso javaScript de olho quando o jogador apertar alguma tecla com os Event Listeners do javaScript.</p>




<p>Então definimos a função desse listener. Aqui no meu notebook, o código das teclas para esquerda e para direita são respectivamente 37 e 39. Isso pode variar se você tem um tipo diferente de teclado ou ainda se quiser outras teclas de comando.</p>




<p>Vamos agora reposicionar o jogador de acordo com as teclas pressionadas.<br/>
Se apertar a tecla código 37, esquerda, diminuimos a posição do jogador. Se apertar a tecla código 39 vamos somar.</p>




<p>Mas vamos somar/diminuir quanto? Vamos definir uma variável para a velocidade do jogador, essa velocidade será a quantidade de pixels que o jogador se movimenta a cada vez que é pressionado as teclas. Voltando então, se pressionar para a direita somamos a velocidade do jogador, se pressionar para a esquerda diminuimos a velocidade do jogador.</p>




<p>Não esqueça de desenhar a barra novamente com a posição nova do jogador.</p>




<p>Confira o código abaixo:</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador;
        
function inicializar() ...
    velocidadeJogador = 20;
    ...
    document.addEventListener('keydown', keyDown);
}
            
function keyDown(e) 
{
    if(e.keyCode == 37)
    {
        jogadorPosicaoX -= velocidadeJogador;
    }
                
    if(e.keyCode == 39)
    {
        jogadorPosicaoX += velocidadeJogador;
    }

    context.fillRect(jogadorPosicaoX, canvas.height - barraAltura, barraLargura, barraAltura);
}
</pre>




<p>Atualizando nossa tela e apertando as teclas você vê o resultado.<br/>
<img src="../../../assets/uploads/2013/09/Imagem3-300x241.png" alt="" title="Imagem3" width="300" height="241" class="alignnone size-medium wp-image-658" /><br style="clear: both;" /></p>




<p>Percebe um problema? Temos dois na verdade, mas vamos um de cada vez.<br/>
O primeiro é que não estamos apagando a posição anterior do jogador. Estamos então tendo a sensação de que a barra está aumentando de tamanho.</p>




<p>Para resolver isso temos que entender um conceito no desenvolvimento de jogos que é o GameLoop.<br/>
Não vou entrar em detalhes á fundo, mas acompanhe.</p>




<p><strong>Game Loop &#8211; Explicação ultra simples</strong><br/>
Um jogo não passa de um loop infinito. Se você perde, você volta ao começo.<br/>
Então pense em um loop que contêm algumas verificações dentro dele que serão os comandos do jogador, pontuação e etc.</p>




<p>Durante esse loop, os inimigos, o jogador e outras coisas na tela irão mudar de posição o tempo todo.<br/>
Mas você deve apagar a posição anterior caso contrário vai ficar um efeito como o que estamos tendo.</p>




<p>Então vamos apagar tudo da tela e fazer aparecer novamente. Ok!<br/>
Mas isso não pode ser visível ao jogador, a tela não pode parecer que está piscando.<br/>
Então vamos definir um tempo, um certo número de frames que não permita que o jogador perceba isso.</p>




<p>Então vamos re-estruturar nosso código, pensando nesse conceito.</p>




<p>No topo temos a definição das variáveis.</p>




<p>Em seguida na função inicializar, vamos deixar apenas o valor inicial das variável e o listener, e de dentro dela chamar o gameLoop.<br/>
Para o loop, vamos usar setInterval e chamar nossa função a cada 30 milisegundos.<br/>
Ficando assim:</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador;
        
function inicializar()
{
    barraAltura = 15;
    barraLargura = 90;

    jogadorPosicaoX = (canvas.width - barraLargura) / 2;
    velocidadeJogador = 20;

    canvas = document.getElementById("canvas");
    context = canvas.getContext("2d");              

    document.addEventListener('keydown', keyDown);

    setInterval(gameLoop, 30);
}
</pre>




<p>Seguimos o código com a função keyDown que fizemos acima, mas já vamos resolver nosso segundo problema que não comentei anteriormente. O jogador não pode continuar indo para a direita ou para esquerda se ele chegar aos limites do canvas. Então adicionamos algumas verificações para isso. Repare também que não vamos mais redesenhar a tela a partir dessa função.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function keyDown(e) 
{
    if(e.keyCode == 37)
    {
        if(jogadorPosicaoX &gt; 0)
        {
            jogadorPosicaoX -= velocidadeJogador;
        }
    }

    if(e.keyCode == 39)
    {
        if(jogadorPosicaoX &lt; (canvas.width - barraLargura))
        {
            jogadorPosicaoX += velocidadeJogador;
        }
    }
}
</pre>




<p>Por último nosso gameLoop. Ele contém uma função que desenha um retângulo em branco em cima de toda a área do canvas.<br/>
Isso limpa a nossa tela. E em seguida redesenhamos nosso jogador.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function gameLoop()
{
    context.clearRect(0, 0, canvas.width, canvas.height);

    context.fillRect(jogadorPosicaoX, canvas.height - barraAltura, barraLargura, barraAltura);
}
Recarregue sua tela e se divirta movimentando a barra.

&lt;strong&gt;Bola&lt;/strong&gt;
Vamos primeiro desenhar uma bola parada no topo da tela.
Vamos definir algumas configurações para ela. Diâmetro, posição X, posição Y e sua velocidade.
1
var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, bolaDiametro, bolaPosX, bolaPosY, velocidadeBola;
        
function inicializar()
{
    ...
    bolaDiametro = 10;
    bolaPosX = canvas.width / 2;
    bolaPosY = 0;
    velocidadeBola = 10;
    ...
}
</pre>




<p>Para desenhar a bola, adicione as seguintes linhas dentro de gameLoop.</p>




<pre class="brush: jscript; title: ; notranslate" title="">function gameLoop()
{
    ...
    context.beginPath();
    context.arc(bolaPosX, bolaPosY, bolaDiametro, 0, Math.PI * 2, true);
    context.fill();
    ...
}
</pre>




<p>Procure pesquisar some a função de desenho do arco que usamos acima. Foge do mérito desse artigo explicá-la.</p>




<p>Como resultado você deve ver metade da bola desenhada no topo do canvas. Como abaixo:<br/>
<img src="../../../assets/uploads/2013/09/Imagem4-300x240.png" alt="" title="Imagem4" width="300" height="240" class="alignnone size-medium wp-image-657" /><br style="clear: both;" /></p>




<p>Vemos metade dela pois ela é desenhada a partir do centro, como setamos Y para 0, a outra metade está acima do canvas.<br/>
Sendo desenhada do centro, não precisamos diminuir seu diâmetro para centralizar ela na tela, bastou dividir por 2 o eixo X.</p>




<p><strong>Movimentando a bola</strong><br/>
Bom, não queremos que a bola inicia com metade aparecendo, melhor que isso queremos que ela venha antes do canvas.<br/>
Você pode setar o valor de bolaPosY para -10 para que isso aconteça.</p>




<pre class="brush: jscript; title: ; notranslate" title="">...
    bolaPosY = -10;
    ...
</pre>




<p>Agora vamos movimentar ela como se estivesse caindo, no eixo Y.<br/>
Simples não? Basta a cada gameLoop diminuir a velocidade da bola.</p>




<p>Mas veja que isso só pode acontecer se a posição Y da bola for menor que a altura do canvas, caso contrário a bola vai descer até o infinito.</p>




<p>E já que a bola chegou ao fim do canvas, que tal iniciar outra lá no topo?</p>




<p>Acompanhe isso no trecho abaixo:</p>




<pre class="brush: jscript; title: ; notranslate" title="">...
if(bolaPosY &lt;= canvas.height)
{
    bolaPosY += velocidadeBola;
}
else
{
    bolaPosY = -10;
}
...
</pre>




<p>Legal! Mas o jogo já não é muito divertido, se a bola ficar caindo sempre no mesmo lugar então.<br/>
Vamos adicionar um cálculo para fazer a posição X da bola variar cada vez que é criada uma nova.<br/>
Basta reformular o nosso else acima.</p>




<pre class="brush: jscript; title: ; notranslate" title="">...
else
{
    bolaPosX = Math.random() * 600;
    bolaPosY = -10;
}
...
</pre>




<p>Você já pode ir treinando para o game final agora.</p>




<p><strong>Colisão</strong><br/>
Chegou a hora de checar se a bola colide com a barra e com isso marcar pontos para você.</p>




<p>Vamos definir uma variável pontosJogador. Não esqueça de iniciá-la como zero dentro da função inicializar.</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, bolaDiametro, bolaPosX, bolaPosY, velocidadeBola, pontosJogador;

function inicializar()
{
    ...
    pontosJogador = 0;
    ...
}
</pre>




<p>Em seguida vamos pensar na matemática da colisão.<br/>
Temos que fazer um cálculo que coloque a bola em cima da barra.<br/>
Então primeiramente, a posição X da bola tem de ser maior que a posição X da barra.<br/>
Mas também essa posição X da bola tem de ser menor que a posição X da barra + o tamanho dela.<br/>
Lembrando que na barra, sua posição X é o início dela, no canto esquerdo, por isso somamos a sua largura.</p>




<p>Não podemos bater apenas o ponto X. O eixo Y da bola tem de ser maior ou igual que a altura do canvas menos a altura da barra.</p>




<p>Dentro do IF da colisão incrementamos os pontos do jogador.</p>




<p>Em seguida temos um código para escrever a pontuação na tela.</p>




<p>Confira o código abaixo com a explicação acima:</p>




<pre class="brush: jscript; title: ; notranslate" title="">if((bolaPosX &gt; jogadorPosicaoX && bolaPosX &lt; jogadorPosicaoX + barraWidth) && bolaPosY &gt;= canvas.height - barraHeight)
{
    pontosJogador++;
}

context.font = "32pt Tahoma";
context.fillText(pontosJogador, canvas.width - 70, 50);
</pre>




<p>Hora de rodar o seu jogo!<br/>
<img src="../../../assets/uploads/2013/09/Imagem5-300x241.png" alt="" title="Imagem5" width="300" height="241" class="alignnone size-medium wp-image-656" /><br style="clear: both;" /></p>




<p>Mas espere! Isso não é basquete e a cada bola que pegamos estamos fazendo 3 pontos ou mais.<br/>
Porque isso está acontecendo?</p>




<p>Ah, simples! Como refazemos a tela a cada 30 milesegundos, a bola leva muito mais tempo que isso para passar pela barra. Então ela está caindo no IF de colisão mais de uma vez.</p>




<p>Para resolver isso vamos adicionar uma flag dizendo se colidiu ou não.<br/>
Vamos primeiro definir essa variável, em seguida inicializar ela como false.</p>




<pre class="brush: jscript; title: ; notranslate" title="">var barraAltura, barraLargura, jogadorPosicaoX, velocidadeJogador, bolaDiametro, bolaPosX, bolaPosY, velocidadeBola, pontosJogador, colisao;

function inicializar()
{
    ...
    colisao = false;
    ...
}
</pre>




<p>Agora no IF onde checamos a colisão, mudamos o valor para true quando colidir, e antes de checar se colidiu verificamos se esse status ainda é false.</p>




<pre class="brush: jscript; title: ; notranslate" title="">if((bolaPosX &gt; jogadorPosicaoX && bolaPosX &lt; jogadorPosicaoX + barraLargura) && bolaPosY &gt;= canvas.height - barraAltura && colisao == false)
{
    pontosJogador++;
    colisao = true;
}
</pre>




<p>Por último, se uma bola nova começa a cair ela tem de vir com esse status como falso.<br/>
Lembra do nosso else que cria uma nova bola no eixo X?</p>




<pre class="brush: jscript; title: ; notranslate" title="">...
else
{
    bolaPosX = Math.random() * 600;
    bolaPosY = -10;
    colisao = false;
}
...
</pre>




<p>Feito! Hora de chamar os amigos e iniciar um campeonato.</p>




<p><strong>Conclusão</strong><br/>
Estude alterando as variáveis como velocidade do jogador, velocidade da bola e etc.<br/>
A partir daqui pode surgir muita coisa. Quem sabe não continuamos desenvolvendo esse jogo em um próximo post?</p>




<p>Código completo aqui: <a href="https://github.com/flaviosilveira/primeiro-jogo-html5">https://github.com/flaviosilveira/primeiro-jogo-html5</a></p>




<p>Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant, PuPHPet E PHP Built In]]></title>
    <link href="http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in/"/>
    <updated>2013-09-15T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/vagrant-puphpet-e-php-built-in</id>
    <content type="html"><![CDATA[<p>Fala pessoal.<br/>
Hoje trago uma dica simples, talvez sem uma utilidade de pronto, mas que pode ser interessante para algum estudo.</p>




<p><strong>O que é Vagrant?</strong><br/>
Para quem ainda não conhece, Vagrant é uma ferramenta que vem revolucionando os ambientes de desenvolvimento.<br/>
Se você ainda não sabe nada sobre essa ferramenta, confira o post que escrevi aqui no blog: <a href="http://flaviosilveira.com/2012/vagrant-facil-e-util/">http://flaviosilveira.com/2012/vagrant-facil-e-util/</a>.</p>




<!--more-->




<p>Alguns pontos do Vagrant:<br/>
&#8211; Com o Vagrant você não precisa instalar apache e outras ferramentas e poluir sua máquina.<br/>
&#8211; Você pode criar uma máquina virtual para cada projeto e com isso ter uma versão igual ao seu servidor de produção, com a mesma versão de PHP, de MySQL e etc.<br/>
Com isso acaba aquela desculpa de &#8220;Na minha máquina funciona!&#8221;.<br/>
&#8211; Com o Vagrant você pode distribuir o mesmo ambiente para todo seu time de desenvolvimento, evitando funcionamentos diferentes entre pessoas do mesmo time.<br/>
&#8211; Muito mais.</p>




<p><strong>PuPHPet: Arquivos puppet</strong><br/>
Com arquivos puppet (.pp) você pode definir pacotes, programas e extensões a serem instaladas na sua máquina virtual.<br/>
Geralmente são coisas complicadas e sempre acaba surgindo um problema quando são feitos esses arquivos na mão.</p>




<p>Felizmente surge o PuPHPet <a href="https://puphpet.com/">https://puphpet.com/</a>, uma ferramenta online que cria o puppet para você. Você seleciona tudo o que você quer, incluindo pacotes PEAR, pacotes PECL, etc.<br/>
Permite também setar o XDebug, timezone, escolher versão do PHP, do MySQL, incluir o composer, muito mais.</p>




<p>Dê uma atenção especial na opção BOX IP Address. Nesse campo você define o ip da sua máquina virtual.<br/>
É esse IP que você vai digitar no browser da sua máquina e acessar o seu projeto.<br/>
Por padrão o PuPHPet traz o IP 192.168.56.101.</p>




<p><strong>O que é PHP Built In?</strong><br/>
Com a versão 5.4, o PHP trouxe uma novidade para os ambientes de desenvolvimento. O PHP Buitl In.<br/>
É um web server rodando direto em cima do PHP, mas apenas com propósitos de desenvolvimento.<br/>
Com um simples comando você define a porta da onde quer rodar o servidor, e pronto. Sem precisar de Apache, NGinx ou o que for.<br/>
Uma coisa rápida para testar seu projeto. Veja detalhes na documentação: <a href="http://www.php.net/manual/pt_BR/features.commandline.webserver.php">http://www.php.net/manual/pt_BR/features.commandline.webserver.php</a></p>




<p><strong>Mãos a Obra</strong><br/>
Instale a versão mais recente do Vagrant acessando a página de downloads em <a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a>.<br/>
Uma dica é ter instalado o Virtual Box para que tudo corra bem. A instalação não tem segredos.</p>




<p>Um segundo passo é configurar a sua máquina com a ajuda do PuPHPet <a href="https://puphpet.com/">https://puphpet.com/</a>.<br/>
Escolha no mínimo uma versão 5.4 do PHP. Faça o download do arquivo e posicione onde melhor julgar na sua máquina.</p>




<p>Via console, acesse essa pasta e vamos subir a sua máquina virtual com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant up
</pre>




<p>Esse comando irá fazer o download de tudo que você selecionou de configuração via PuPHPet e deixar a máquina online para você.<br/>
Ao final da configuração, você já é capaz de acessar a sua máquina via porta 80 por exemplo, digite em seu navegador o ip que foi setado no campo BOX IP Address no PuPHPet.</p>




<p>Mas que tal testar essa funcionalidade que veio com o PHP 5.4? Vamos colocar o PHP Built In para rodar.<br/>
Vamos acessar sua máquina virtual via ssh, com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant ssh
</pre>




<p>Caso você precise do root para qualquer coisa, basta colocar um sudo na frente do que precisar.</p>




<p>Vamos configurar um pequeno projeto PHP apenas para ocasião de teste. Por exemplo:</p>




<pre class="brush: bash; title: ; notranslate" title="">cd /var/www
mkdir teste
cd teste
</pre>




<p>Dentro dessa pasta teste que criamos, crie um arquivo PHP simples, com um echo por exemplo.</p>




<p>Você será capaz de acessar isso digitando seu BOX IP/teste, mas, para testar o PHP Built In, entre com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">sudo php -S 192.168.56.101:8080
</pre>




<p>Não esqueça de substituir 192.168.56.101 pelo seu BOX IP.<br/>
8080 é a porta que escolhemos aqui. Você pode definir a porta que quiser, com exceção das que já estão em uso.<br/>
** Qualquer comando executado nessa mesma janela, ou um ctrl+c irá derrubar o server.</p>




<p>Pronto, o PHP Built In está escutando na porta definida.<br/>
Você pode conferir isso abrindo um outro terminal e consultando os listenings com o comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">netstat -ln
</pre>




<p>Lembrando que esse comando pode variar de acordo com a distribuição que você selecionou na sua BOX.</p>




<p>Pronto. Você pode acessar do seu browser o seu BOX IP:PORTA e acessar o seu projeto diretamente, sem barras nem nada.<br/>
Aqui eu acessei <a href="http://192.168.56.101:8080/.">http://192.168.56.101:8080/.</a></p>




<p><strong>Resumindo</strong><br/>
Escrevi esse post apenas como curiosidade. Sei que ele pode não ter nenhuma aplicação prática, mas de repente é uma para o pessoal conhecer o PHP Built In e ver até onde ele vai e porque ele está apenas disponível para desenvolvimento.</p>




<p>Grande Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C: A Linguagem Por Trás Do iOS – Parte 2]]></title>
    <link href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-2/"/>
    <updated>2013-04-13T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-2</id>
    <content type="html"><![CDATA[<p>[Este artigo faz parte de uma série de artigos para desenvolvimento IPhone, IPad e iOS.<br/>
<span style="line-height: 1.6em;">Você pode ver os demais artigos da série através da categoria Mobile]</span></p>




<p><span style="line-height: 1.6em;">Nessa parte 2 vamos continuar dando os primeiros passos e criando os primeiros exemplos com a linguagem Objective-C. Como discutido no primeiro artigo, essa linguagem veio evoluindo mas ainda mantém a linguagem C por trás dela, e é com isso que estamos criando nossos primeiros exemplos.</span></p>




<!--more-->




<p><span style="line-height: 1.6em;">[Acompanhe a primeira parte desse artigo em </span><a style="line-height: 1.6em;" href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/"><a href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/">http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/</a></a><span style="line-height: 1.6em;">]</span></p>




<p><strong style="line-height: 1.6em;">Lição de casa da parte 1<br /> </strong><span style="line-height: 1.6em;">No primeiro artigo deixei uma Lição de Casa que na verdade era uma pegadinha. Imprimir uma variável do tipo Boleana com o printf. Rapidamente o pessoal sacou e colocou nos comentários de que isso não existe. O </span><em style="line-height: 1.6em;">Boolean</em><span style="line-height: 1.6em;"> ou </span><em style="line-height: 1.6em;">Bool</em><span style="line-height: 1.6em;">, aparece em linguagens mais modernas. Para utilizar isso com C, fazemos uma simulação usando por exemplo um inteiro (0 e 1) ou também definindo um tipo qualquer e usando </span><em style="line-height: 1.6em;">enum</em><span style="line-height: 1.6em;">.</span></p>




<p><span style="line-height: 1.6em;">Hoje vamos Criar algumas condicionais e alguns loops.<br /> </span><span style="line-height: 1.6em;">Não tem novidade para quem já programa em outras linguagens, basta checar a sintaxe.<br /> </span><span style="line-height: 1.6em;">Mas caso você não se encaixe nesse grupo, siga o artigo.</span></p>




<p><span style="line-height: 1.6em;">Caso não lembre onde testar o seu código, que arquivo estamos mexendo e etc, consulte a parte 1!</span></p>




<p><strong style="line-height: 1.6em;">IF<br /> </strong><span style="line-height: 1.6em;">O IF não é segredo. Traduzindo do inglês = SE.<br /> </span><span style="line-height: 1.6em;">Se a condição bater, executa o código entre as chaves. Veja o exemplo:<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 5;
if(valor &lt; 10)
{
    printf("Menor que dez!");
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Definimos um variável inteira com valor 5. Se o valor for menor que 10, o printf é executado, caso contrário esse trecho é ignorado. </span><span style="line-height: 1.6em;">Simples não?</span></p>




<p><span style="line-height: 1.6em;">Para fazer comparações com a variável de valor, você pode usar no lugar do menor:<br /> </span><em style="line-height: 1.6em;">> Maior<br /> </em><em style="line-height: 1.6em;">&lt;= Menor ou Igual<br /> </em><em style="line-height: 1.6em;">>= Maior ou Igual<br /> </em><em style="line-height: 1.6em;">== Igual<br /> </em><em style="line-height: 1.6em;">!= Diferente</em></p>




<p><strong style="line-height: 1.6em;">ELSE<br /> </strong><span style="line-height: 1.6em;">Para os casos onde você quer executar algo quando o IF não bater, temos o ELSE. Traduzindo SENÃO.<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 15;
if(valor &lt; 10)
{
    printf("Menor que dez!");
}
else
{
    printf("Maior que dez!");
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Alteramos o valor da variável para 15. Em seguida adicionamos um ELSE.<br /> </span><span style="line-height: 1.6em;">Como valor é Maior que 10, esse trecho é pulado e o que está dentro das chaves do ELSE é executado.</span></p>




<p><strong style="line-height: 1.6em;">Combinando IFs e ELSEs<br /> </strong><span style="line-height: 1.6em;">Você pode combinar o If com o Else quantas vezes quiser, como no seguinte exemplo:<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 7;
if(valor == 7)
{
    printf("Valor Igual 7");
}
else if(valor &lt; 10)
{
    printf("Um numero menor que dez!");
}
else
{
    printf("Um numero maior que dez!");
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Alteramos a variável para 7, o que faz ela cair no primeiro IF. Caso contrário o código iria passando até bater com uma das condicionais. </span><span style="line-height: 1.6em;">Caso não bata com nenhum das condições ela cai no último ELSE. Lembrando que esse ELSE final não é obrigatório.</span></p>




<p><strong style="line-height: 1.6em;">SWITCH<br /> </strong><span style="line-height: 1.6em;">É recomendado evitar o uso de muitas combinações de IF e ELSE, para ficar mais fácil de manter o código ou até para entendimento do mesmo. </span><span style="line-height: 1.6em;">Veja o exemplo:</span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int valor = 16;
    
switch (valor) 
{
    case 7:
        printf("Sete!");
    break;
        
    case 9:
        printf("Nove!");
    break;    
        
    case 16:
        printf("Dezesseis!");
    break;    
        
    case 10:
        printf("Dez!");
    break;    
            
    default:
        printf("Outro!");
    break;
}
</pre>




<p><span style="line-height: 1.6em;">Entramos com o valor a ser analisado dentro do Switch.<br /> </span><span style="line-height: 1.6em;">Então usando o Case, entramos com as condicionais.<br /> </span><span style="line-height: 1.6em;">Caso não bata com nenhuma, temos a opção </span><em style="line-height: 1.6em;">DEFAULT</em><span style="line-height: 1.6em;">.</span></p>




<p><strong style="line-height: 1.6em;">FOR<br /> </strong><span style="line-height: 1.6em;">Quando temos a necessidade de executar uma ação várias vezes ou iterar um valor, surgem para nós os Loops.<br /> </span><span style="line-height: 1.6em;">E o FOR é um dos primeiros que encontramos.<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">for(int i = 0; i &lt;= 10; i++)
{
    printf("Valor de i: %d", i);
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Para entender o FOR, leia da seguinte maneira. i é igual a 0, enquanto i é menor ou igual que 10, vá aumentando i.</span></p>




<p><span style="line-height: 1.6em;">Esse i++, significa que estamos somando 1 ao valor de i, chamamos isso de incremento. Teremos mais detalhes sobre isso em próximos artigos.</span></p>




<p><span style="line-height: 1.6em;">Está é a maneira mais simples do FOR. Temos outros variações, mais complexas, com mais, com menos parâmetros.<br /> </span><span style="line-height: 1.6em;">Mas se você está começando fique com essa por enquanto.</span></p>




<p><strong style="line-height: 1.6em;">WHILE<br /> </strong><span style="line-height: 1.6em;">While, que traduzindo significa enquanto, é uma outra opção de loop. Veja o exemplo:<br /> </span></p>




<pre class="brush: cpp; title: ; notranslate" title="">int i = 0;
while (i &lt;= 10) 
{
    printf("Valor de i: %d", i);
    i++;
}
</pre>




<p>&nbsp;</p>




<p><span style="line-height: 1.6em;">Seguindo a mesma ideia do FOR, definimos o valor de i, mas dessa vez for da função. Enquanto i for menor igual que 10, o que temos dentro das chaves do while será executado.</span></p>




<p><span style="line-height: 1.6em;">Cuidado! Não esqueça de somar 1 ao valor de i cada vez que passarmos dentro do while.<br /> </span><span style="line-height: 1.6em;">Caso contrário teremos um loop infinito, e isso irá exceder o limite de memória e te causar problemas.</span></p>




<p><span style="line-height: 1.6em;">No exemplo acima, se i fosse por exemplo 15, o </span><em style="line-height: 1.6em;">WHILE</em><span style="line-height: 1.6em;"> não seria executado nenhuma vez.</span></p>




<p>Há situações onde precisamos executar ao menos uma vez o loop, mesmo que o valor não bata. Para essas situações temos o <em>DO WHILE</em>.</p>




<p><strong>DO WHILE<br/>
</strong></p>




<pre class="brush: cpp; title: ; notranslate" title="">int i = 15;
    
do 
{
    printf("Valor de i: %d", i);
    i++;
}
while (i &lt;= 10); 
</pre>




<p>O código é executado uma vez, independente se o valor bate com a condicional ou não.</p>




<p>No exemplo acima, como o valor está setado para 15, ele já não bate com nosso <em>WHILE</em> que pede um número menor igual a 10. Mesmo assim o código é executado uma vez, por conta do <em>DO</em>, traduzindo <em>FAÇA</em>.<span style="line-height: 1.6em;"> </span></p>




<p><strong>Resumindo<br/>
</strong><span style="line-height: 1.6em;">Os exemplos são bem simples e ainda não refletem exemplos muito reais. São exemplos fáceis de entender para que venham no futuro encaixar em problemas que você vai encontrar. </span></p>




<p>Pratique, mude valores das variáveis, faça seus exemplos, crie outras situações.<br/>
Esse é o caminho nesse estágio.</p>




<p>Até o próximo!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Montando a Tela Do Seu Aplicativo – Parte 1]]></title>
    <link href="http://flaviosilveira.com/2013/montando-a-tela-do-seu-aplicativo-parte-1/"/>
    <updated>2013-03-06T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/montando-a-tela-do-seu-aplicativo-parte-1</id>
    <content type="html"><![CDATA[<p><span style="line-height: 1.6em;">[Este artigo faz parte de uma série de artigos para desenvolvimento IPhone, IPad e iOS. Você pode ver os demais artigos da série através da categoria Mobile]</span></p>




<p>No artigo de hoje vamos conhecer alguns objetos para nos ajudar a criar a tela de nossos aplicativos para iOS. Para conhecer eles vamos usar o projeto que criamos nos artigos anteriores. É um projeto simples do tipo <em>Single View Application</em>, que ainda não tem nada demais, já que estamos apenas conhecendo algumas coisas. Então nada impede que você crie outro projeto do tipo <em>Single View Application</em>.</p>




<!--more-->




<p><strong>Interface Builder</strong></p>




<p>Como explicado no primeiro artigo, temos na estrutura que o XCode cria para nós arquivos do tipo StoryBoard. Como criamos nosso projeto com a opção <em>Universal</em> temos um StoryBoard para IPhone e outro para IPad, como mostra a imagem abaixo.<br/>
<span style="line-height: 1.6em;"><img class="size-full wp-image-633 alignleft" title="Estrutura do projeto" src="../../assets/uploads/2013/03/Imagem-1.png" alt="" width="296" height="115" /><br style="clear: both;" /></span><span style="line-height: 1.6em;">Ao clicar em um desses arquivos você visualiza o Interface Builder.</span></p>




<p>Vejamos por exemplo o arquivo <em>MainStoryboard_IPhone.storyboard</em>:<br/>
<span style="line-height: 1.6em;"><img class="alignnone size-large wp-image-634" title="Imagem 2" src="../../assets/uploads/2013/03/Imagem-2-1024x606.png" alt="" width="655" height="387" /></span><span style="line-height: 1.6em;">Uma pequena curiosidade aqui. As atuais versões do XCode trazem o Interface Builder acoplado ao XCode, tudo na mesma ferramenta. Em versões anteriores você tinha uma aplicação separada para isso, assim como o IPhone Simulator por exemplo. </span></p>




<p><span style="line-height: 1.6em;">Descrevendo rapidamente as janelas da imagem temos:</span></p>




<p>No canto esquerdo superior a Document Outline onde está aparecendo nossa<em>View Controller Scene</em>. É onde irá conter todos os elementos e objetos da nossa cena, da nossa tela.<br/>
<img class="size-full wp-image-631 alignleft" title="Imagem3" src="../../assets/uploads/2013/03/Imagem3.png" alt="" width="268" height="159" /><br style="clear: both;" /><br style="clear: both;" /></p>




<p>No canto direito superior é onde irão aparecer os utilitários. Nesses utilitários poderemos alterar tamanhos, identificadores, conexões com funções entre outros. Você pode navegar entre os botões para encontrar essas opções.<br/>
<img class="size-full wp-image-632 alignleft" title="Imagem4" src="../../assets/uploads/2013/03/Imagem4.png" alt="" width="241" height="198" /><br style="clear: both;" /><br style="clear: both;" /></p>




<p>Logo abaixo temos nossa Library de objetos, que é onde estão os objetos que vamos usar para montar nossas telas.<br/>
<span style="line-height: 1.6em;"><img class="size-full wp-image-629 alignleft" title="Imagem 5" src="../../assets/uploads/2013/03/Imagem-5.png" alt="" width="257" height="247" /><br style="clear: both;" /></span><span style="line-height: 1.6em;">Repare que temos uma caixa de busca logo no rodapé. Ela vai nos ajudar a encontrar mais rápido o que queremos sem que precisar ficar rolando e rolando com o mouse em busca de algo. Caso você navegue pelos botões que aparecem em cima, você irá para outras libraries que aparecem no XCode, mas não vamos usar nenhuma delas tão cedo então não se preocupe agora.</span></p>




<p>Resumindo então:</p>




<ul>
<li><span style="line-height: 1.6em;">Document outline: Mostra os objetos da nossa cena</span></li>
<li><span style="line-height: 1.6em;">Utilitários: Onde vamos alterar propiedades, características, identificadores, alinhamentos, etc…</span></li>
<li><span style="line-height: 1.6em;">Library de objects: Onde os objetos estão.</span></li>
</ul>




<p><div>
  <p>
    <strong>Primeiros Objetos</strong>
  </p></p>

<p>  <p>
    <span style="line-height: 1.6em;">Vamos agora conhecer 4 objetos básicos para montar nossas telas: Um botão, label, campo texto e um slider.<br /> </span><span style="line-height: 1.6em;">Esses são os objetos que mais devem surgir em seus projetos, mas claro que isso pode variar de projeto para projeto.</span><span style="line-height: 1.6em;"> </span>
  </p></p>

<p>  <p>
    <strong>Botão</strong>
  </p></p>

<p>  <p>
    <span style="line-height: 1.6em;">No campo de busca da library de objetos digite </span><em style="line-height: 1.6em;">Round Rec Button</em><span style="line-height: 1.6em;">. Ao começar a digitar você já vai ver o objeto surgir para você. Clique em cima dele e arraste para a sua tela. Posicione como preferir.</span>
  </p></p>

<p>  <p>
    Você pode trabalhar o alinhamento, largura e altura diretamente com o objeto, mas se preferir pode fazer isso também pelas janelas de utilitários. O mesmo para alterar o label do botão, você pode dar um duplo clique em cima dele ou alterar pelos utilitários. Experimente essas e algumas outras opções na janela de utilitários chamada <em>Attributes Inspector</em>.
  </p></p>

<p>  <p>
    <strong>Label</strong>
  </p></p>

<p>  <p>
    Devolta ao campo de busca da library de objetos, dessa vez vamos buscar por label. A label é uma simples etiqueta, um texto para nos indicar alguma coisa. Da mesma maneira que o botão você pode alterar algumas de suas características diretamente sobre o elemento, ou fazer isso pelas janelas utilitárias.  Tente por exemplo alterar a cor da fonte para vermelho.
  </p></p>

<p>  <p>
    Repare que ao mover diretamente os objetos pelo nosso protótipo de tela, algumas linhas quase que como réguas aparecem para te ajudar no alinhamento dos seus objetos. Use disso para manter tudo alinhado e bem distribuído.
  </p></p>

<p>  <p>
    <strong>Campo de texto</strong>
  </p></p>

<p>  <p>
    Para adicionar um campo de texto vamos devolta ao campo de busca da library de objetos, e digite Text Field. Nesse objeto o usuário poderá entrar com um texto. É aquele famoso objeto que quando ativo exibe um teclado na tela. Logo, além de todas as opções dos objetos anteriores, como cor da fonte, alinhamento, tamanho, você pode selecionar qual o tipo de teclado que o usuário irá ter disponível.
  </p></p>

<p>  <p>
    Outra opção ainda é setar um placeholder no campo de texto e tentar com isso economizar um label para explicar do que se trata aquele campo.
  </p></p>

<p>  <p>
    <strong>Slider</strong>
  </p></p>

<p>  <p>
    Um slider pode servir como marcador de alguma coisa, um projeto onde por exemplo o usuário deve entrar sua altura ou seu peso pode ser melhor apresentado com um slide. Na caixa de busca da library procure por <em>slider</em>.
  </p></p>

<p>  <p>
    Um detalhe é que o slider não traz um indicador de em que ponto ele está, como por exemplo 50% ou 100%. Então uma boa ideia é colocar junto do Slide uma Label para indicar esse valor.
  </p></p>

<p>  <p>
    <strong>Exercício</strong>
  </p></p>

<p>  <p>
    Com o objetos que aprendemos acima, você deve ser capaz de montar uma tela como essa:<br /> <img class="alignnone size-medium wp-image-630" title="Imagem6" src="../../assets/uploads/2013/03/Imagem6-152x300.png" alt="" width="152" height="300" />
  </p></p>

<p>  <p>
    <strong>Difícil? Vou te ajudar</strong>
  </p></p>

<p>  <p>
    Esses são os 4 objetos que temos para hoje. Achou complicado de entender? Não te culpo já que é um tema totalmente visual. Por isso estou anexando a esse artigo o vídeo abaixo que segue os passos executados no texto. Com a leitura e o visual da coisa você deve entender tudo sem problemas.<br />
  </p></p>

<p>  <p>
    <br style="clear: both;" />Mas, caso ainda tenha dúvidas é só mandar. Grande Abraço!
  </p></p>

<p>  <iframe src="https://player.vimeo.com/video/61175405" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
<p><a href="https://vimeo.com/61175405">Montando a tela do seu aplicativo - Parte 1</a> from <a href="https://vimeo.com/user9814221">Fl&aacute;vio Silveira</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C: A Linguagem Por Trás Do iOS – Parte 1]]></title>
    <link href="http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1/"/>
    <updated>2013-02-21T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/objective-c-a-linguagem-por-tras-do-ios-parte-1</id>
    <content type="html"><![CDATA[<p>Fala pessoal!</p>




<p>Este é segundo artigo, que faz parte da série sobre desenvolvimento para iOS que estou fazendo. Se você perdeu o primeiro post siga esse link <a href="http://flaviosilveira.com/2013/comece-a-programar-para-ios/">http://flaviosilveira.com/2013/comece-a-programar-para-ios/</a> para acompanhar nossos passos desde o início.<span style="line-height: 1.6em;"> </span></p>




<p>Em nosso primeiro post criamos um projeto simples e entendemos a sua estrutura de pastas. Partindo desse ponto, vamos hoje conhecer um pouco da linguagem que vamos usar para desenvolver para iOS. É! XCode não é só arrastar e soltar, tem que codificar. E para isso usamos a linguagem Objective-C.</p>




<!--more-->




<p><strong>Rápida História</strong></p>




<p>Você deve achar que o Objective-C não é tão antigo, já que não faz tanto tempo que temos pessoas com IPhones desfilando por aí não é mesmo? Mas não, o Objective-C está na área desde o início dos anos 80 e foi idealizado e criado pelo PHD em Matemática biológica Brad Cox e pelo (também) PHD em Ciência cognitiva Tom Love.</p>




<p>Como com esses títulos eles caíram na programação eu não sei, mas outros detalhes da história deles, de como eles estavam preocupados com a falta de reutilização de código em cima do Smaltalk dentro da ITT e de como eles começaram a criação de um processador em C para resolver esses problemas, você pode encontrar dando aquela rápida pesquisada no Google. Se você está com seu listening de inglês em dia você pode conferir o próprio Tom Love falando sobre o assunto nesse vídeo no Youtube <a href="http://youtu.be/adI6-liGXqE">http://youtu.be/adI6-liGXqE</a> (Há outros vídeos e keynotes de Tom que você pode encontrar no youtube).</p>




<p>No vídeo, Love também comenta sobre como o Objective-C sobreviveu através dos anos até ele ser popularizado pela NeXT, empresa de Steve Jobs. A NeXT extendeu o GCC para compilar Objective-C e também criou as primeiras ferramentas de desenvolvimento para ele que vão evoluindo até chegar no XCode que temos em mãos hoje.</p>




<p>E aproveitando que comentei sobre o XCode, vale dizer que visto que o Objective-C é uma linguagem que já vem de algum tempo, você encontra vários compiladores para ela de modo que consiga estudar ela em separado. Mas como aqui vamos focar em IPhones, IPads e em ambiente Apple, nada melhor que o XCode na hora de te ajudar a desenvolver para esses fins.<span style="line-height: 1.6em;"> </span></p>




<p><strong>C</strong></p>




<p>Tom Love comenta que apesar de tudo que eles desenvolveram, o C continua lá sem nenhuma alteração. E é verdade. Os tipos prímarios de dados em cima de Objective-C são exatamente os mesmos que no C puro. Para experimentar isso abra em seu projeto o arquivo <em>ViewController.m</em> e procure pelo método <em>viewDidLoad</em> (view carregada), dentro dele você pode experimentar alguns tipos de dados no melhor estilo C.</p>




<p>Os principais tipos de dados em C são <em>char</em>, <em>int</em>, <em>float</em>, <em>double</em> e <em>bool</em>. Para definir eles usamos a seguinte sintaxe:</p>




<pre class="brush: cpp; title: ; notranslate" title="">tipo nome_da_variavel;
tipo nome_da_segunda_variavel = valor_da_variavel;
</pre>




<p>Repare que no primeiro exemplo de sintaxe apenas iniciamos a variável, sem nenhum valor inicial. Já no segundo exemplo, aproveitamos e já definimos um valor para ela. Vejamos alguns exemplos abaixo:</p>




<pre class="brush: cpp; title: ; notranslate" title="">// Char
char caracter;
char letra = 'a';
char nome[7] = 'Flavio;

// Int
int idade;
int ano = 2013;

// Float
float peso = 81.30;

// Double
// que tal você pesquisar a diferença do float para o double?
double pi = 3.1415926535;

// Bool --de booleano
bool aceite = TRUE;
</pre>




<p>Certo, certo. Estamos aqui definindo variáveis. Mas que coisa sem graça. Vamos colocar um pouquinho mais de diversão nisso?</p>




<p><span style="line-height: 1.6em;">No XCode vamos abrir nosso console e exibir nossas animadas variáveis. Para exibir o console você pode ir até o menu </span><em style="line-height: 1.6em;">View >> Debug Area >> Active Console</em><span style="line-height: 1.6em;"> ou em </span><em style="line-height: 1.6em;">View >> Debug Area >> Show Debug Area. </em><span style="line-height: 1.6em;">Outra opção é clicar em um pequeno botão no rodapé do XCode que contém uma seta apontando para cima como mostra a figura abaixo:<br /> <a href="../../assets/uploads/2013/02/Imagem-1.png"><img class="alignnone size-full wp-image-617" title="Imagem 1" src="../../assets/uploads/2013/02/Imagem-1.png" alt="" width="174" height="52" /></a></p>


<p></p></p>

<p>
  </span>
</p>




<p>
  Seu console deve parecer como na imagem abaixo:<br /> <a href="../../assets/uploads/2013/02/Imagem-2.png"><img class="alignnone size-large wp-image-618" title="Imagem 2" src="../../assets/uploads/2013/02/Imagem-2-1024x102.png" alt="" width="655" height="65" /></a>
</p>




<p>
  Console ativado, é hora de exibir as variáveis. Qual a função que exibi variávies no C? A mais conhecida que você já deve ter visto por aí é o printf. Fazendo um teste com o array de char que definimos acima temos o seguinte código:
</p>




<pre class="brush: cpp; title: ; notranslate" title="">

- (void)viewDidLoad
{
[super viewDidLoad];

// Do any additional setup after loading the view, typically from a nib.

// Char
char nome[7] = "Flavio";

printf("Nome: %s", nome);
}
</pre>




<p>
  </span><span style="line-height: 1.6em;">Compile o seu projeto para ver a variavel sair no output. (Caso não lembre como compilar o projeto, dê uma olhada no final do primeiro post da série </span><a style="line-height: 1.6em;" href="http://flaviosilveira.com/2013/comece-a-programar-para-ios/">http://flaviosilveira.com/2013/comece-a-programar-para-ios/</a><span style="line-height: 1.6em;"> ).<br /> </span>
</p>




<p>
  Repare bem na sintaxe do printf. No primeiro parâmetro da função colocamos a string mais um identificador <em>%s</em>. Esse identificador será substituído pelo segundo parâmetro da função, no caso aqui nossa variável nome. Esse <em>s</em> em nosso identificador é um indicador para o tipo da nossa variável, no caso aqui String. Para imprimir um inteiro utilize o identificador <em>%d</em>, onde <em>d</em> se refere a decimal:
</p>




<pre class="brush: cpp; title: ; notranslate" title="">
- (void)viewDidLoad
{
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.

// Char
int ano = 2013;

printf("Ano: %d", ano);
}
</pre>




<p>
  </span><span style="line-height: 1.6em;">Sim, sim. É verdade que </span><em style="line-height: 1.6em;">%i</em><span style="line-height: 1.6em;"> tambem funciona para inteiros, mas em materiais por aí é mais comum ver o </span><em style="line-height: 1.6em;">%d</em><span style="line-height: 1.6em;">.</span>
</p>




<p>
  Continue seus testes com floats e doubles. Use o Identificador <em>%f </em>para esses dois tipos. Se quiser formatar seu numero utilize %.3f, onde 3 é o numero de casas decimais que você quer. <em>%lf </em>ou <em>%g</em> também servem para esses tipos.
</p>




<p>
  <strong>Lição de casa</strong>
</p>




<p>
  O que? Quer só ler o artigo com os códigos prontos e sair mandando ver? Aqui não! Para aprender tem que ir começando a se virar sozinho certo?
</p>




<p>
  A primeira lição que deixo é a de imprimir uma variável do tipo boleana usando o printf. Fácil não? Só dar aquela googada aí ou pegar aquela Barsa da estante.
</p>




<p>
  Para aqueles que já tem uma noções de lógica, que tal experimentar alguns IFS, ELSES, WHILE, CASE, DO…WHILE, FOR ??
</p>




<p>
  Para os demais, é isso que veremos no próximo post.
</p>




<p>
  Grande Abraço!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comece a Programar Para iOS]]></title>
    <link href="http://flaviosilveira.com/2013/comece-a-programar-para-ios/"/>
    <updated>2013-02-14T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2013/comece-a-programar-para-ios</id>
    <content type="html"><![CDATA[<p><strong style="line-height: 1.6em;">Sem blá blá blá</strong></p>




<p><span style="line-height: 1.6em;">Sem muito blá blá blá, quero hoje começar uma pequena série sobre desenvolvimento para iOS. </span><span style="line-height: 1.6em;">Quero ajudar quem deseja conhecer a tecnologia sem a enrolação que vejo em outros materiais sobre o assunto. </span><span style="line-height: 1.6em;">Paralelo a isso também consigo me manter estudando o assunto e evoluindo junto com quem acompanha os artigos.</span><span style="line-height: 1.6em;"> </span></p>




<p>Vou pular toda aquela parte que você já deve ter lido por aí sobre precisar de um Mac, que há outras maneiras de você conseguir instalar o sistema da Apple em um PC Intel comum, que vamos usar o XCode porque ele facilita nossa vida, instalação do XCode, as camadas de desenvolvimento do iOS, etc, etc. Mas é claro, caso venha a necessidade podemos segurar e detalhar um pouco mais o que surgir.</p>




<!--more-->




<p><strong>Criando seu primeiro projeto no XCode</strong></p>




<p>Vamos começar com tudo, direto para a prática. Para isso abra o XCode e crie um novo projeto. <span style="line-height: 1.6em;">Vamos criar um projeto do tipo Single view Application, ele já vai nos trazer uma tela inicial e um controller para trabalharmos. </span><span style="line-height: 1.6em;">Na janela seguinte dê um nome qualquer para seu projeto e no último passo selecione uma pasta para ele.<br /> </span><span style="line-height: 1.6em;">Acompanhe pelas imagens abaixo:</span></p>




<p><a href="../../assets/uploads/2013/02/imagem1.png"><img class="alignnone size-medium wp-image-604" title="imagem1" src="../../assets/uploads/2013/02/imagem1-300x200.png" alt="" width="300" height="200" /></a>                 <a style="line-height: 1.6em;" href="../../assets/uploads/2013/02/imagem2.png"><img class="alignnone size-medium wp-image-606" title="imagem2" src="../../assets/uploads/2013/02/imagem2-300x234.png" alt="" width="300" height="234" /></a>            <a style="line-height: 1.6em;" href="../../assets/uploads/2013/02/imagem3.png"><img class="alignnone size-medium wp-image-605" title="imagem3" src="../../assets/uploads/2013/02/imagem3-286x300.png" alt="" width="286" height="300" /></a><span style="line-height: 1.6em;">Repare que não mudamos nada do que já veio selecionado. Estamos usando tudo como já vem configurado.</span><span style="line-height: 1.6em;"> </span></p>




<p>Dê uma atenção especial no segundo passo, na opção Devices, onde ficou selecionado <em>Universal</em>, o que significa que estamos desenvolvendo tanto para IPhone quanto para IPad. Teríamos a opção nesse passo de selecionar ou um ou outro se quisessémos.</p>




<p><strong><br/>
Estrutura do seu projeto</strong></p>




<p>Certo, vamos dar uma analisada no que o XCode criou para a gente aqui.<br/>
<span style="line-height: 1.6em;">No canto esquerdo superior temos o painel project navigator como na imagem abaixo.<br /> </span><span style="line-height: 1.6em;">Se por qualquer motivo você não estiver visualizando ele, basta ir em <em>View >> Navigators >> Show Project Navigator</em>.</span></p>




<p><span style="line-height: 1.6em;"><a href="../../assets/uploads/2013/02/imagem-4.png"><img class="alignnone size-full wp-image-607" title="imagem 4" src="../../assets/uploads/2013/02/imagem-4.png" alt="" width="257" height="241" /></a> </span></p>




<p>Vamos ver primeiro a pasta que leva o nome do seu projeto.<br/>
<span style="line-height: 1.6em;">Repare que vamos ter extensões de arquivo .h e .m.<br /> </span><span style="line-height: 1.6em;">Nos arquivos .h temos assinaturas e características e no .m vamos ter as implementações dos métodos. (Se você não entendeu muito bem isso agora não se preocupe, mas lembre-se disso).</span><span style="line-height: 1.6em;"> </span></p>




<p>O AppDelegate recebe notificações do sistema operacional iOS.<br/>
<span style="line-height: 1.6em;">Informações como se seu aplicativo terminou de carregar ou se o usuário fechar seu aplicativo caem nesse arquivo.</span><span style="line-height: 1.6em;"> </span></p>




<p>O StoryBoard, é a interface gráfica do seu aplicativo.<br/>
<span style="line-height: 1.6em;">Lembra da opção </span><em style="line-height: 1.6em;">Universal</em><span style="line-height: 1.6em;"> quando criamos o projeto?<br /> </span><span style="line-height: 1.6em;">Por termos optado por </span><em style="line-height: 1.6em;">universal</em><span style="line-height: 1.6em;"> o XCode preparou para a gente um storyBoard para IPhone e outro para IPad.</span></p>




<p>No ViewController é onde entraremos com código para fazer as interações com nossa interface gráfica.<br/>
<span style="line-height: 1.6em;">Na Pasta Support Files temos alguns arquivos gerais do seu aplicativo, com ícones, imagens e também arquivos com informações do app.</span><span style="line-height: 1.6em;"> </span></p>




<p>Em seguida você vê a pasta para os testes, dentro dela arquivos que devem ser usados para os testes unitários.<span style="line-height: 1.6em;"> </span></p>




<p>A pasta frameworks serve para armazenar todas as bibliotecas usadas no seu projeto. Você pode expandir ela e reparar que o XCode já adicionou algumas bibliotecas para a gente usar aqui.</p>




<p>E finalmente a pasta products, que vai conter nosso produto final.<br/>
<span style="line-height: 1.6em;">Se você pretende colocar seu aplicativo na Apple Store, é daqui que as coisas vão sair.</span><span style="line-height: 1.6em;"> </span></p>




<p><strong><br/>
Compilando seu projeto</strong></p>




<p>É hora de colocar o seu projeto em ação. Para isso vamos compilar ele.</p>




<p><span style="line-height: 1.6em;">Antes de tudo você deve escolher em qual tipo de device quer ver seu aplicativo.<br /> </span><span style="line-height: 1.6em;">No canto superior esquerdo do XCode você pode selecionar entre o simulador do IPad (que vem por padrão selecionado) ou o simulador do IPhone, como mostrado na imagem.</span></p>




<p><a href="../../assets/uploads/2013/02/imagem5.png"><img class="alignnone size-medium wp-image-608" title="imagem5" src="../../assets/uploads/2013/02/imagem5-300x57.png" alt="" width="300" height="57" /></a><span style="line-height: 1.6em;"> </span></p>




<p>Feito isso, clique no botão Run, o primeiro botão no canto esquerdo do XCode, ou pressione <em>CMD + R</em>. <span style="line-height: 1.6em;">O resultado deve ser como da imagem abaixo.<br /> <a href="../../assets/uploads/2013/02/imagem6.png"><img class="alignnone size-medium wp-image-611" title="imagem6" src="../../assets/uploads/2013/02/imagem6-151x300.png" alt="" width="151" height="300" /></a> </span></p>




<p>Como não escrevemos nenhum código e ainda não colocamos nada em nosso storyboard, temos essa tela em branco.<br/>
<span style="line-height: 1.6em;">Vamos descobrir como mudar isso no próximo post.</span><span style="line-height: 1.6em;"> </span></p>




<p>Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hangout – Começando Bem Com Zend Framework 1]]></title>
    <link href="http://flaviosilveira.com/2012/hangout-comecando-bem-com-zend-framework-1/"/>
    <updated>2012-11-19T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2012/hangout-comecando-bem-com-zend-framework-1</id>
    <content type="html"><![CDATA[<p>Fala pessoal!</p>




<p>Recentemente estive no Rio de Janeiro para ministrar o curso <em>Começando Bem com Zend Framework</em>. Curso que mostra um bé-a-bá em cima do Zend Framework 1 usando a ajuda da Zend Tool. Infelizmente por alguns problemas técnicos não consegui realizar o curso completo e por conta disso marquei um hangout com o pessoal que estava inscrito no evento.</p>




<p>Com esse vídeo fecho essa maneira como o curso é apresentado, sendo que o Zend Framework 2 foi lançado recentemente e vou adaptar o curso para ele. Mas isso não tira a importância de conhecer o Zend 1 visto que ainda teremos manutenções e sistemas legados no mercado, além de servir como base para o próprio Zend 2.</p>


<!--more-->


<iframe width="560" height="315" src="https://www.youtube.com/embed/pJgdn3OG4OI" frameborder="0" allowfullscreen></iframe>




<p>O hangout foi realizado junto com um chat onde o pessoal interagiu, fez perguntas e deu sua opinião. Executei os códigos ao vivo, o que gerou problemas que foram interessantes para o aprendizado do pessoal. O resultado de tudo isso você confere no vídeo acima.</p>




<p>Grande Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant: Fácil E útil]]></title>
    <link href="http://flaviosilveira.com/2012/vagrant-facil-e-util/"/>
    <updated>2012-11-07T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2012/vagrant-facil-e-util</id>
    <content type="html"><![CDATA[<p>Salve pessoal!</p>




<p>Hoje eu quero passar uma dica para fazer você parar com aquela desculpa &#8220;Na minha máquina tá funcionando&#8221;. Para isso vou apresentar para vocês o Vagrant <a href="http://vagrantup.com/">http://vagrantup.com/</a>.</p>




<p>O Vagrant é uma ferramenta que te ajuda na criação da infraestrutura para o seu projeto, usando para isso uma máquina virtual. Mas aí você pensa: &#8220;Uma máquina virtual para cada projeto?? Isso vai dar trabalho&#8221;. A grande jogada é que o Vagrant deixa muita coisa invísivel, deixando com que você se preocupe apenas com seu código. É uma máquina virtual reduzida e portável facilmente. Para cada projeto você pode deixar um ambiente diferente rodando, um com PHP 4, outro com PHP 5, um em Debian outro em CentOS, você escolhe.</p>




<!--more-->




<p><strong><br/>
Instalação</strong></p>




<p>Para criar suas máquinas vituais o Vagrant precisa do Virtual Box, um cliente de máquinas virtuais da Oracle bastante conhecido. Basta instalar! Você não precisa deixar o programa aberto para usar o Vagrant. Você pode fazer o download do Virtual box no seguinte link <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a>.</p>




<p>Instalado o Virtual Box, faça o download do Vagrant e o instale. Procure pela versão do seu sistema operacional no seguinte link <a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a>.</p>




<p><strong><br/>
Configurando e rodando</strong></p>




<p>Outra coisa que o Vagrant utiliza para criar suas máquinas virtuais são Boxes, ou no singular uma Box. Essa Box funciona como uma imagem, uma iso do sistema operacional que você quer instalar. Então antes de qualquer coisa vamos adicionar uma box, para que você a tenha disponível para criar seu primeiro teste com vagrant.</p>




<p>Abra o console do seu sistema operacional, seja o cmd no windows ou o terminal no linux ou mac e entre com o comando</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
</pre>




<p>Essa é a box de exemplo que o Quick Start do Vagrant traz para a gente, onde o primeiro parâmetro que vem após add é o nome que estamos dando a nossa box e o segundo o caminho da onde faremos o download. Esse comando vai trazer uma Box do Ubuntu Lucid. Aqui eu recomendo que caso esteja começando com o Vagrant faça um teste usando essa box, mas caso queira avançar um pouco mais, aqui está uma lista de algumas boxes disponíveis por aí <a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a>.</p>




<p>Box preparada, que tal colocar nosso ambiente para rodar?</p>




<p>Crie uma pasta para o seu projeto no seu ambiente de trabalho e acesse ela via console.<br/>
Entre com o seguinte comando:</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant init lucid32
</pre>




<p>Caso tenha usado outro nome para a sua box no passo anterior, substitua no lugar de lucid32 no comando acima.</p>




<p>Como o próprio comando se explica, ele prepara uma configuração inicial para você usando um arquivo que ele cria em seu diretório chamada Vagrantfile. Dentro desse arquivo existe algumas configurações como a box a ser usada entre outros.</p>




<p>Agora é só subir o ambiente.</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant up
</pre>




<p>Ao subir o ambiente o vagrant irá realmente criar sua máquina virtual e configurar as coisas para você. Acompanhe as saídas dos comandos para detalhes.</p>




<p>Tudo pronto!</p>




<p><strong><br/>
Testando</strong></p>




<p>Chegou a hora da verdade. Crie um arquivo html com qualquer conteúdo dentro da pasta do seu projeto.</p>




<p>Por exemplo vamos criar um arquivo chamado teste.html com o seguinte conteúdo</p>




<pre class="brush: xml; title: ; notranslate" title="">&lt;h1&gt;Teste&lt;/h1&gt;
</pre>




<p>Agora acesse via browser a pasta do seu projeto e o arquivo que criou.<br/>
<a href="../../assets/uploads/2012/11/imagem1.png"><img class="alignleft size-full wp-image-587" title="Vagrant - Rodando" src="../../assets/uploads/2012/11/imagem1.png" alt="Vagrant - Rodando" width="394" height="101" /></a><br/>
<br style="clear: both;" /><br/>
Esse HTML está dentro da sua máquina virtual e você está rodando a partir do seu localhost. Muito bom não?</p>




<p>Alguns pontos:</p>




<ul>
<li>Note que você nem abriu essa máquina virtual para trabalhar dentro dela. Você está trabalhando como se ela fosse uma pasta local em sua máquina, essa é a beleza da coisa. Você pode deixar isso melhor organizado usando a opção share_folder do arquivo de configuração Vagrantfile</li>
<li>Mostrei aqui um teste com HTML como também é mostrado no Quick Start do Vagrant, mas você pode instalar o que quiser dentro da sua máquina virtual seja PHP, Java, Python e rodar o que bem entender. Apenas atente para fazer direcionamento das portas para que isso funcione de acordo. Veja a opção forward_port do arquivo de configuração Vagrantfile</li>
<li>Detalhes com todas as opções disponíveis para o Vagrantfile você encontra na documentação oficial <a href="http://vagrantup.com/v1/docs/vagrantfile.html">http://vagrantup.com/v1/docs/vagrantfile.html</a></li>
</ul>




<p><strong><br/>
SSH</strong></p>




<p>E que tal um acesso SSH na sua máquina virtual?<br/>
Sim, o Vagrant te traz isso!<br/>
Se você está no Mac ou Unix apenas entre com o comando abaixo e você está dentro.</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant ssh
</pre>




<p>Para usuários do windows será necessário o uso do puttygen, putty e algumas configurações em cima deles. Nada muito complicado para quem já trabalha com SSH no seu dia a dia.</p>




<p>Após acesar o ssh via vagrant, você sai no seu home <em>/home/vagrant</em>.<br/>
Os arquivos que você criou dentro da pasta do seu projeto podem ser encontrados em <em>/vagrant</em>.</p>




<p><strong><br/>
Distribuindo seu ambiente</strong></p>




<p>Está trabalhando com alguém em um projeto? Que tal enviar esse ambiente que você criou no Vagrant para essa pessoa, para que vocês trabalhem em cima do mesmo ambiente?</p>




<p>Para isso basta criar um pacote da sua máquina virtual com o seguinte comando</p>




<pre class="brush: bash; title: ; notranslate" title="">vagrant package
</pre>




<p>Ao final do processo você terá um arquivo chamado package.box.<br/>
Para que alguém ou você mesmo o utilize, basta seguir os passos apresentados aqui como se esse arquivo fosse uma box que você vai fazer o download. Sem mais.</p>




<p><strong><br/>
Resumo</strong></p>




<p>Apresentei aqui uma geral sobre o Vagrant, porque ele é útil, porque é interessante usá-lo e etc. Fizemos um exemplo e vimos como distribuir esse ambiente com mais pessoas. Cobri aqui o básico dessa sensacional ferramenta para você configurar o ambiente de seus projetos individualmente.</p>




<p>Você pode ir mais além e criar várias máquinas virtuais que se comunicam entre si e outros. Para isso leia a documentação <a href="http://vagrantup.com/v1/docs/index.html">http://vagrantup.com/v1/docs/index.html</a> e se intere do que mais o Vagrant pode fazer por você.</p>




<p>É isso pessoal.<br/>
Abraços.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hangout PHP in Rio]]></title>
    <link href="http://flaviosilveira.com/2012/hangout-php-in-rio/"/>
    <updated>2012-11-02T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2012/hangout-php-in-rio</id>
    <content type="html"><![CDATA[<p>Fala pessoal!</p>




<p>A organização do PHP n Rio deste ano de 2012 tem realizado um bate papo com os palestrantes do evento via Hangout, a funcionalidade de videoconferência do Google Plus.</p>




<p>Como palestrante do evento, chegou minha vez de bater um papo ao vivo junto com Anderson Ferreira (<a href="https://twitter.com/sdfnanderson" title="Twitter Anderson Ferreira">@sdfnanderson</a>) e o pessoal da organização Carlos Carneiro (<a href="https://twitter.com/hiper4tivo" title="Twitter Carlos Carneiro">@hiper4tivo</a>) e Vinicius Machado (<a href="https://twitter.com/x4bigboss" title="Twitter Vinicius Machado">@x4bigboss</a>).</p>




<p>Durante pouco mais de uma hora falamos sobre dicas de carreira, dicas de estudo e desenvolvimento. No final fizemos um bate bola com perguntas e respostas.</p>


<!--more-->


<iframe width="560" height="315" src="https://www.youtube.com/embed/ofl-9RYwIc0" frameborder="0" allowfullscreen></iframe>




<p>Para quem não acompanhou ao vivo pode conferir o vídeo acima.<br/>
Quer saber mais sobre o evento? Acesse <a href="http://www.phpnrio.com.br" title="PHP n Rio">http://www.phpnrio.com.br</a>.<br/>
Grande Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Primeiros Passos No PHPUnit]]></title>
    <link href="http://flaviosilveira.com/2012/primeiros-passos-no-phpunit/"/>
    <updated>2012-10-14T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2012/primeiros-passos-no-phpunit</id>
    <content type="html"><![CDATA[<p>Fala pessoal!</p>




<p>Hoje vamos cobrir os primeiros passos de uma ferramenta super importante para quem quer avançar no desenvolvimento PHP, o PHPUnit. Não vamos passar aqui pela instalação e configuração dele, sendo que já temos vários artigos sobre isso internet a fora seja lá qual for seu sistema operacional. Eu estarei demonstrando os exemplos aqui no Mac OS X mas você pode seguir normalmente no seu sistema.</p>




<p>Para quem não sabe PHPUnit é um framework que nos ajuda a desenvolver testes unitários em PHP. Esse unitário se refere literalmente a unidade, pequenas partes. Logo, testes unitários são testes para pequenas partes de código. No objetivo geral, testando cada unidade vamos saber se toda nossa aplicação está funcionando corretamente, e se não está, qual parte (unidade) está falhando. Pense em um portal onde uma equipe grande trabalha e tem várias alterações de código diariamente para melhorias e correções. Os testes tem que estar sempre ok antes de algo ir para o ar, uma maneira rápida certeira de conferir se nada foi quebrado no código.</p>




<!--more-->




<p>Após instalar e configurar o PHPUnit a primeira coisa a fazer é testar se está tudo ok.<br/>
Para isso vá até o seu console e digite o comando <em>phpunit</em>.<br/>
A saída esperada é um helper como na imagem abaixo:<br/>
<img class="alignleft size-full wp-image-562" title="phpunit 1" src="../../assets/uploads/2012/10/Imagem1.png" alt="testando phpunit" width="487" height="214" /><br style="clear: both;" /></p>




<p>Caso você tenha problemas é hora de checar a sua instalação.<br/>
Se você usa sistema unix e instalou o PHPUnit via PEAR aqui vão algumas dicas para tentar resolver isso:</p>




<ul>
<li>Pode ser que esteja tudo instalado corretamente, mas o console não esteja localizando o comando do PHPUnit. Para resolver isso primeiro verifique se a PEAR está instalada tentando digitar o comando <em>pear</em>. Se sim, entre com o comando <em>pear config-get bin_dir</em> para saber o diretório do bin do PHPUnit. Confira se a saída está no seu PATH de comandos, com o comando <em>echo $PATH</em>. Caso não esteja use o comando <em>export</em> para adicionar esse caminho.</li>
<li>Se você tem certeza que o PEAR está instalado corretamente, execute o seguinte comando para reinstalar o PHPUnit <em>pear install &#8211;alldeps &#8211;force phpunit/PHPUnit</em>.</li>
</ul>




<p>Com tudo ok podemos seguir em frente.<br/>
Daqui em diante conto que você saiba pelo menos um mínimo de Orientação a Objetos para que acompanhe os exemplos abaixo.<br/>
Para que a gente entenda o que esperar do PHPUnit, vamos primeiro criar uma classe com pelo menos um atributo e seus métodos <em>get()</em> e <em>set()</em>.<br/>
Que tal a tradicional classe Carro com uma propiedade de cor?</p>




<pre class="brush: php; title: ; notranslate" title="">/**
 * Classe Carro
 *
 **/
class Carro
{
    private $_cor;

    public function getCor()
    {
        return $this-&gt;_cor;
    }

    public function setCor($cor)
    {
        $this-&gt;_cor = $cor;
    }

}
</pre>




<p>Com a classe principal criada vamos agora preparar nossa classe de testes.<br/>
Vamos chamar nossa classe de testes de CarroTeste.php.</p>




<pre class="brush: php; title: ; notranslate" title="">require_once "Carro.php";

/**
 * Classe Carro Teste
 **/
class CarroTeste extends PHPUnit_Framework_Testcase
{

}
</pre>




<p>Repare em duas coisas no código acima:</p>




<ul>
<li>Sua classe de testes deve conhecer a classe que vai ser testada (use require, include ou autoload).</li>
<li>Sua classe de testes precisa extender o framework PHP_Unit. Para extender o PHPUnit da mesma forma como no código acima, configure corretamente o seu <em>include_path</em> no seu arquivo de configuração do PHP (php.ini). Não sabe onde está seu arquivo php.ini? Utilize o comando <em>php &#8211;ini</em>. Procure por <em>include_path</em> dentro desse arquivo e adicione o caminho para o framework PHPUnit. <em>**A instalação via PEAR constuma adicionar esse caminho para você no php.ini. Confira o arquivo se for caso.</em></li>
</ul>




<p>Finalmente vamos ao nosso teste em si. Vamos testar se nossos métodos <em>get()</em> e <em>set()</em> estão realmente fazendo o que se espera. <em>Get()</em> tem de retornar o mesmo valor passado para <em>set()</em>. Para verificar isso vamos usar o método assertEquals do PHPUnit, veja o exemplo:</p>




<pre class="brush: php; title: ; notranslate" title="">require_once "Carro.php";

/**
 * Classe Carro Teste
 **/
class CarroTeste extends PHPUnit_Framework_Testcase
{
    public function testeCor()
    {
        $carro = new Carro();
        $carro-&gt;setCor("Azul");

        $this-&gt;assertEquals("Azul", $carro-&gt;getCor());
    }
}
</pre>




<p>Criamos um método testeCor em nossa classe de testes.<br/>
Dentro dele instanciamos a classe carro e atribuímos para a propiedade cor o valor Azul.<br/>
O método AssertEquals do PHPUnit vai comparar se os dois parâmetros passados são iguais.</p>




<p>Vamos rodar nosso teste?<br/>
Em seu console execute o comando phpunit passando para ele o caminho da sua classe de testes. O resultado deve ser similar a esse:<br/>
<img class="alignleft size-full wp-image-563" title="Imagem2" src="../../assets/uploads/2012/10/Imagem2.png" alt="Rodando o primeiro teste" width="442" height="171" /><br style="clear: both;" /></p>




<p>Na imagem você percebe abaixo da linha de descrição da versão do PHPUnit um . (ponto). Em seguida uma descrição do tempo de execução e memória utilizada e abaixo um OK. Isso indica que nosso teste teve sucesso. O ponto que falamos acima indica que um teste teve sucesso, em caso de falha teremos um F no lugar do ponto. Para cada teste irá ser adicionado um <em>. ponto</em>ou um <em>F</em>.</p>




<p>Vamos forçar um erro no teste para ver o que acontece? Vamos trocar os parâmetros do nosso <em>AssertEquals</em> e dizer que estamos esperando o resultado <em>Amarelo</em> invés de <em>Azul</em>.</p>




<pre class="brush: php; title: ; notranslate" title="">require_once "Carro.php";

/**
 * Classe Carro Teste
 **/
class CarroTeste extends PHPUnit_Framework_Testcase
{
    public function testeCor()
    {
        $carro = new Carro();
        $carro-&gt;setCor("Azul");

        $this-&gt;assertEquals("Amarelo", $carro-&gt;getCor());
    }
}
</pre>




<p>Rodando nosso teste agora temos a seguinte saída:<br/>
<img class="alignleft size-full wp-image-564" title="Imagem3" src="../../assets/uploads/2012/10/Imagem3.png" alt="Falha no PHPUnit" width="427" height="317" /><br style="clear: both;" /><br/>
No lugar do ponto anterior que indicava sucesso, temos agora um <em>F</em> indicando a falha. Junto a isso o PHPUnit nos traz detalhes da falha com o nome do teste que falhou, o que era esperado e o que foi retornado.</p>




<p>A ideia por trás do PHPUnit e suas funções é bem similar ao que foi demonstrado acima, com o detalhe que algumas funções podem ter mais parâmetros ou esperar tipos diferentes de dados. Que tal descobrir mais métodos do PHPUnit e criar novos testes? Visite o capítulo 4 do manual do PHPUnit e teste outras funções do framework. Segue o link para o manual: <a href="http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html" title="PHPUnit Manual Cap4">http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html</a>.</p>




<p>Grande Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Game Jam 2012]]></title>
    <link href="http://flaviosilveira.com/2012/global-game-jam-2012/"/>
    <updated>2012-01-06T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2012/global-game-jam-2012</id>
    <content type="html"><![CDATA[<p>Salve pessoal!</p>




<p>Na minha palestra <a href="http://flaviosilveira.com/2011/palestra-quero-ser-um-desenvolvedor-de-jogos/" title="Palestra Quero ser um desenvolvedor de jogos">Quero ser um desenvolvedor de jogos</a> que estive apresentando durante o ano de 2011, eu comento sobre a Global Game Jam.</p>




<p>A Global Game Jam é um evento que acontece todo ano e ocorre simultâneamente em todo o mundo. Funciona da seguinte maneira:<br/>
Através do site que organiza o evento (<a href="http://globalgamejam.org" title="Global Game Jam">http://globalgamejam.org</a>) é divulgado um tema. Com esse tema em mãos, equipes de desenvolvedores de jogos (programadores, artistas, músicos, roteiristas, etc) unem forças para desenvolver o seu próprio game. O prazo máximo é de 48 horas e pode ser usado qualquer tecnologia.</p>




<!--more-->




<p>Em muitas cidades, as faculdades, empresas e outras instituições reúnem e organizam pessoas que tem interesse em participar, dividindo as equipes para que elas fiquem mais competitivas e também cedendo um local de trabalho para essas equipes. Alguns locais também colaboram com a alimentação dos participantes e, como o prazo é curto, também pode ser um bom abrigo para o seu colchonete. Mas cuidado! As vagas nesses locais geralmente são limitadas.</p>




<p>O Evento é uma excelente porta de entrada para você que quer conhecer o processo de desenvolvimento de jogos, além do grande networking e distribuição de conhecimento que esse evento gera. Em 2011 foram mais de 1500 jogos criados, com participação de mais de 6.500 pessoas em mais de 44 países.</p>




<p>As inscrições para esse ano já estão quase acabando. O que você está esperando para participar?<br/>
Acesse já o <a href="http://globalgamejam.org" title="Site Global Game Jam">site da Global Game Jam</a>, veja as cidades inscritas e participe. Caso sua cidade não esteja participando, ou os locais na sua cidade estejam com vagas esgotadas, junte seus amigos e monte sua equipe. Veja informações de como se cadastrar nesse wiki feito pela organização <a href="http://globalgamejam.org/wiki/how-register-ggj-2012" title="Como se registrar na Global Game Jam 2012">http://globalgamejam.org/wiki/how-register-ggj-2012</a></p>




<p>Uma dica: Se você for participar através de alguma faculdade, empresa ou instituição na sua cidade, não deixe de entrar em contato com os organizadores e se informar sobre o que terá no local, o que precisa ser levado, etc. Não seja pego de surpresa, principalmente no que diz respeito a comida, sono e emocional. Levante também a necessidade de se cadastrar em um site do local onde você irá participar. Geralmente isso é feito para um controle dos organizadores.</p>




<p>O evento esse ano começa no dia 27 de janeiro no período da noite e vai até o domingo dia 29.<br/>
Não deixe de participar.</p>




<p>Grande Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencast – Começando Bem Com Zend Framework]]></title>
    <link href="http://flaviosilveira.com/2011/screencast-comecando-bem-com-zend-framework/"/>
    <updated>2011-12-29T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2011/screencast-comecando-bem-com-zend-framework</id>
    <content type="html"><![CDATA[<p>Salve pessoal!</p>




<p>Gravei esse screencast baseado no mini-curso/palestra que estive apresentando durante esse ano com o título de <em>Começando bem com Zend Framework</em>.</p>




<p>O vídeo não tem edição, foi gravado direto, sem roteiro.<br/>
Por isso peço desculpas se acabei atropelando alguma explicação ou se algo não ficar muito claro para alguém, principalmente para iniciantes. Da forma como foi finalizado acabou ficando mais voltado para quem já tem um conhecimento com outros frameworks ou um conhecimento legal de PHP.</p>




<p>Dúvidas? Perguntas? Sugestões? Estamos aí.<br/>
Aguardo o feedback de todos.<br/>
Grande Abraço!</p>


<!--more-->


<iframe src="https://player.vimeo.com/video/34341638" width="640" height="392" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p><a href="https://vimeo.com/34341638">Come&ccedil;ando Bem com Zend Framework</a> from <a href="https://vimeo.com/user9814221">Fl&aacute;vio Silveira</a> on <a href="https://vimeo.com">Vimeo</a>.</p>




<p><strong>Alguns Links que aparecem no screencast</strong></p>




<ul>
<li><a href="http://framework.zend.com/download/current/" title="Download Zend Framework">Download Zend &#8211; http://framework.zend.com/download/current/</a><strong><br/>
</strong></li>
<li><a href="http://www.slideshare.net/flavioaugustosilveira/minicurso-zend" title="SlideShare Flávio Silveira">Slideshare.net &#8211; http://www.slideshare.net/flavioaugustosilveira/minicurso-zend</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Salvando Tempo No Terminal]]></title>
    <link href="http://flaviosilveira.com/2011/salvando-tempo-no-terminal/"/>
    <updated>2011-12-02T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2011/salvando-tempo-no-terminal</id>
    <content type="html"><![CDATA[<p>Fala pessoal!</p>




<p>No post anterior (<a href="http://flaviosilveira.com/2011/conhecendo-melhor-seu-interpretador-de-comandos/">conhecendo melhor seu interpretador de comandos</a>) vimos uma prévia sobre o que é Shell e as implementações de Shell, dentro disso a principal de todas elas que é o bash e alguns comandos que podem facilitar a sua vida enquanto trabalha com ele.</p>




<p>Seguindo o comentário do meu super brother Daniel Correa, vamos falar rapidamente aqui sobre um alguns comandos que podes salvar alguns minutos (até horas) de trabalho no terminal.</p>




<p>Quantas vezes você já não precisou daquele comando no terminal que executou há semanas, meses atrás, e não lembra de maneira alguma. O que você faz?? Inevitavelmente fica clicando na tecla da seta para cima por horas até encontrar o seu abençoado comando. Mas você deve saber que essa não é a melhor maneira de resolver isso.</p>




<!--more-->




<p><strong>Buscando comandos digitados no terminal</strong></p>




<p>Com o comando <em>back search</em>, executado através de <em>ctrl + r</em>, você faz uma busca pelos comandos que executou que estão presentes no seu histórico. Você digita algumas letras ou trecho do comando que está buscando e o resultado vai aparecendo para você na linha de comando.</p>




<p>Para usar, basta apertar a tecla <em>enter</em>.<br/>
Para editar o comando, mudar algum parâmetro por exemplo, digite <em>ctrl + j</em> ou <em>esc</em>.<br/>
Para cancelar, <em>ctrl + c</em>ou <em>ctrl + g</em>.</p>




<p><strong>Exigindo um pouco mais do histórico</strong></p>




<p>Você pode explorar mais do histórico de comandos e usar ele a seu favor durante o trabalho.<br/>
Uma das maneiras de se fazer isso é com o comando abaixo:</p>




<pre class="brush: bash; title: ; notranslate" title="">history
</pre>




<p>O comando exibe para você tudo que está presente no seu histórico.<br/>
<img src="../../assets/uploads/2011/12/Captura-de-Tela-2011-12-02-às-5.19.56-AM.png" alt="" title="Bash history" width="342" height="129" class="alignnone size-full wp-image-438" /></p>




<p>Uma maneira rápida de executar novamente esses comandos é pegar a referência deles no histórico, ou seja, pegar esse número que aparece ao lado esquerdo dos comandos (veja imagem acima) e passar ele após um ponto de exclamação, por exemplo:</p>




<pre class="brush: bash; title: ; notranslate" title="">!44
</pre>




<p>Dessa forma, eu irei executar o comando de referência 44 do meu histórico, que no meu caso aqui é um <em>clear</em>.</p>




<p>Seguindo a mesma linha, podemos por exemplo executar o comando digitado a dois comandos atrás, da seguinte forma:</p>




<pre class="brush: bash; title: ; notranslate" title="">!-2
</pre>




<p>Sinta-se à vontade para substituir esse 2 pelo número de vezes que quer voltar no histórico.</p>




<p>Para executar o comando anterior, basta colocar o 1, no lugar do 2 no comando acima, ou ainda substituir o número por uma exclamação (ficando duas exclamações).</p>




<p><strong>O que mais?</strong></p>




<p>Há muito mais a se desvendar e ganhar com o uso do history, como por exemplo: usar palavras chaves para busca, pegar parâmetros de comandos anteriores para um novo comando, entre outros. Aqui tivemos apenas uma pequena prévia das coisas. Mais sobre tudo isso você consegue no próprio manual do history.</p>




<pre class="brush: bash; title: ; notranslate" title="">man history
</pre>




<p>Espero que esse pequeno post ajude você a agilizar um pouco mais de tempo com as coisas no terminal.<br/>
Dúvidas? Sugestões? Estamos aí!<br/>
Grande Abraço!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conhecendo Melhor Seu Interpretador De Comandos]]></title>
    <link href="http://flaviosilveira.com/2011/conhecendo-melhor-seu-interpretador-de-comandos/"/>
    <updated>2011-10-30T00:00:00+00:00</updated>
    <id>http://flaviosilveira.com/2011/conhecendo-melhor-seu-interpretador-de-comandos</id>
    <content type="html"><![CDATA[<p>Se você é usuário de sistemas operacionais baseados em unix, deve estar acostumado a abrir o terminal para tarefas simples como mover e copiar arquivos, remover arquivos em massa, criar pastas, verificar diretórios, etc. Se você conhece um pouco mais e administra sites por exemplo, deve mover seus arquivos com scp, usar conexões ssh e fazer todo seu trabalho via terminal.</p>




<p>Quem faz essa ligação entre você e o coração do sistema operacional, permitindo executar esses comandos, é o Shell. Quem interpreta e processa os comandos para você, é uma implementação do Shell, que é o que vamos conhecer melhor aqui hoje.</p>




<p>Este termo Shell, deve ter feito você lembrar sobre Shell Script, que escutamos falar muito e nada mais é do que um script com vários comandos Shell dentro dele.</p>




<p>Dentre as implementações de Shell, aquilo que interpreta seus comandos, a mais famosa hoje é o Bash (Bourne-again shell, fazendo uma referência ao Bourne Shell que você pode pesquisar sobre). Para conferir qual o interpretador padrão de seus comandos, em seu terminal digite o seguinte comando</p>




<!--more-->




<pre class="brush: bash; title: ; notranslate" title="">echo $SHELL
</pre>




<p>Se seu interpretador for o Bash, como a maioria, você vai ver a saída <em>/bin/bash</em>.</p>




<p>Entre outras implementações de Shell podemos ter <em>csh</em>, <em>tcsh</em>, <em>sh</em>, <em>ksh</em>, e várias outras. Para conferir se essas implementações estão instaladas no seu sistema operacional, basta digitar o nome delas. Por exemplo:</p>




<pre class="brush: bash; title: ; notranslate" title="">bash
</pre>




<p>Caso esteja instalada, o terminal irá permitir que execute comandos naquela implementação, caso contrário apontará como comando inexistente. Você também consegue uma listagem das implementações shell disponíveis em seu sistema operacional abrindo o arquivo shells, geralmente localizado em <em>/etc/shells</em>.</p>




<p>Acredito que se você usar outras implementações apenas por algum tempo, vai achar todas muito parecidas pois uma deriva ou usa a outra, e assim nem vai notar diferença entre elas.</p>




<p><strong>Usando o Bash</strong></p>




<p>O bash traz alguns atalhos que podem facilitar a sua vida, sendo um dos principais a tecla <em>TAB</em> (ou <em>ctrl + i</em>) para completar comandos, nomes de arquivos ou nomes de variáveis.</p>




<p>Para buscar por comandos que você tenha digitado anteriormente use <em>ctrl + r</em>.<br/>
Para anular a busca use <em>ctrl + c</em>, que também é usado para abortar outros comandos, scripts e as vezes loops infinitos.</p>




<p><em>ctrl + a</em> para ir ao início da linha do comando (também obtido com a tecla <em>home</em>, se houver), <em>ctrl + e</em> para ir ao final dela (equivalente a tecla <em>end</em>).<br/>
Perdeu a tecla <em>enter</em> ou cansou dela? Use <em>ctrl + j</em></p>




<p>Esses atalhos tendem a funcionar melhor quando se está definido o padrão de teclas <em>Emacs</em>, embora grande maioria deles funcione em outros padrões.</p>




<p>Você pode mudar esse padrão com o comando</p>




<pre class="brush: bash; title: ; notranslate" title="">set -o emacs
</pre>




<p>Você poderia usar o padrão <em>VI</em>, da seguinte maneira</p>




<pre class="brush: bash; title: ; notranslate" title="">set -o vi
</pre>




<p>Como exemplo para essa situação, temos os atalhos <em>ctrl + p</em> (equivalente a seta para cima) e <em>ctrl + n</em> (equivalente a seta para baixo) para trazer os últimos comandos executados. Eles funcionam apenas no padrão <em>emacs</em>.</p>




<p><strong>Preciso saber esses comandos?</strong></p>




<p>Muito provavelmente um marginal não vai encostar uma arma na sua cabeça lhe cobrando esses comandos no meio da rua. Mas talvez algum dia na sua carreira, você vai entrar em algum Data Center, e ter de mexer diretamente em uma máquina que estiver dentro de um hack enorme.</p>




<p>Você irá puxar uma pequena gaveta, que irá se tornar um monitor e um simples teclado. Esse teclado pode conter apenas teclas básicas, excluindo assim as suas tão usadas setas para navegar entre os caracteres e palavras, e as vezes até sem a tecla enter. Esteja preparado conhecendo alguns desses comandos. Lembre-se que o google pode não estar por perto.</p>




<p>Em breve trarei para vocês uma alternativa bem legal para o Bash, e como ela pode ajudar na produtividade de pessoas que trabalham diretamente com o terminal.</p>




<p>Até lá!</p>

]]></content>
  </entry>
  
</feed>
